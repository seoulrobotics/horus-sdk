load("@rules_cc//cc:cc_binary.bzl", "cc_binary")
load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_cc//cc:cc_test.bzl", "cc_test")

cc_library(
    name = "cpp",
    srcs = glob(
        ["horus/**/*.cpp", "horus/internal/*.h"],
        exclude = [
            "horus/**/*_test.cpp",
            "horus/event_loop/uv_handles_generator.cpp",
            "horus/testing/**",
        ],
    ) + [
        # These headers are internal so we put them in `srcs`.
        ":horus/internal/attributes.h",
        ":horus/event_loop/uv_handles.h",
    ],
    hdrs = glob(
        ["horus/**/*.h"],
        exclude = [
            "horus/internal/**",
            "horus/testing/**",
        ],
    ),
    deps = [
        "@ixwebsocket",
        "@libuv",
        "@protozero",
    ],
    includes = ["."],
    visibility = ["//visibility:public"],
)

# bazel test --cxxopt=-std=c++17 //cpp:cpp_test
cc_test(
    name = "cpp_test",
    size = "small",
    srcs = glob([
        "horus/**/*_test.cpp",
        "horus/testing/*.cpp",
        "horus/testing/*.h",
    ]),
    deps = [
        ":cpp",
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
    defines = [
        'HORUS_SDK_TESTING_MESSAGES_PROTO_PATH=\\"$(execpath //proto:horus/pb/testing/messages.proto)\\"',
    ],
    data = ["//proto:horus/pb/testing/messages.proto"],
)

# --------------------------------------------------------------------------------------------------
# MARK: Code generation

genrule(
    name = "attributes",
    outs = ["horus/internal/attributes.h"],
    srcs = ["horus/internal/attributes.h.in"],
    cmd = """
        sed -E 's/\\$$\\{HORUS_SDK_(ATTRIBUTE_NO_UNIQUE_ADDRESS|ATTRIBUTE_TRIVIAL_ABI|SOURCE_DIR|THREAD_ANNOTATION_ATTRIBUTE)\\}//g
                s/#cmakedefine01 HORUS_SDK_USE_PB_NAMESPACE_ALIAS/#define HORUS_SDK_USE_PB_NAMESPACE_ALIAS 1/g
            ' $< > $@
    """,
)

genrule(
    name = "uv_handles",
    outs = ["horus/event_loop/uv_handles.h"],
    cmd = "$(execpath :uv_handles_generator) $@",
    tools = [":uv_handles_generator"],
)

cc_binary(
    name = "uv_handles_generator",
    srcs = ["horus/event_loop/uv_handles_generator.cpp"],
    deps = ["@libuv"],
)
