#ifndef HORUS_PB_CALIBRATION_MAP_PB_H_
#define HORUS_PB_CALIBRATION_MAP_PB_H_

/// @file
///
/// C++ type definitions for Protobuf messages in `horus/pb/calibration_map.proto`.
///
/// Generated by `/home/runner/work/horus/horus/common/tools/sdk/pb.ts`.

#include <bitset>
#include <cstdint>
#include <utility>

#include "horus/attributes.h"
#include "horus/pb/cow_span.h"
#include "horus/pb/message.h"
#include "horus/pb/serialize.h"
#include "horus/strings/string_view.h"

#if HORUS_SDK_USE_PB_NAMESPACE_ALIAS
#include "horus/pb/alias.h"  // IWYU pragma: export
#endif

// NOLINTBEGIN(readability-identifier-length)

namespace horus {
namespace sdk {
namespace pb {

// MARK: Message forward declarations

class CalibrationMap;

// MARK: Message declarations

/// No documentation.
///
/// Source: horus/pb/calibration_map.proto:5:1
class CalibrationMap final : public PbMessage {
 public:

  /// Constructs a default-initialized `CalibrationMap`.
  CalibrationMap() noexcept = default;

  /// Move constructor.
  CalibrationMap(CalibrationMap&&) noexcept = default;
  /// Move assignment operator.
  CalibrationMap& operator=(CalibrationMap&&) noexcept = default;

  /// Constructs a clone of `other`.
  ///
  /// @throws std::bad_alloc If `other` owns heap-allocated data which could not be cloned due to a
  /// lack of available memory.
  explicit CalibrationMap(const CalibrationMap& other) noexcept(false);  // NOLINT(*-explicit-*)

  /// Cannot copy-assign to avoid implicit allocations.
  CalibrationMap& operator=(const CalibrationMap&) = delete;

  /// Default destructor.
  ~CalibrationMap() noexcept final = default;

  /// Creates a `CalibrationMap` whose contents are read from `reader`.
  ///
  /// @throws InvalidProtobufMessage If the `reader` contains an invalid Protobuf message.
  explicit CalibrationMap(PbReader& reader) noexcept(false) : PbMessage{} {
    DeserializeFrom(reader);
  }

  /// Serializes the message to `writer`.
  ///
  /// @throws std::bad_alloc If the resulting buffer failed to allocate.
  void SerializeTo(PbWriter& writer) const noexcept(false) final;

  /// Deserializes the message from `reader`.
  ///
  /// @throws InvalidProtobufMessage If the `reader` contains an invalid Protobuf message.
  void DeserializeFrom(PbReader& reader) noexcept(false) final;

  /// Returns whether the message is empty.
  bool IsEmpty() const noexcept final { return set_fields_.none(); }

  /// The full name of the message: `horus.pb.CalibrationMap`.
  static constexpr StringView TypeName() noexcept { return "horus.pb.CalibrationMap"; }

  /// The full name of the message: `horus.pb.CalibrationMap`.
  StringView MessageTypeName() const noexcept final { return TypeName(); }

  // Field `map_points` (no 2).
  // -----

  /// Packed 3D points (x, y, z)
  ///
  /// Field no: 2.
  constexpr const CowSpan<float>& map_points() const& noexcept HORUS_LIFETIME_BOUND {
    return map_points_;
  }

  /// If `map_points` is set, moves it out of the message (without marking it as unset).
  ///
  /// Otherwise, returns a default-initialized value.
  ///
  /// Field no: 2.
  CowSpan<float> map_points() && noexcept {
    if (!set_fields_[0]) {
      return {};
    }
    return std::move(map_points_);
  }

  /// Packed 3D points (x, y, z)
  ///
  /// Field no: 2.
  CowSpan<float>& mutable_map_points() & noexcept HORUS_LIFETIME_BOUND {
    set_fields_[0] = true;
    return map_points_;
  }

  /// Returns whether `map_points` (no 2) is set.
  constexpr bool has_map_points() const noexcept { return set_fields_[0]; }

  /// Clears `map_points` (no 2).
  void clear_map_points() & noexcept {
    set_fields_[0] = false;
    map_points_ = {};
  }

  /// Sets `map_points` (no 2) and returns `*this`.
  CalibrationMap& set_map_points(CowSpan<float>&& map_points) & noexcept {
    set_fields_[0] = true;
    map_points_ = std::move(map_points);
    return *this;
  }
  /// Sets `map_points` (no 2) and returns `*this`.
  CalibrationMap&& set_map_points(CowSpan<float>&& map_points) && noexcept {
    return std::move(set_map_points(std::move(map_points)));
  }

 private:
  /// @see map_points()
  CowSpan<float> map_points_{};

  /// The set of fields that have been given an explicit value.
  std::bitset<1> set_fields_;
};

}  // namespace pb
}  // namespace sdk
}  // namespace horus

// NOLINTEND(readability-identifier-length)

#endif  // HORUS_PB_CALIBRATION_MAP_PB_H_
