#ifndef HORUS_PB_LICENSE_SERVER_MESSAGES_PB_H_
#define HORUS_PB_LICENSE_SERVER_MESSAGES_PB_H_

/// @file
///
/// C++ type definitions for Protobuf messages in `horus/pb/license_server/messages.proto`.
///
/// Generated by `/home/runner/work/horus/horus/common/tools/sdk/pb.ts`.

#include <bitset>
#include <cstdint>
#include <utility>

#include "horus/pb/config/metadata_pb.h"
#include "horus/pb/message.h"
#include "horus/pb/serialize.h"
#include "horus/types/string_view.h"

#if HORUS_SDK_USE_PB_NAMESPACE_ALIAS
#include "horus/pb/alias.h"  // IWYU pragma: export
#endif

// NOLINTBEGIN(readability-identifier-length)

namespace horus {
namespace sdk {
namespace pb {

// MARK: Message forward declarations

class LicenseInfo;

// MARK: Message declarations

/// No documentation.
///
/// Source: horus/pb/license_server/messages.proto:7:1
class LicenseInfo final : public PbMessage {
 public:

  /// Constructs a default-initialized `LicenseInfo`.
  LicenseInfo() noexcept = default;

  /// Move constructor.
  LicenseInfo(LicenseInfo&&) noexcept = default;
  /// Move assignment operator.
  LicenseInfo& operator=(LicenseInfo&&) noexcept = default;

  /// Constructs a clone of `other`.
  ///
  /// @throws std::bad_alloc If `other` owns heap-allocated data which could not be cloned due to a
  /// lack of available memory.
  explicit LicenseInfo(const LicenseInfo& other) noexcept(false);  // NOLINT(*-explicit-*)

  /// Cannot copy-assign to avoid implicit allocations.
  LicenseInfo& operator=(const LicenseInfo&) = delete;

  /// Default destructor.
  ~LicenseInfo() noexcept final = default;

  /// Creates a `LicenseInfo` whose contents are read from `reader`.
  ///
  /// @throws InvalidProtobufMessage If the `reader` contains an invalid Protobuf message.
  explicit LicenseInfo(PbReader& reader) noexcept(false) : PbMessage{} {
    DeserializeFrom(reader);
  }

  /// Serializes the message to `writer`.
  ///
  /// @throws std::bad_alloc If the resulting buffer failed to allocate.
  void SerializeTo(PbWriter& writer) const noexcept(false) final;

  /// Deserializes the message from `reader`.
  ///
  /// @throws InvalidProtobufMessage If the `reader` contains an invalid Protobuf message.
  void DeserializeFrom(PbReader& reader) noexcept(false) final;

  /// Returns whether the message is empty.
  bool IsEmpty() const noexcept final { return set_fields_.none(); }

  /// The full name of the message: `horus.pb.LicenseInfo`.
  static constexpr StringView TypeName() noexcept { return "horus.pb.LicenseInfo"; }

  /// The full name of the message: `horus.pb.LicenseInfo`.
  StringView MessageTypeName() const noexcept final { return TypeName(); }

  // Field `expiration_date` (no 1).
  // -----

  /// Timestamp defining the license's end date of validity
  ///
  /// Field no: 1.
  constexpr const Timestamp& expiration_date() const& noexcept HORUS_SDK_ATTRIBUTE_LIFETIME_BOUND {
    return expiration_date_;
  }

  /// If `expiration_date` is set, moves it out of the message (without marking it as unset).
  ///
  /// Otherwise, returns a default-initialized value.
  ///
  /// Field no: 1.
  Timestamp expiration_date() && noexcept {
    if (!set_fields_[0]) {
      return {};
    }
    return std::move(expiration_date_);
  }

  /// Timestamp defining the license's end date of validity
  ///
  /// Field no: 1.
  Timestamp& mutable_expiration_date() & noexcept HORUS_SDK_ATTRIBUTE_LIFETIME_BOUND {
    set_fields_[0] = true;
    return expiration_date_;
  }

  /// Returns whether `expiration_date` (no 1) is set.
  constexpr bool has_expiration_date() const noexcept { return set_fields_[0]; }

  /// Clears `expiration_date` (no 1).
  void clear_expiration_date() & noexcept {
    set_fields_[0] = false;
    expiration_date_ = {};
  }

  /// Sets `expiration_date` (no 1) and returns `*this`.
  LicenseInfo& set_expiration_date(Timestamp&& expiration_date) & noexcept {
    set_fields_[0] = true;
    expiration_date_ = std::move(expiration_date);
    return *this;
  }
  /// Sets `expiration_date` (no 1) and returns `*this`.
  LicenseInfo&& set_expiration_date(Timestamp&& expiration_date) && noexcept {
    return std::move(set_expiration_date(std::move(expiration_date)));
  }

  // Field `lidar_count` (no 2).
  // -----

  /// Number of LiDAR devices running at the same time allowed by the license
  ///
  /// Field no: 2.
  constexpr std::uint32_t lidar_count() const& noexcept HORUS_SDK_ATTRIBUTE_LIFETIME_BOUND {
    return lidar_count_;
  }

  /// Number of LiDAR devices running at the same time allowed by the license
  ///
  /// Field no: 2.
  std::uint32_t& mutable_lidar_count() & noexcept HORUS_SDK_ATTRIBUTE_LIFETIME_BOUND {
    set_fields_[1] = true;
    return lidar_count_;
  }

  /// Returns whether `lidar_count` (no 2) is set.
  constexpr bool has_lidar_count() const noexcept { return set_fields_[1]; }

  /// Clears `lidar_count` (no 2).
  void clear_lidar_count() & noexcept {
    set_fields_[1] = false;
    lidar_count_ = {};
  }

  /// Sets `lidar_count` (no 2) and returns `*this`.
  LicenseInfo& set_lidar_count(std::uint32_t lidar_count) & noexcept {
    set_fields_[1] = true;
    lidar_count_ = lidar_count;
    return *this;
  }
  /// Sets `lidar_count` (no 2) and returns `*this`.
  LicenseInfo&& set_lidar_count(std::uint32_t lidar_count) && noexcept {
    return std::move(set_lidar_count(lidar_count));
  }

 private:
  /// @see expiration_date()
  Timestamp expiration_date_{};
  /// @see lidar_count()
  std::uint32_t lidar_count_{};

  /// The set of fields that have been given an explicit value.
  std::bitset<2> set_fields_;
};

}  // namespace pb
}  // namespace sdk
}  // namespace horus

// NOLINTEND(readability-identifier-length)

#endif  // HORUS_PB_LICENSE_SERVER_MESSAGES_PB_H_
