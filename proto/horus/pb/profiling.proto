syntax = "proto3";

package horus.pb;

import "horus/pb/config/metadata.proto";

/// A profiling set.
message ProfilingSet {
  enum ProfiledService {
    SERVICE_UNSPECIFIED = 0;
    PREPROCESSING_SERVICE = 1;
    DETECTION_SERVICE = 2;
  }

  message ProfiledDuration {
    message PerformanceHint {
      enum ConfigParameterAction {
        CONFIG_PARAMETER_ACTION_UNSPECIFIED = 0;
        INCREASE = 1;
        DECREASE = 2;
      }

      ConfigParameterAction config_parameter_action = 1;
      string config_parameter_name = 2;
    }

    /// The duration of the profiled section.
    Duration duration = 1;
    /// A list of hints on how to improve the profiled section.
    repeated PerformanceHint performance_hints = 2;
  }

  /// The profiled service.
  ProfiledService profiled_service = 1;
  /// A map of profiling measurements id to profiled durations.
  message ProfiledDurationMapEntry { string key = 1; ProfiledDuration value = 2; }
  repeated ProfiledDurationMapEntry processing_times = 2;

  message ResourceUsage {
    /// CPU usage of the service in percentage.
    /// The percentage can be above 100% if multiple cores are used.
    uint32 cpu_usage_percentage = 1;
    /// Memory usage of the service in bytes.
    uint64 memory_usage = 2;
  }

  /// Resource usage profiling of the service.
  optional ResourceUsage resource_usage = 3;
}

/// The profiling of a service including the total service latency (total
/// processing time + total idle time) and the profiling details.
message ServiceProfiling {
  /// The profiling details.
  ProfilingSet details_profiling_set = 1;

  /// The total service latency which is a sum of the total idle time and the
  /// total processing time (when the data is actually being processed)
  Duration total_service_latency = 2;

  /// The total idle time of the service (when the data is not being processed).
  reserved 3;

  /// The idle time before the service starts processing the data, i.e. from
  /// bundle time to the first processing time.
  Duration idle_time_before_processing = 4;

  /// The intra idle time of the service (when the data is not being processed
  /// between two processing times).
  Duration intra_component_idle_time = 5;
}

message PreprocessingServicePointCloudProfiling {
  /// The preprocessing service profiling for a given point cloud.
  ServiceProfiling service_profiling = 1;

  /// The latency to send the given point cloud from the preprocessing
  /// service to the detection service.
  Duration point_cloud_sending_latency = 2;
}

/// The frame profiling. It includes important profiling for a frame such as
/// the overall latency or its bundling time.
message FrameProfiling {
  /// The overall latency of the frame (from the earliest point cloud arrival
  /// inside the frame to the publishing of the frame).
  Duration overall_frame_latency = 1;

  /// The time we spent waiting for the frame to be bundled (this is an
  /// important metric as this time does not depend on us but on the lidars
  /// publishing time).
  /// It has to be substracted to the overall frame latency to get the total
  /// overhead of our pipeline for the frame.
  Duration frame_bundling_latency = 2;
}

/// A bundled profiling set bundling bundled frame profiling set of the
/// detection service with the profiling sets of each points in the frame
/// (generated by the preprocessing service).
message BundledFrameProfilingSet {
  reserved 1, 2;

  /// The associated frame timestamp (the point cloud arrival average timestamp
  /// that the frame contains).
  Timestamp frame_timestamp = 3;

  FrameProfiling frame_profiling = 4;

  ServiceProfiling detection_service_profiling = 5;

  reserved 6;

  message PreprocessingServicePointCloudProfilingMapEntry { string key = 1; PreprocessingServicePointCloudProfiling value = 2; }

  repeated PreprocessingServicePointCloudProfilingMapEntry preprocessing_service_point_cloud_profiling = 7;
}

/// A profiling info sent to the notification service and forward to its
/// subscribers.
message ProfilingInfo {
  oneof profiling_set {
    /// General profiling set of a service.
    ProfilingSet general_profiling_set = 1;
    /// Bundled frame profiling set (pipeline profiling sets of the detection
    /// and preprocessing services).
    BundledFrameProfilingSet bundled_frame_profiling_set = 2;
  }
}