// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.3
// source: horus/pb/preprocessing/messages.proto

package messages_pb

import (
	metadata_pb "github.com/seoulrobotics/horus-sdk/go/proto/config/metadata_pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / The classification of the occupancy grid cell.
// / @note The maximum number of classification enum values supported is 2^3=8.
// / @see `OccupancyGrid` message and `occupancy_map_constants` for more details.
type OccupancyClassification int32

const (
	OccupancyClassification_OCCUPANCYCLASSIFICATION_UNSPECIFIED OccupancyClassification = 0
	OccupancyClassification_FREE                                OccupancyClassification = 1
	OccupancyClassification_OCCLUDED                            OccupancyClassification = 2
	OccupancyClassification_STATIONARY_OCCUPIED                 OccupancyClassification = 3
	OccupancyClassification_EXCLUDED                            OccupancyClassification = 4
)

// Enum value maps for OccupancyClassification.
var (
	OccupancyClassification_name = map[int32]string{
		0: "OCCUPANCYCLASSIFICATION_UNSPECIFIED",
		1: "FREE",
		2: "OCCLUDED",
		3: "STATIONARY_OCCUPIED",
		4: "EXCLUDED",
	}
	OccupancyClassification_value = map[string]int32{
		"OCCUPANCYCLASSIFICATION_UNSPECIFIED": 0,
		"FREE":                                1,
		"OCCLUDED":                            2,
		"STATIONARY_OCCUPIED":                 3,
		"EXCLUDED":                            4,
	}
)

func (x OccupancyClassification) Enum() *OccupancyClassification {
	p := new(OccupancyClassification)
	*p = x
	return p
}

func (x OccupancyClassification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OccupancyClassification) Descriptor() protoreflect.EnumDescriptor {
	return file_horus_pb_preprocessing_messages_proto_enumTypes[0].Descriptor()
}

func (OccupancyClassification) Type() protoreflect.EnumType {
	return &file_horus_pb_preprocessing_messages_proto_enumTypes[0]
}

func (x OccupancyClassification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Sensor status enum.
// @note Each enum value should be a power of two.
// @note No status should have the same value.
type SensorStatus int32

const (
	SensorStatus_SENSOR_STATUS_UNSPECIFIED SensorStatus = 0
	SensorStatus_NO_DATA                   SensorStatus = 1
	SensorStatus_RECEIVING_DATA            SensorStatus = 2
	SensorStatus_LOW_FREQUENCY             SensorStatus = 4
	SensorStatus_HIGH_FREQUENCY            SensorStatus = 8
	SensorStatus_TILTED                    SensorStatus = 16
	SensorStatus_OBSTRUCTED                SensorStatus = 32
)

// Enum value maps for SensorStatus.
var (
	SensorStatus_name = map[int32]string{
		0:  "SENSOR_STATUS_UNSPECIFIED",
		1:  "NO_DATA",
		2:  "RECEIVING_DATA",
		4:  "LOW_FREQUENCY",
		8:  "HIGH_FREQUENCY",
		16: "TILTED",
		32: "OBSTRUCTED",
	}
	SensorStatus_value = map[string]int32{
		"SENSOR_STATUS_UNSPECIFIED": 0,
		"NO_DATA":                   1,
		"RECEIVING_DATA":            2,
		"LOW_FREQUENCY":             4,
		"HIGH_FREQUENCY":            8,
		"TILTED":                    16,
		"OBSTRUCTED":                32,
	}
)

func (x SensorStatus) Enum() *SensorStatus {
	p := new(SensorStatus)
	*p = x
	return p
}

func (x SensorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_horus_pb_preprocessing_messages_proto_enumTypes[1].Descriptor()
}

func (SensorStatus) Type() protoreflect.EnumType {
	return &file_horus_pb_preprocessing_messages_proto_enumTypes[1]
}

func (x SensorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// / The data of the occupancy map.
// / The data is formated with a run-length encoding (RLE) in row-major order.
// / Consecutive cells of the same classification are compressed into a single
// / uint32.
type OccupancyGrid struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Rows  uint32                 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	xxx_hidden_Cols  uint32                 `protobuf:"varint,2,opt,name=cols,proto3" json:"cols,omitempty"`
	xxx_hidden_Cells []uint32               `protobuf:"varint,3,rep,packed,name=cells,proto3" json:"cells,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OccupancyGrid) Reset() {
	*x = OccupancyGrid{}
	mi := &file_horus_pb_preprocessing_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OccupancyGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OccupancyGrid) ProtoMessage() {}

func (x *OccupancyGrid) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_preprocessing_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OccupancyGrid) GetRows() uint32 {
	if x != nil {
		return x.xxx_hidden_Rows
	}
	return 0
}

func (x *OccupancyGrid) GetCols() uint32 {
	if x != nil {
		return x.xxx_hidden_Cols
	}
	return 0
}

func (x *OccupancyGrid) GetCells() []uint32 {
	if x != nil {
		return x.xxx_hidden_Cells
	}
	return nil
}

func (x *OccupancyGrid) SetRows(v uint32) {
	x.xxx_hidden_Rows = v
}

func (x *OccupancyGrid) SetCols(v uint32) {
	x.xxx_hidden_Cols = v
}

func (x *OccupancyGrid) SetCells(v []uint32) {
	x.xxx_hidden_Cells = v
}

type OccupancyGrid_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Rows uint32
	Cols uint32
	// Packed representation of cells: Encodes <value, length>. The three most
	// significant bits of the uint32 encodes the value of
	// `OccupancyClassification`. The remaining 29 bits encode the run length.
	// @note The maximum number of classification enum values supported is 2^3=8.
	// @see `occupancy_map_constants` for more details.
	Cells []uint32
}

func (b0 OccupancyGrid_builder) Build() *OccupancyGrid {
	m0 := &OccupancyGrid{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Rows = b.Rows
	x.xxx_hidden_Cols = b.Cols
	x.xxx_hidden_Cells = b.Cells
	return m0
}

// / The occupancy grid event.
// / Contains the occupancy grid, the range of the grid and the resolution.
// /
// / Grid Coverage:
// /   The grid covers the x and y range inclusively with the specified
// /   resolution.
// /
// / Grid Dims Calculation:
// /   Computed as:
// /     `x_dims = floor((x_max - x_min) / resolution) + 1`
// /
// / Projecting a point onto the Grid:
// /   To determine the grid cell corresponding to a point in space:
// /     `grid_x = floor((point.x - x_min) / resolution)`
// /     `grid_y = floor((point.y - y_min) / resolution)`
type OccupancyGridEvent struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Grid       *OccupancyGrid         `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	xxx_hidden_XMin       float32                `protobuf:"fixed32,2,opt,name=x_min,json=xMin,proto3" json:"x_min,omitempty"`
	xxx_hidden_XMax       float32                `protobuf:"fixed32,3,opt,name=x_max,json=xMax,proto3" json:"x_max,omitempty"`
	xxx_hidden_YMin       float32                `protobuf:"fixed32,4,opt,name=y_min,json=yMin,proto3" json:"y_min,omitempty"`
	xxx_hidden_YMax       float32                `protobuf:"fixed32,5,opt,name=y_max,json=yMax,proto3" json:"y_max,omitempty"`
	xxx_hidden_Resolution float32                `protobuf:"fixed32,6,opt,name=resolution,proto3" json:"resolution,omitempty"`
	xxx_hidden_Timestamp  *metadata_pb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *OccupancyGridEvent) Reset() {
	*x = OccupancyGridEvent{}
	mi := &file_horus_pb_preprocessing_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OccupancyGridEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OccupancyGridEvent) ProtoMessage() {}

func (x *OccupancyGridEvent) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_preprocessing_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OccupancyGridEvent) GetGrid() *OccupancyGrid {
	if x != nil {
		return x.xxx_hidden_Grid
	}
	return nil
}

func (x *OccupancyGridEvent) GetXMin() float32 {
	if x != nil {
		return x.xxx_hidden_XMin
	}
	return 0
}

func (x *OccupancyGridEvent) GetXMax() float32 {
	if x != nil {
		return x.xxx_hidden_XMax
	}
	return 0
}

func (x *OccupancyGridEvent) GetYMin() float32 {
	if x != nil {
		return x.xxx_hidden_YMin
	}
	return 0
}

func (x *OccupancyGridEvent) GetYMax() float32 {
	if x != nil {
		return x.xxx_hidden_YMax
	}
	return 0
}

func (x *OccupancyGridEvent) GetResolution() float32 {
	if x != nil {
		return x.xxx_hidden_Resolution
	}
	return 0
}

func (x *OccupancyGridEvent) GetTimestamp() *metadata_pb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *OccupancyGridEvent) SetGrid(v *OccupancyGrid) {
	x.xxx_hidden_Grid = v
}

func (x *OccupancyGridEvent) SetXMin(v float32) {
	x.xxx_hidden_XMin = v
}

func (x *OccupancyGridEvent) SetXMax(v float32) {
	x.xxx_hidden_XMax = v
}

func (x *OccupancyGridEvent) SetYMin(v float32) {
	x.xxx_hidden_YMin = v
}

func (x *OccupancyGridEvent) SetYMax(v float32) {
	x.xxx_hidden_YMax = v
}

func (x *OccupancyGridEvent) SetResolution(v float32) {
	x.xxx_hidden_Resolution = v
}

func (x *OccupancyGridEvent) SetTimestamp(v *metadata_pb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *OccupancyGridEvent) HasGrid() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Grid != nil
}

func (x *OccupancyGridEvent) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *OccupancyGridEvent) ClearGrid() {
	x.xxx_hidden_Grid = nil
}

func (x *OccupancyGridEvent) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

type OccupancyGridEvent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Grid       *OccupancyGrid
	XMin       float32
	XMax       float32
	YMin       float32
	YMax       float32
	Resolution float32
	Timestamp  *metadata_pb.Timestamp
}

func (b0 OccupancyGridEvent_builder) Build() *OccupancyGridEvent {
	m0 := &OccupancyGridEvent{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Grid = b.Grid
	x.xxx_hidden_XMin = b.XMin
	x.xxx_hidden_XMax = b.XMax
	x.xxx_hidden_YMin = b.YMin
	x.xxx_hidden_YMax = b.YMax
	x.xxx_hidden_Resolution = b.Resolution
	x.xxx_hidden_Timestamp = b.Timestamp
	return m0
}

type SensorInfo struct {
	state                        protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_LidarId           string                     `protobuf:"bytes,1,opt,name=lidar_id,json=lidarId,proto3" json:"lidar_id,omitempty"`
	xxx_hidden_Status            uint32                     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	xxx_hidden_MeasuredFrequency float64                    `protobuf:"fixed64,3,opt,name=measured_frequency,json=measuredFrequency,proto3" json:"measured_frequency,omitempty"`
	xxx_hidden_PoseCorrection    *SensorInfo_PoseCorrection `protobuf:"bytes,4,opt,name=pose_correction,json=poseCorrection,proto3,oneof" json:"pose_correction,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *SensorInfo) Reset() {
	*x = SensorInfo{}
	mi := &file_horus_pb_preprocessing_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorInfo) ProtoMessage() {}

func (x *SensorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_preprocessing_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SensorInfo) GetLidarId() string {
	if x != nil {
		return x.xxx_hidden_LidarId
	}
	return ""
}

func (x *SensorInfo) GetStatus() uint32 {
	if x != nil {
		return x.xxx_hidden_Status
	}
	return 0
}

func (x *SensorInfo) GetMeasuredFrequency() float64 {
	if x != nil {
		return x.xxx_hidden_MeasuredFrequency
	}
	return 0
}

func (x *SensorInfo) GetPoseCorrection() *SensorInfo_PoseCorrection {
	if x != nil {
		return x.xxx_hidden_PoseCorrection
	}
	return nil
}

func (x *SensorInfo) SetLidarId(v string) {
	x.xxx_hidden_LidarId = v
}

func (x *SensorInfo) SetStatus(v uint32) {
	x.xxx_hidden_Status = v
}

func (x *SensorInfo) SetMeasuredFrequency(v float64) {
	x.xxx_hidden_MeasuredFrequency = v
}

func (x *SensorInfo) SetPoseCorrection(v *SensorInfo_PoseCorrection) {
	x.xxx_hidden_PoseCorrection = v
}

func (x *SensorInfo) HasPoseCorrection() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PoseCorrection != nil
}

func (x *SensorInfo) ClearPoseCorrection() {
	x.xxx_hidden_PoseCorrection = nil
}

type SensorInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	LidarId string
	// Status as uint32, each status is combined using bitwise OR.
	Status            uint32
	MeasuredFrequency float64
	PoseCorrection    *SensorInfo_PoseCorrection
}

func (b0 SensorInfo_builder) Build() *SensorInfo {
	m0 := &SensorInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LidarId = b.LidarId
	x.xxx_hidden_Status = b.Status
	x.xxx_hidden_MeasuredFrequency = b.MeasuredFrequency
	x.xxx_hidden_PoseCorrection = b.PoseCorrection
	return m0
}

type SensorInfo_PoseCorrection struct {
	state                  protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_Translation *metadata_pb.Vector3F    `protobuf:"bytes,1,opt,name=translation,proto3" json:"translation,omitempty"`
	xxx_hidden_Rotation    *metadata_pb.Quaterniond `protobuf:"bytes,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SensorInfo_PoseCorrection) Reset() {
	*x = SensorInfo_PoseCorrection{}
	mi := &file_horus_pb_preprocessing_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorInfo_PoseCorrection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorInfo_PoseCorrection) ProtoMessage() {}

func (x *SensorInfo_PoseCorrection) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_preprocessing_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SensorInfo_PoseCorrection) GetTranslation() *metadata_pb.Vector3F {
	if x != nil {
		return x.xxx_hidden_Translation
	}
	return nil
}

func (x *SensorInfo_PoseCorrection) GetRotation() *metadata_pb.Quaterniond {
	if x != nil {
		return x.xxx_hidden_Rotation
	}
	return nil
}

func (x *SensorInfo_PoseCorrection) SetTranslation(v *metadata_pb.Vector3F) {
	x.xxx_hidden_Translation = v
}

func (x *SensorInfo_PoseCorrection) SetRotation(v *metadata_pb.Quaterniond) {
	x.xxx_hidden_Rotation = v
}

func (x *SensorInfo_PoseCorrection) HasTranslation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Translation != nil
}

func (x *SensorInfo_PoseCorrection) HasRotation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Rotation != nil
}

func (x *SensorInfo_PoseCorrection) ClearTranslation() {
	x.xxx_hidden_Translation = nil
}

func (x *SensorInfo_PoseCorrection) ClearRotation() {
	x.xxx_hidden_Rotation = nil
}

type SensorInfo_PoseCorrection_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Translation *metadata_pb.Vector3F
	Rotation    *metadata_pb.Quaterniond
}

func (b0 SensorInfo_PoseCorrection_builder) Build() *SensorInfo_PoseCorrection {
	m0 := &SensorInfo_PoseCorrection{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Translation = b.Translation
	x.xxx_hidden_Rotation = b.Rotation
	return m0
}

var File_horus_pb_preprocessing_messages_proto protoreflect.FileDescriptor

var file_horus_pb_preprocessing_messages_proto_rawDesc = []byte{
	0x0a, 0x25, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x1a, 0x1e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4d, 0x0a, 0x0d, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x47, 0x72,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x22, 0xe8, 0x01, 0x0a, 0x12, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x47, 0x72,
	0x69, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x69, 0x64, 0x52, 0x04,
	0x67, 0x72, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x78, 0x4d, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x78, 0x4d, 0x61, 0x78, 0x12, 0x13,
	0x0a, 0x05, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x79,
	0x4d, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd0, 0x02, 0x0a, 0x0a,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69,
	0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69,
	0x64, 0x61, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x64, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x51, 0x0a, 0x0f,
	0x70, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x65,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a,
	0x79, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x66, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x64,
	0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70,
	0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x81,
	0x01, 0x0a, 0x17, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x43,
	0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x43, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44,
	0x10, 0x04, 0x2a, 0x91, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x57, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x46,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49,
	0x4c, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x42, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x20, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_horus_pb_preprocessing_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_horus_pb_preprocessing_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_horus_pb_preprocessing_messages_proto_goTypes = []any{
	(OccupancyClassification)(0),      // 0: horus.pb.OccupancyClassification
	(SensorStatus)(0),                 // 1: horus.pb.SensorStatus
	(*OccupancyGrid)(nil),             // 2: horus.pb.OccupancyGrid
	(*OccupancyGridEvent)(nil),        // 3: horus.pb.OccupancyGridEvent
	(*SensorInfo)(nil),                // 4: horus.pb.SensorInfo
	(*SensorInfo_PoseCorrection)(nil), // 5: horus.pb.SensorInfo.PoseCorrection
	(*metadata_pb.Timestamp)(nil),     // 6: horus.pb.Timestamp
	(*metadata_pb.Vector3F)(nil),      // 7: horus.pb.Vector3f
	(*metadata_pb.Quaterniond)(nil),   // 8: horus.pb.Quaterniond
}
var file_horus_pb_preprocessing_messages_proto_depIdxs = []int32{
	2, // 0: horus.pb.OccupancyGridEvent.grid:type_name -> horus.pb.OccupancyGrid
	6, // 1: horus.pb.OccupancyGridEvent.timestamp:type_name -> horus.pb.Timestamp
	5, // 2: horus.pb.SensorInfo.pose_correction:type_name -> horus.pb.SensorInfo.PoseCorrection
	7, // 3: horus.pb.SensorInfo.PoseCorrection.translation:type_name -> horus.pb.Vector3f
	8, // 4: horus.pb.SensorInfo.PoseCorrection.rotation:type_name -> horus.pb.Quaterniond
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_horus_pb_preprocessing_messages_proto_init() }
func file_horus_pb_preprocessing_messages_proto_init() {
	if File_horus_pb_preprocessing_messages_proto != nil {
		return
	}
	file_horus_pb_preprocessing_messages_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_horus_pb_preprocessing_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_horus_pb_preprocessing_messages_proto_goTypes,
		DependencyIndexes: file_horus_pb_preprocessing_messages_proto_depIdxs,
		EnumInfos:         file_horus_pb_preprocessing_messages_proto_enumTypes,
		MessageInfos:      file_horus_pb_preprocessing_messages_proto_msgTypes,
	}.Build()
	File_horus_pb_preprocessing_messages_proto = out.File
	file_horus_pb_preprocessing_messages_proto_rawDesc = nil
	file_horus_pb_preprocessing_messages_proto_goTypes = nil
	file_horus_pb_preprocessing_messages_proto_depIdxs = nil
}
