// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.3
// source: horus/pb/logs/message.proto

package message_pb

import (
	logs_pb "github.com/seoulrobotics/horus-sdk/go/proto/logs/logs_pb"
	metadata_pb "github.com/seoulrobotics/horus-sdk/go/proto/logs/metadata_pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A log message notifying users about some status.
type LogMessage struct {
	state               protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_Metadata *metadata_pb.LogMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	xxx_hidden_Data     *LogData                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	mi := &file_horus_pb_logs_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_logs_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LogMessage) GetMetadata() *metadata_pb.LogMetadata {
	if x != nil {
		return x.xxx_hidden_Metadata
	}
	return nil
}

func (x *LogMessage) GetData() *LogData {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *LogMessage) SetMetadata(v *metadata_pb.LogMetadata) {
	x.xxx_hidden_Metadata = v
}

func (x *LogMessage) SetData(v *LogData) {
	x.xxx_hidden_Data = v
}

func (x *LogMessage) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Metadata != nil
}

func (x *LogMessage) HasData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data != nil
}

func (x *LogMessage) ClearMetadata() {
	x.xxx_hidden_Metadata = nil
}

func (x *LogMessage) ClearData() {
	x.xxx_hidden_Data = nil
}

type LogMessage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Metadata *metadata_pb.LogMetadata
	Data     *LogData
}

func (b0 LogMessage_builder) Build() *LogMessage {
	m0 := &LogMessage{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Metadata = b.Metadata
	x.xxx_hidden_Data = b.Data
	return m0
}

// Data attached to a `LogMessage`.
//
// This is automatically generated from `/opt/actions-runner/_work/horus/horus/common/logs/db.yml`.
type LogData struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data isLogData_Data         `protobuf_oneof:"data"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LogData) Reset() {
	*x = LogData{}
	mi := &file_horus_pb_logs_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogData) ProtoMessage() {}

func (x *LogData) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_logs_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LogData) GetGeneric() *logs_pb.Generic {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_Generic); ok {
			return x.Generic
		}
	}
	return nil
}

func (x *LogData) GetOom() *logs_pb.Oom {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_Oom); ok {
			return x.Oom
		}
	}
	return nil
}

func (x *LogData) GetRpcConnectionError() *logs_pb.RpcConnectionError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RpcConnectionError); ok {
			return x.RpcConnectionError
		}
	}
	return nil
}

func (x *LogData) GetInvalidProjectName() *logs_pb.InvalidProjectName {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InvalidProjectName); ok {
			return x.InvalidProjectName
		}
	}
	return nil
}

func (x *LogData) GetProjectNotFound() *logs_pb.ProjectNotFound {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ProjectNotFound); ok {
			return x.ProjectNotFound
		}
	}
	return nil
}

func (x *LogData) GetProjectAlreadyExists() *logs_pb.ProjectAlreadyExists {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ProjectAlreadyExists); ok {
			return x.ProjectAlreadyExists
		}
	}
	return nil
}

func (x *LogData) GetInvalidConfiguration() *logs_pb.InvalidConfiguration {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InvalidConfiguration); ok {
			return x.InvalidConfiguration
		}
	}
	return nil
}

func (x *LogData) GetEntityNotFound() *logs_pb.EntityNotFound {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_EntityNotFound); ok {
			return x.EntityNotFound
		}
	}
	return nil
}

func (x *LogData) GetActiveProjectCannotBeDeleted() *logs_pb.ActiveProjectCannotBeDeleted {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ActiveProjectCannotBeDeleted); ok {
			return x.ActiveProjectCannotBeDeleted
		}
	}
	return nil
}

func (x *LogData) GetRpcDisconnectionError() *logs_pb.RpcDisconnectionError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RpcDisconnectionError); ok {
			return x.RpcDisconnectionError
		}
	}
	return nil
}

func (x *LogData) GetDroppedLogs() *logs_pb.DroppedLogs {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_DroppedLogs); ok {
			return x.DroppedLogs
		}
	}
	return nil
}

func (x *LogData) GetOpenedProject() *logs_pb.OpenedProject {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_OpenedProject); ok {
			return x.OpenedProject
		}
	}
	return nil
}

func (x *LogData) GetCreatedProject() *logs_pb.CreatedProject {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CreatedProject); ok {
			return x.CreatedProject
		}
	}
	return nil
}

func (x *LogData) GetConfigUnavailable() *logs_pb.ConfigUnavailable {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ConfigUnavailable); ok {
			return x.ConfigUnavailable
		}
	}
	return nil
}

func (x *LogData) GetInvalidRequest() *logs_pb.InvalidRequest {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InvalidRequest); ok {
			return x.InvalidRequest
		}
	}
	return nil
}

func (x *LogData) GetSanityCheckError() *logs_pb.SanityCheckError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_SanityCheckError); ok {
			return x.SanityCheckError
		}
	}
	return nil
}

func (x *LogData) GetBagFailedToOpen() *logs_pb.BagFailedToOpen {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagFailedToOpen); ok {
			return x.BagFailedToOpen
		}
	}
	return nil
}

func (x *LogData) GetBagFailedToClose() *logs_pb.BagFailedToClose {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagFailedToClose); ok {
			return x.BagFailedToClose
		}
	}
	return nil
}

func (x *LogData) GetBagConversionFailed() *logs_pb.BagConversionFailed {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagConversionFailed); ok {
			return x.BagConversionFailed
		}
	}
	return nil
}

func (x *LogData) GetBagFailedToWrite() *logs_pb.BagFailedToWrite {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagFailedToWrite); ok {
			return x.BagFailedToWrite
		}
	}
	return nil
}

func (x *LogData) GetCalibrationError() *logs_pb.CalibrationError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CalibrationError); ok {
			return x.CalibrationError
		}
	}
	return nil
}

func (x *LogData) GetProjectManagerFailedToStartRecording() *logs_pb.ProjectManagerFailedToStartRecording {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ProjectManagerFailedToStartRecording); ok {
			return x.ProjectManagerFailedToStartRecording
		}
	}
	return nil
}

func (x *LogData) GetProjectManagerFailedToStopRecording() *logs_pb.ProjectManagerFailedToStopRecording {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ProjectManagerFailedToStopRecording); ok {
			return x.ProjectManagerFailedToStopRecording
		}
	}
	return nil
}

func (x *LogData) GetServiceConnectionTimedOut() *logs_pb.ServiceConnectionTimedOut {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ServiceConnectionTimedOut); ok {
			return x.ServiceConnectionTimedOut
		}
	}
	return nil
}

func (x *LogData) GetBagRecorderAlreadyRunning() *logs_pb.BagRecorderAlreadyRunning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagRecorderAlreadyRunning); ok {
			return x.BagRecorderAlreadyRunning
		}
	}
	return nil
}

func (x *LogData) GetLicenseServerConnectionError() *logs_pb.LicenseServerConnectionError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseServerConnectionError); ok {
			return x.LicenseServerConnectionError
		}
	}
	return nil
}

func (x *LogData) GetLicenseError() *logs_pb.LicenseError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseError); ok {
			return x.LicenseError
		}
	}
	return nil
}

func (x *LogData) GetLicenseNotFoundError() *logs_pb.LicenseNotFoundError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseNotFoundError); ok {
			return x.LicenseNotFoundError
		}
	}
	return nil
}

func (x *LogData) GetLicenseExpiredError() *logs_pb.LicenseExpiredError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseExpiredError); ok {
			return x.LicenseExpiredError
		}
	}
	return nil
}

func (x *LogData) GetLicenseExceededError() *logs_pb.LicenseExceededError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseExceededError); ok {
			return x.LicenseExceededError
		}
	}
	return nil
}

func (x *LogData) GetLicenseHostMachineError() *logs_pb.LicenseHostMachineError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseHostMachineError); ok {
			return x.LicenseHostMachineError
		}
	}
	return nil
}

func (x *LogData) GetLicensePrivilegeError() *logs_pb.LicensePrivilegeError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicensePrivilegeError); ok {
			return x.LicensePrivilegeError
		}
	}
	return nil
}

func (x *LogData) GetLicenseActiveInfo() *logs_pb.LicenseActiveInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseActiveInfo); ok {
			return x.LicenseActiveInfo
		}
	}
	return nil
}

func (x *LogData) GetMultipleLicensesWarning() *logs_pb.MultipleLicensesWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_MultipleLicensesWarning); ok {
			return x.MultipleLicensesWarning
		}
	}
	return nil
}

func (x *LogData) GetLicenseCurrentLicenseStatusInfo() *logs_pb.LicenseCurrentLicenseStatusInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseCurrentLicenseStatusInfo); ok {
			return x.LicenseCurrentLicenseStatusInfo
		}
	}
	return nil
}

func (x *LogData) GetBagRecordingStoppedInfo() *logs_pb.BagRecordingStoppedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagRecordingStoppedInfo); ok {
			return x.BagRecordingStoppedInfo
		}
	}
	return nil
}

func (x *LogData) GetBagRecordingFailedToStart() *logs_pb.BagRecordingFailedToStart {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagRecordingFailedToStart); ok {
			return x.BagRecordingFailedToStart
		}
	}
	return nil
}

func (x *LogData) GetBagRecordingStartedInfo() *logs_pb.BagRecordingStartedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagRecordingStartedInfo); ok {
			return x.BagRecordingStartedInfo
		}
	}
	return nil
}

func (x *LogData) GetReplayRestartedInfo() *logs_pb.ReplayRestartedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ReplayRestartedInfo); ok {
			return x.ReplayRestartedInfo
		}
	}
	return nil
}

func (x *LogData) GetInputSourceChangeRequestedInfo() *logs_pb.InputSourceChangeRequestedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InputSourceChangeRequestedInfo); ok {
			return x.InputSourceChangeRequestedInfo
		}
	}
	return nil
}

func (x *LogData) GetInputSourceSwitchedInfo() *logs_pb.InputSourceSwitchedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InputSourceSwitchedInfo); ok {
			return x.InputSourceSwitchedInfo
		}
	}
	return nil
}

func (x *LogData) GetRpcTimeoutWarning() *logs_pb.RpcTimeoutWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RpcTimeoutWarning); ok {
			return x.RpcTimeoutWarning
		}
	}
	return nil
}

func (x *LogData) GetCannotWriteLogFile() *logs_pb.CannotWriteLogFile {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CannotWriteLogFile); ok {
			return x.CannotWriteLogFile
		}
	}
	return nil
}

func (x *LogData) GetPointCloudParsingFailureWarning() *logs_pb.PointCloudParsingFailureWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_PointCloudParsingFailureWarning); ok {
			return x.PointCloudParsingFailureWarning
		}
	}
	return nil
}

func (x *LogData) GetLidarIsDead() *logs_pb.LidarIsDead {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarIsDead); ok {
			return x.LidarIsDead
		}
	}
	return nil
}

func (x *LogData) GetLidarIsNotDeadAnymore() *logs_pb.LidarIsNotDeadAnymore {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarIsNotDeadAnymore); ok {
			return x.LidarIsNotDeadAnymore
		}
	}
	return nil
}

func (x *LogData) GetLidarIsObstructed() *logs_pb.LidarIsObstructed {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarIsObstructed); ok {
			return x.LidarIsObstructed
		}
	}
	return nil
}

func (x *LogData) GetLidarIsNotObstructedAnymore() *logs_pb.LidarIsNotObstructedAnymore {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarIsNotObstructedAnymore); ok {
			return x.LidarIsNotObstructedAnymore
		}
	}
	return nil
}

func (x *LogData) GetLidarIsTilted() *logs_pb.LidarIsTilted {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarIsTilted); ok {
			return x.LidarIsTilted
		}
	}
	return nil
}

func (x *LogData) GetLidarIsNotTiltedAnymore() *logs_pb.LidarIsNotTiltedAnymore {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarIsNotTiltedAnymore); ok {
			return x.LidarIsNotTiltedAnymore
		}
	}
	return nil
}

func (x *LogData) GetLidarHasBeenAutomaticallyRecalibrated() *logs_pb.LidarHasBeenAutomaticallyRecalibrated {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarHasBeenAutomaticallyRecalibrated); ok {
			return x.LidarHasBeenAutomaticallyRecalibrated
		}
	}
	return nil
}

func (x *LogData) GetReceivedFirstDataForLidar() *logs_pb.ReceivedFirstDataForLidar {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ReceivedFirstDataForLidar); ok {
			return x.ReceivedFirstDataForLidar
		}
	}
	return nil
}

func (x *LogData) GetTerminationFailureError() *logs_pb.TerminationFailureError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_TerminationFailureError); ok {
			return x.TerminationFailureError
		}
	}
	return nil
}

func (x *LogData) GetFrameProcessingError() *logs_pb.FrameProcessingError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_FrameProcessingError); ok {
			return x.FrameProcessingError
		}
	}
	return nil
}

func (x *LogData) GetThreadPoolUnavailableError() *logs_pb.ThreadPoolUnavailableError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ThreadPoolUnavailableError); ok {
			return x.ThreadPoolUnavailableError
		}
	}
	return nil
}

func (x *LogData) GetInvalidArgument() *logs_pb.InvalidArgument {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InvalidArgument); ok {
			return x.InvalidArgument
		}
	}
	return nil
}

func (x *LogData) GetComponentInitializationFailureFatal() *logs_pb.ComponentInitializationFailureFatal {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ComponentInitializationFailureFatal); ok {
			return x.ComponentInitializationFailureFatal
		}
	}
	return nil
}

func (x *LogData) GetUnhandledEnumCaseError() *logs_pb.UnhandledEnumCaseError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_UnhandledEnumCaseError); ok {
			return x.UnhandledEnumCaseError
		}
	}
	return nil
}

func (x *LogData) GetBagEmptyError() *logs_pb.BagEmptyError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagEmptyError); ok {
			return x.BagEmptyError
		}
	}
	return nil
}

func (x *LogData) GetDiscardingDataError() *logs_pb.DiscardingDataError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_DiscardingDataError); ok {
			return x.DiscardingDataError
		}
	}
	return nil
}

func (x *LogData) GetDiscardingDataWarning() *logs_pb.DiscardingDataWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_DiscardingDataWarning); ok {
			return x.DiscardingDataWarning
		}
	}
	return nil
}

func (x *LogData) GetNothingToProcess() *logs_pb.NothingToProcess {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_NothingToProcess); ok {
			return x.NothingToProcess
		}
	}
	return nil
}

func (x *LogData) GetInvalidComponentConfiguration() *logs_pb.InvalidComponentConfiguration {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InvalidComponentConfiguration); ok {
			return x.InvalidComponentConfiguration
		}
	}
	return nil
}

func (x *LogData) GetChannelReceiverNotFoundWarning() *logs_pb.ChannelReceiverNotFoundWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ChannelReceiverNotFoundWarning); ok {
			return x.ChannelReceiverNotFoundWarning
		}
	}
	return nil
}

func (x *LogData) GetModelLoadFailure() *logs_pb.ModelLoadFailure {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ModelLoadFailure); ok {
			return x.ModelLoadFailure
		}
	}
	return nil
}

func (x *LogData) GetModelExecutionFailureError() *logs_pb.ModelExecutionFailureError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ModelExecutionFailureError); ok {
			return x.ModelExecutionFailureError
		}
	}
	return nil
}

func (x *LogData) GetServiceReadyInfo() *logs_pb.ServiceReadyInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ServiceReadyInfo); ok {
			return x.ServiceReadyInfo
		}
	}
	return nil
}

func (x *LogData) GetModelPreparingInfo() *logs_pb.ModelPreparingInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ModelPreparingInfo); ok {
			return x.ModelPreparingInfo
		}
	}
	return nil
}

func (x *LogData) GetModelInitializedInfo() *logs_pb.ModelInitializedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ModelInitializedInfo); ok {
			return x.ModelInitializedInfo
		}
	}
	return nil
}

func (x *LogData) GetModelInitializationFailureWarning() *logs_pb.ModelInitializationFailureWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ModelInitializationFailureWarning); ok {
			return x.ModelInitializationFailureWarning
		}
	}
	return nil
}

func (x *LogData) GetRosSpinnerStoppedWarning() *logs_pb.RosSpinnerStoppedWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RosSpinnerStoppedWarning); ok {
			return x.RosSpinnerStoppedWarning
		}
	}
	return nil
}

func (x *LogData) GetActorSystemUnavailableError() *logs_pb.ActorSystemUnavailableError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ActorSystemUnavailableError); ok {
			return x.ActorSystemUnavailableError
		}
	}
	return nil
}

func (x *LogData) GetConfigNodeNotFoundError() *logs_pb.ConfigNodeNotFoundError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ConfigNodeNotFoundError); ok {
			return x.ConfigNodeNotFoundError
		}
	}
	return nil
}

func (x *LogData) GetBagTimestampOutOfOrderError() *logs_pb.BagTimestampOutOfOrderError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagTimestampOutOfOrderError); ok {
			return x.BagTimestampOutOfOrderError
		}
	}
	return nil
}

func (x *LogData) GetBagReplayUnexpectedTimestampError() *logs_pb.BagReplayUnexpectedTimestampError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagReplayUnexpectedTimestampError); ok {
			return x.BagReplayUnexpectedTimestampError
		}
	}
	return nil
}

func (x *LogData) GetWebsocketClosedInfo() *logs_pb.WebsocketClosedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_WebsocketClosedInfo); ok {
			return x.WebsocketClosedInfo
		}
	}
	return nil
}

func (x *LogData) GetWebsocketOpenedInfo() *logs_pb.WebsocketOpenedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_WebsocketOpenedInfo); ok {
			return x.WebsocketOpenedInfo
		}
	}
	return nil
}

func (x *LogData) GetSubscriberDisconnectedInfo() *logs_pb.SubscriberDisconnectedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_SubscriberDisconnectedInfo); ok {
			return x.SubscriberDisconnectedInfo
		}
	}
	return nil
}

func (x *LogData) GetThreadPoolSlowingDownWarning() *logs_pb.ThreadPoolSlowingDownWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ThreadPoolSlowingDownWarning); ok {
			return x.ThreadPoolSlowingDownWarning
		}
	}
	return nil
}

func (x *LogData) GetThreadPoolNotRespondingWarning() *logs_pb.ThreadPoolNotRespondingWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ThreadPoolNotRespondingWarning); ok {
			return x.ThreadPoolNotRespondingWarning
		}
	}
	return nil
}

func (x *LogData) GetThreadPoolBrokenPromiseWarning() *logs_pb.ThreadPoolBrokenPromiseWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ThreadPoolBrokenPromiseWarning); ok {
			return x.ThreadPoolBrokenPromiseWarning
		}
	}
	return nil
}

func (x *LogData) GetBoxFittingPointsBelowBaseWarning() *logs_pb.BoxFittingPointsBelowBaseWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BoxFittingPointsBelowBaseWarning); ok {
			return x.BoxFittingPointsBelowBaseWarning
		}
	}
	return nil
}

func (x *LogData) GetFailedToRemoveStalePointsWarning() *logs_pb.FailedToRemoveStalePointsWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_FailedToRemoveStalePointsWarning); ok {
			return x.FailedToRemoveStalePointsWarning
		}
	}
	return nil
}

func (x *LogData) GetIrregularBroadcastingPeriodWarning() *logs_pb.IrregularBroadcastingPeriodWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_IrregularBroadcastingPeriodWarning); ok {
			return x.IrregularBroadcastingPeriodWarning
		}
	}
	return nil
}

func (x *LogData) GetClustererPointsOutOfRangeWarning() *logs_pb.ClustererPointsOutOfRangeWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ClustererPointsOutOfRangeWarning); ok {
			return x.ClustererPointsOutOfRangeWarning
		}
	}
	return nil
}

func (x *LogData) GetInternalError() *logs_pb.InternalError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InternalError); ok {
			return x.InternalError
		}
	}
	return nil
}

func (x *LogData) GetInternalFatal() *logs_pb.InternalFatal {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InternalFatal); ok {
			return x.InternalFatal
		}
	}
	return nil
}

func (x *LogData) GetServiceStartingInfo() *logs_pb.ServiceStartingInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ServiceStartingInfo); ok {
			return x.ServiceStartingInfo
		}
	}
	return nil
}

func (x *LogData) GetConfigNodeNotFoundFatal() *logs_pb.ConfigNodeNotFoundFatal {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ConfigNodeNotFoundFatal); ok {
			return x.ConfigNodeNotFoundFatal
		}
	}
	return nil
}

func (x *LogData) GetServiceSetupError() *logs_pb.ServiceSetupError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ServiceSetupError); ok {
			return x.ServiceSetupError
		}
	}
	return nil
}

func (x *LogData) GetFilesystemError() *logs_pb.FilesystemError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_FilesystemError); ok {
			return x.FilesystemError
		}
	}
	return nil
}

func (x *LogData) GetInvalidPresetWarning() *logs_pb.InvalidPresetWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InvalidPresetWarning); ok {
			return x.InvalidPresetWarning
		}
	}
	return nil
}

func (x *LogData) GetWebsocketFailedClearPendingError() *logs_pb.WebsocketFailedClearPendingError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_WebsocketFailedClearPendingError); ok {
			return x.WebsocketFailedClearPendingError
		}
	}
	return nil
}

func (x *LogData) GetWebsocketFailedToStopError() *logs_pb.WebsocketFailedToStopError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_WebsocketFailedToStopError); ok {
			return x.WebsocketFailedToStopError
		}
	}
	return nil
}

func (x *LogData) GetWebsocketFailedToCreateError() *logs_pb.WebsocketFailedToCreateError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_WebsocketFailedToCreateError); ok {
			return x.WebsocketFailedToCreateError
		}
	}
	return nil
}

func (x *LogData) GetUnexpectedRpcError() *logs_pb.UnexpectedRpcError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_UnexpectedRpcError); ok {
			return x.UnexpectedRpcError
		}
	}
	return nil
}

func (x *LogData) GetLicensePollFailed() *logs_pb.LicensePollFailed {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicensePollFailed); ok {
			return x.LicensePollFailed
		}
	}
	return nil
}

func (x *LogData) GetLicenseExpiredWarning() *logs_pb.LicenseExpiredWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseExpiredWarning); ok {
			return x.LicenseExpiredWarning
		}
	}
	return nil
}

func (x *LogData) GetLicenseUsageExceededWarning() *logs_pb.LicenseUsageExceededWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseUsageExceededWarning); ok {
			return x.LicenseUsageExceededWarning
		}
	}
	return nil
}

func (x *LogData) GetStaticThreadPoolSlowTaskWarning() *logs_pb.StaticThreadPoolSlowTaskWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_StaticThreadPoolSlowTaskWarning); ok {
			return x.StaticThreadPoolSlowTaskWarning
		}
	}
	return nil
}

func (x *LogData) GetRpcUnsupportedServiceWarning() *logs_pb.RpcUnsupportedServiceWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RpcUnsupportedServiceWarning); ok {
			return x.RpcUnsupportedServiceWarning
		}
	}
	return nil
}

func (x *LogData) GetWebsocketHandlerProblem() *logs_pb.WebsocketHandlerProblem {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_WebsocketHandlerProblem); ok {
			return x.WebsocketHandlerProblem
		}
	}
	return nil
}

func (x *LogData) GetWebsocketDeserializeError() *logs_pb.WebsocketDeserializeError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_WebsocketDeserializeError); ok {
			return x.WebsocketDeserializeError
		}
	}
	return nil
}

func (x *LogData) GetWebsocketExpiredRpcEndpointError() *logs_pb.WebsocketExpiredRpcEndpointError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_WebsocketExpiredRpcEndpointError); ok {
			return x.WebsocketExpiredRpcEndpointError
		}
	}
	return nil
}

func (x *LogData) GetWebsocketQueueOverloadedWarning() *logs_pb.WebsocketQueueOverloadedWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_WebsocketQueueOverloadedWarning); ok {
			return x.WebsocketQueueOverloadedWarning
		}
	}
	return nil
}

func (x *LogData) GetRpcFailedToNotifyWarning() *logs_pb.RpcFailedToNotifyWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RpcFailedToNotifyWarning); ok {
			return x.RpcFailedToNotifyWarning
		}
	}
	return nil
}

func (x *LogData) GetConfigSubscriptionFailedWarning() *logs_pb.ConfigSubscriptionFailedWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ConfigSubscriptionFailedWarning); ok {
			return x.ConfigSubscriptionFailedWarning
		}
	}
	return nil
}

func (x *LogData) GetThreadPoolClampedWorkersWarning() *logs_pb.ThreadPoolClampedWorkersWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ThreadPoolClampedWorkersWarning); ok {
			return x.ThreadPoolClampedWorkersWarning
		}
	}
	return nil
}

func (x *LogData) GetStoppingHorusBagRecorderAlreadyStopped() *logs_pb.StoppingHorusBagRecorderAlreadyStopped {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_StoppingHorusBagRecorderAlreadyStopped); ok {
			return x.StoppingHorusBagRecorderAlreadyStopped
		}
	}
	return nil
}

func (x *LogData) GetRecorderConfigUpdateWhileRunning() *logs_pb.RecorderConfigUpdateWhileRunning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RecorderConfigUpdateWhileRunning); ok {
			return x.RecorderConfigUpdateWhileRunning
		}
	}
	return nil
}

func (x *LogData) GetClampingDataWarning() *logs_pb.ClampingDataWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ClampingDataWarning); ok {
			return x.ClampingDataWarning
		}
	}
	return nil
}

func (x *LogData) GetLidarIncompatibleValues() *logs_pb.LidarIncompatibleValues {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarIncompatibleValues); ok {
			return x.LidarIncompatibleValues
		}
	}
	return nil
}

func (x *LogData) GetCannotDetermineContainerIdError() *logs_pb.CannotDetermineContainerIdError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CannotDetermineContainerIdError); ok {
			return x.CannotDetermineContainerIdError
		}
	}
	return nil
}

func (x *LogData) GetStartedLidarDriver() *logs_pb.StartedLidarDriver {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_StartedLidarDriver); ok {
			return x.StartedLidarDriver
		}
	}
	return nil
}

func (x *LogData) GetCannotStartLidarDriver() *logs_pb.CannotStartLidarDriver {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CannotStartLidarDriver); ok {
			return x.CannotStartLidarDriver
		}
	}
	return nil
}

func (x *LogData) GetStoppedLidarDriver() *logs_pb.StoppedLidarDriver {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_StoppedLidarDriver); ok {
			return x.StoppedLidarDriver
		}
	}
	return nil
}

func (x *LogData) GetCannotStopLidarDriver() *logs_pb.CannotStopLidarDriver {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CannotStopLidarDriver); ok {
			return x.CannotStopLidarDriver
		}
	}
	return nil
}

func (x *LogData) GetRestartedLidarDriver() *logs_pb.RestartedLidarDriver {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RestartedLidarDriver); ok {
			return x.RestartedLidarDriver
		}
	}
	return nil
}

func (x *LogData) GetCannotRestartLidarDriver() *logs_pb.CannotRestartLidarDriver {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CannotRestartLidarDriver); ok {
			return x.CannotRestartLidarDriver
		}
	}
	return nil
}

func (x *LogData) GetRemovedUnusedLidarDriver() *logs_pb.RemovedUnusedLidarDriver {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RemovedUnusedLidarDriver); ok {
			return x.RemovedUnusedLidarDriver
		}
	}
	return nil
}

func (x *LogData) GetCannotRemoveUnusedLidarDriver() *logs_pb.CannotRemoveUnusedLidarDriver {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CannotRemoveUnusedLidarDriver); ok {
			return x.CannotRemoveUnusedLidarDriver
		}
	}
	return nil
}

func (x *LogData) GetLidarDriverGcFailure() *logs_pb.LidarDriverGcFailure {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarDriverGcFailure); ok {
			return x.LidarDriverGcFailure
		}
	}
	return nil
}

func (x *LogData) GetIdSpaceExhausted() *logs_pb.IdSpaceExhausted {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_IdSpaceExhausted); ok {
			return x.IdSpaceExhausted
		}
	}
	return nil
}

func (x *LogData) GetPreprocessingToPointAggregatorPointsSkipped() *logs_pb.PreprocessingToPointAggregatorPointsSkipped {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_PreprocessingToPointAggregatorPointsSkipped); ok {
			return x.PreprocessingToPointAggregatorPointsSkipped
		}
	}
	return nil
}

func (x *LogData) GetMinMsgIntervalLessThanThreshold() *logs_pb.MinMsgIntervalLessThanThreshold {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_MinMsgIntervalLessThanThreshold); ok {
			return x.MinMsgIntervalLessThanThreshold
		}
	}
	return nil
}

func (x *LogData) GetFailedToCleanupRosWarning() *logs_pb.FailedToCleanupRosWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_FailedToCleanupRosWarning); ok {
			return x.FailedToCleanupRosWarning
		}
	}
	return nil
}

func (x *LogData) GetRpcDisconnectedWarning() *logs_pb.RpcDisconnectedWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RpcDisconnectedWarning); ok {
			return x.RpcDisconnectedWarning
		}
	}
	return nil
}

func (x *LogData) GetRpcUnhandledError() *logs_pb.RpcUnhandledError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RpcUnhandledError); ok {
			return x.RpcUnhandledError
		}
	}
	return nil
}

func (x *LogData) GetTimeDiffOutOfRangeWarning() *logs_pb.TimeDiffOutOfRangeWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_TimeDiffOutOfRangeWarning); ok {
			return x.TimeDiffOutOfRangeWarning
		}
	}
	return nil
}

func (x *LogData) GetTensorrtLog() *logs_pb.TensorrtLog {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_TensorrtLog); ok {
			return x.TensorrtLog
		}
	}
	return nil
}

func (x *LogData) GetBuildingTensorrtEngineInfo() *logs_pb.BuildingTensorrtEngineInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BuildingTensorrtEngineInfo); ok {
			return x.BuildingTensorrtEngineInfo
		}
	}
	return nil
}

func (x *LogData) GetLoadingTensorrtEngineInfo() *logs_pb.LoadingTensorrtEngineInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LoadingTensorrtEngineInfo); ok {
			return x.LoadingTensorrtEngineInfo
		}
	}
	return nil
}

func (x *LogData) GetCalibrationMapNotFound() *logs_pb.CalibrationMapNotFound {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CalibrationMapNotFound); ok {
			return x.CalibrationMapNotFound
		}
	}
	return nil
}

func (x *LogData) GetCalibrationMapNotValid() *logs_pb.CalibrationMapNotValid {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CalibrationMapNotValid); ok {
			return x.CalibrationMapNotValid
		}
	}
	return nil
}

func (x *LogData) GetCalibrationMapPathAlreadyExists() *logs_pb.CalibrationMapPathAlreadyExists {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CalibrationMapPathAlreadyExists); ok {
			return x.CalibrationMapPathAlreadyExists
		}
	}
	return nil
}

func (x *LogData) GetFailedToSaveCalibrationMap() *logs_pb.FailedToSaveCalibrationMap {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_FailedToSaveCalibrationMap); ok {
			return x.FailedToSaveCalibrationMap
		}
	}
	return nil
}

func (x *LogData) GetFailedToRemoveCalibrationMap() *logs_pb.FailedToRemoveCalibrationMap {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_FailedToRemoveCalibrationMap); ok {
			return x.FailedToRemoveCalibrationMap
		}
	}
	return nil
}

func (x *LogData) GetFailedToIterateInDirectory() *logs_pb.FailedToIterateInDirectory {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_FailedToIterateInDirectory); ok {
			return x.FailedToIterateInDirectory
		}
	}
	return nil
}

func (x *LogData) GetMapBasedCalibrationWithoutMapLoading() *logs_pb.MapBasedCalibrationWithoutMapLoading {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_MapBasedCalibrationWithoutMapLoading); ok {
			return x.MapBasedCalibrationWithoutMapLoading
		}
	}
	return nil
}

func (x *LogData) GetMapBasedCalibrationAlreadyRunning() *logs_pb.MapBasedCalibrationAlreadyRunning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_MapBasedCalibrationAlreadyRunning); ok {
			return x.MapBasedCalibrationAlreadyRunning
		}
	}
	return nil
}

func (x *LogData) GetCancelMapBasedCalibrationNotRunning() *logs_pb.CancelMapBasedCalibrationNotRunning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CancelMapBasedCalibrationNotRunning); ok {
			return x.CancelMapBasedCalibrationNotRunning
		}
	}
	return nil
}

func (x *LogData) GetBagStreamNotFound() *logs_pb.BagStreamNotFound {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagStreamNotFound); ok {
			return x.BagStreamNotFound
		}
	}
	return nil
}

func (x *LogData) GetEvaluationBagStartedInfo() *logs_pb.EvaluationBagStartedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_EvaluationBagStartedInfo); ok {
			return x.EvaluationBagStartedInfo
		}
	}
	return nil
}

func (x *LogData) GetEvaluationBagFinishedInfo() *logs_pb.EvaluationBagFinishedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_EvaluationBagFinishedInfo); ok {
			return x.EvaluationBagFinishedInfo
		}
	}
	return nil
}

func (x *LogData) GetBagNotFound() *logs_pb.BagNotFound {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagNotFound); ok {
			return x.BagNotFound
		}
	}
	return nil
}

func (x *LogData) GetBuildingPipelineInfo() *logs_pb.BuildingPipelineInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BuildingPipelineInfo); ok {
			return x.BuildingPipelineInfo
		}
	}
	return nil
}

func (x *LogData) GetBagIsNotEvaluation() *logs_pb.BagIsNotEvaluation {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagIsNotEvaluation); ok {
			return x.BagIsNotEvaluation
		}
	}
	return nil
}

func (x *LogData) GetHorusBagRunning() *logs_pb.HorusBagRunning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_HorusBagRunning); ok {
			return x.HorusBagRunning
		}
	}
	return nil
}

func (x *LogData) GetAutoGroundCalibrationWarning() *logs_pb.AutoGroundCalibrationWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_AutoGroundCalibrationWarning); ok {
			return x.AutoGroundCalibrationWarning
		}
	}
	return nil
}

func (x *LogData) GetAutoGroundCalibrationError() *logs_pb.AutoGroundCalibrationError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_AutoGroundCalibrationError); ok {
			return x.AutoGroundCalibrationError
		}
	}
	return nil
}

func (x *LogData) GetObjectDetectorNotLoadedWarning() *logs_pb.ObjectDetectorNotLoadedWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ObjectDetectorNotLoadedWarning); ok {
			return x.ObjectDetectorNotLoadedWarning
		}
	}
	return nil
}

func (x *LogData) GetCalibrationIsRunningError() *logs_pb.CalibrationIsRunningError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CalibrationIsRunningError); ok {
			return x.CalibrationIsRunningError
		}
	}
	return nil
}

func (x *LogData) GetModelInitInProgressInfo() *logs_pb.ModelInitInProgressInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ModelInitInProgressInfo); ok {
			return x.ModelInitInProgressInfo
		}
	}
	return nil
}

func (x *LogData) GetRpcTimeoutWithResolutionWarning() *logs_pb.RpcTimeoutWithResolutionWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RpcTimeoutWithResolutionWarning); ok {
			return x.RpcTimeoutWithResolutionWarning
		}
	}
	return nil
}

func (x *LogData) GetCalibrationWasCancelledInfo() *logs_pb.CalibrationWasCancelledInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CalibrationWasCancelledInfo); ok {
			return x.CalibrationWasCancelledInfo
		}
	}
	return nil
}

func (x *LogData) GetCalibrationMapRecordingFailedToStart() *logs_pb.CalibrationMapRecordingFailedToStart {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CalibrationMapRecordingFailedToStart); ok {
			return x.CalibrationMapRecordingFailedToStart
		}
	}
	return nil
}

func (x *LogData) GetDetectionPipelineRequestedResetInfo() *logs_pb.DetectionPipelineRequestedResetInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_DetectionPipelineRequestedResetInfo); ok {
			return x.DetectionPipelineRequestedResetInfo
		}
	}
	return nil
}

func (x *LogData) GetPreprocessingServicePipelineUnavailable() *logs_pb.PreprocessingServicePipelineUnavailable {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_PreprocessingServicePipelineUnavailable); ok {
			return x.PreprocessingServicePipelineUnavailable
		}
	}
	return nil
}

func (x *LogData) GetCircularRecordingDisabledWarning() *logs_pb.CircularRecordingDisabledWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CircularRecordingDisabledWarning); ok {
			return x.CircularRecordingDisabledWarning
		}
	}
	return nil
}

func (x *LogData) GetSnapshotAlreadyRunningWarning() *logs_pb.SnapshotAlreadyRunningWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_SnapshotAlreadyRunningWarning); ok {
			return x.SnapshotAlreadyRunningWarning
		}
	}
	return nil
}

func (x *LogData) GetActiveProjectChangedInfo() *logs_pb.ActiveProjectChangedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ActiveProjectChangedInfo); ok {
			return x.ActiveProjectChangedInfo
		}
	}
	return nil
}

func (x *LogData) GetProjectConfigUpdatedInfo() *logs_pb.ProjectConfigUpdatedInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ProjectConfigUpdatedInfo); ok {
			return x.ProjectConfigUpdatedInfo
		}
	}
	return nil
}

func (x *LogData) GetInvalidLidarTimestamp() *logs_pb.InvalidLidarTimestamp {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InvalidLidarTimestamp); ok {
			return x.InvalidLidarTimestamp
		}
	}
	return nil
}

func (x *LogData) GetCalibrationAccumulatingPointsInfo() *logs_pb.CalibrationAccumulatingPointsInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CalibrationAccumulatingPointsInfo); ok {
			return x.CalibrationAccumulatingPointsInfo
		}
	}
	return nil
}

func (x *LogData) GetSparseNoiseFilterUsageNonRotationalLidars() *logs_pb.SparseNoiseFilterUsageNonRotationalLidars {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_SparseNoiseFilterUsageNonRotationalLidars); ok {
			return x.SparseNoiseFilterUsageNonRotationalLidars
		}
	}
	return nil
}

func (x *LogData) GetFileWriteWarning() *logs_pb.FileWriteWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_FileWriteWarning); ok {
			return x.FileWriteWarning
		}
	}
	return nil
}

func (x *LogData) GetLicenseForbiddenFeature() *logs_pb.LicenseForbiddenFeature {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LicenseForbiddenFeature); ok {
			return x.LicenseForbiddenFeature
		}
	}
	return nil
}

func (x *LogData) GetFailedToUpdateConfiguration() *logs_pb.FailedToUpdateConfiguration {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_FailedToUpdateConfiguration); ok {
			return x.FailedToUpdateConfiguration
		}
	}
	return nil
}

func (x *LogData) GetObstructionDetectorBadReferenceWarning() *logs_pb.ObstructionDetectorBadReferenceWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ObstructionDetectorBadReferenceWarning); ok {
			return x.ObstructionDetectorBadReferenceWarning
		}
	}
	return nil
}

func (x *LogData) GetProjectFileInvalidPermissionsError() *logs_pb.ProjectFileInvalidPermissionsError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ProjectFileInvalidPermissionsError); ok {
			return x.ProjectFileInvalidPermissionsError
		}
	}
	return nil
}

func (x *LogData) GetPipelineSchedulerError() *logs_pb.PipelineSchedulerError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_PipelineSchedulerError); ok {
			return x.PipelineSchedulerError
		}
	}
	return nil
}

func (x *LogData) GetMultiLidarCalibrationWarning() *logs_pb.MultiLidarCalibrationWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_MultiLidarCalibrationWarning); ok {
			return x.MultiLidarCalibrationWarning
		}
	}
	return nil
}

func (x *LogData) GetMultiLidarCalibrationError() *logs_pb.MultiLidarCalibrationError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_MultiLidarCalibrationError); ok {
			return x.MultiLidarCalibrationError
		}
	}
	return nil
}

func (x *LogData) GetOldBagWarning() *logs_pb.OldBagWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_OldBagWarning); ok {
			return x.OldBagWarning
		}
	}
	return nil
}

func (x *LogData) GetUpgradingBagInfo() *logs_pb.UpgradingBagInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_UpgradingBagInfo); ok {
			return x.UpgradingBagInfo
		}
	}
	return nil
}

func (x *LogData) GetBagCalibrationSaveFailed() *logs_pb.BagCalibrationSaveFailed {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagCalibrationSaveFailed); ok {
			return x.BagCalibrationSaveFailed
		}
	}
	return nil
}

func (x *LogData) GetBagUpgradeFailed() *logs_pb.BagUpgradeFailed {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_BagUpgradeFailed); ok {
			return x.BagUpgradeFailed
		}
	}
	return nil
}

func (x *LogData) GetUnknownLidarError() *logs_pb.UnknownLidarError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_UnknownLidarError); ok {
			return x.UnknownLidarError
		}
	}
	return nil
}

func (x *LogData) GetInvalidPointCloudWarning() *logs_pb.InvalidPointCloudWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_InvalidPointCloudWarning); ok {
			return x.InvalidPointCloudWarning
		}
	}
	return nil
}

func (x *LogData) GetLidarIsDroppingPackets() *logs_pb.LidarIsDroppingPackets {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LidarIsDroppingPackets); ok {
			return x.LidarIsDroppingPackets
		}
	}
	return nil
}

func (x *LogData) GetRemovedInvalidLidarsFromConfigWarning() *logs_pb.RemovedInvalidLidarsFromConfigWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_RemovedInvalidLidarsFromConfigWarning); ok {
			return x.RemovedInvalidLidarsFromConfigWarning
		}
	}
	return nil
}

func (x *LogData) GetCalibrationMapRecordingFailed() *logs_pb.CalibrationMapRecordingFailed {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CalibrationMapRecordingFailed); ok {
			return x.CalibrationMapRecordingFailed
		}
	}
	return nil
}

func (x *LogData) GetDetectionNodeNotFoundError() *logs_pb.DetectionNodeNotFoundError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_DetectionNodeNotFoundError); ok {
			return x.DetectionNodeNotFoundError
		}
	}
	return nil
}

func (x *LogData) GetCreatedVersionBackupInfo() *logs_pb.CreatedVersionBackupInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_CreatedVersionBackupInfo); ok {
			return x.CreatedVersionBackupInfo
		}
	}
	return nil
}

func (x *LogData) GetPlyFileLoadFailedError() *logs_pb.PlyFileLoadFailedError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_PlyFileLoadFailedError); ok {
			return x.PlyFileLoadFailedError
		}
	}
	return nil
}

func (x *LogData) GetHesaiDriverLifecycle() *logs_pb.HesaiDriverLifecycle {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_HesaiDriverLifecycle); ok {
			return x.HesaiDriverLifecycle
		}
	}
	return nil
}

func (x *LogData) GetHesaiDriverError() *logs_pb.HesaiDriverError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_HesaiDriverError); ok {
			return x.HesaiDriverError
		}
	}
	return nil
}

func (x *LogData) GetHesaiPacketProcessingFailed() *logs_pb.HesaiPacketProcessingFailed {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_HesaiPacketProcessingFailed); ok {
			return x.HesaiPacketProcessingFailed
		}
	}
	return nil
}

func (x *LogData) GetHesaiCorrectionFileError() *logs_pb.HesaiCorrectionFileError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_HesaiCorrectionFileError); ok {
			return x.HesaiCorrectionFileError
		}
	}
	return nil
}

func (x *LogData) GetHesaiPacketStatistics() *logs_pb.HesaiPacketStatistics {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_HesaiPacketStatistics); ok {
			return x.HesaiPacketStatistics
		}
	}
	return nil
}

func (x *LogData) GetPlyFileWriteFailedError() *logs_pb.PlyFileWriteFailedError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_PlyFileWriteFailedError); ok {
			return x.PlyFileWriteFailedError
		}
	}
	return nil
}

func (x *LogData) GetProjectSaveError() *logs_pb.ProjectSaveError {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ProjectSaveError); ok {
			return x.ProjectSaveError
		}
	}
	return nil
}

func (x *LogData) GetSaveStaticEnvironmentSuccess() *logs_pb.SaveStaticEnvironmentSuccess {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_SaveStaticEnvironmentSuccess); ok {
			return x.SaveStaticEnvironmentSuccess
		}
	}
	return nil
}

func (x *LogData) GetSaveStaticEnvironmentFailed() *logs_pb.SaveStaticEnvironmentFailed {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_SaveStaticEnvironmentFailed); ok {
			return x.SaveStaticEnvironmentFailed
		}
	}
	return nil
}

func (x *LogData) GetLoadStaticEnvironmentSuccess() *logs_pb.LoadStaticEnvironmentSuccess {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LoadStaticEnvironmentSuccess); ok {
			return x.LoadStaticEnvironmentSuccess
		}
	}
	return nil
}

func (x *LogData) GetLoadStaticEnvironmentFailed() *logs_pb.LoadStaticEnvironmentFailed {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_LoadStaticEnvironmentFailed); ok {
			return x.LoadStaticEnvironmentFailed
		}
	}
	return nil
}

func (x *LogData) GetAttemptToInjectInvalidLidarIdWarning() *logs_pb.AttemptToInjectInvalidLidarIdWarning {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_AttemptToInjectInvalidLidarIdWarning); ok {
			return x.AttemptToInjectInvalidLidarIdWarning
		}
	}
	return nil
}

func (x *LogData) GetResetBundledPacketDueToUnexpectedPacket() *logs_pb.ResetBundledPacketDueToUnexpectedPacket {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*logData_ResetBundledPacketDueToUnexpectedPacket); ok {
			return x.ResetBundledPacketDueToUnexpectedPacket
		}
	}
	return nil
}

func (x *LogData) SetGeneric(v *logs_pb.Generic) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_Generic{v}
}

func (x *LogData) SetOom(v *logs_pb.Oom) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_Oom{v}
}

func (x *LogData) SetRpcConnectionError(v *logs_pb.RpcConnectionError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RpcConnectionError{v}
}

func (x *LogData) SetInvalidProjectName(v *logs_pb.InvalidProjectName) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InvalidProjectName{v}
}

func (x *LogData) SetProjectNotFound(v *logs_pb.ProjectNotFound) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ProjectNotFound{v}
}

func (x *LogData) SetProjectAlreadyExists(v *logs_pb.ProjectAlreadyExists) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ProjectAlreadyExists{v}
}

func (x *LogData) SetInvalidConfiguration(v *logs_pb.InvalidConfiguration) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InvalidConfiguration{v}
}

func (x *LogData) SetEntityNotFound(v *logs_pb.EntityNotFound) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_EntityNotFound{v}
}

func (x *LogData) SetActiveProjectCannotBeDeleted(v *logs_pb.ActiveProjectCannotBeDeleted) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ActiveProjectCannotBeDeleted{v}
}

func (x *LogData) SetRpcDisconnectionError(v *logs_pb.RpcDisconnectionError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RpcDisconnectionError{v}
}

func (x *LogData) SetDroppedLogs(v *logs_pb.DroppedLogs) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_DroppedLogs{v}
}

func (x *LogData) SetOpenedProject(v *logs_pb.OpenedProject) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_OpenedProject{v}
}

func (x *LogData) SetCreatedProject(v *logs_pb.CreatedProject) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CreatedProject{v}
}

func (x *LogData) SetConfigUnavailable(v *logs_pb.ConfigUnavailable) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ConfigUnavailable{v}
}

func (x *LogData) SetInvalidRequest(v *logs_pb.InvalidRequest) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InvalidRequest{v}
}

func (x *LogData) SetSanityCheckError(v *logs_pb.SanityCheckError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_SanityCheckError{v}
}

func (x *LogData) SetBagFailedToOpen(v *logs_pb.BagFailedToOpen) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagFailedToOpen{v}
}

func (x *LogData) SetBagFailedToClose(v *logs_pb.BagFailedToClose) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagFailedToClose{v}
}

func (x *LogData) SetBagConversionFailed(v *logs_pb.BagConversionFailed) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagConversionFailed{v}
}

func (x *LogData) SetBagFailedToWrite(v *logs_pb.BagFailedToWrite) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagFailedToWrite{v}
}

func (x *LogData) SetCalibrationError(v *logs_pb.CalibrationError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CalibrationError{v}
}

func (x *LogData) SetProjectManagerFailedToStartRecording(v *logs_pb.ProjectManagerFailedToStartRecording) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ProjectManagerFailedToStartRecording{v}
}

func (x *LogData) SetProjectManagerFailedToStopRecording(v *logs_pb.ProjectManagerFailedToStopRecording) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ProjectManagerFailedToStopRecording{v}
}

func (x *LogData) SetServiceConnectionTimedOut(v *logs_pb.ServiceConnectionTimedOut) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ServiceConnectionTimedOut{v}
}

func (x *LogData) SetBagRecorderAlreadyRunning(v *logs_pb.BagRecorderAlreadyRunning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagRecorderAlreadyRunning{v}
}

func (x *LogData) SetLicenseServerConnectionError(v *logs_pb.LicenseServerConnectionError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseServerConnectionError{v}
}

func (x *LogData) SetLicenseError(v *logs_pb.LicenseError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseError{v}
}

func (x *LogData) SetLicenseNotFoundError(v *logs_pb.LicenseNotFoundError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseNotFoundError{v}
}

func (x *LogData) SetLicenseExpiredError(v *logs_pb.LicenseExpiredError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseExpiredError{v}
}

func (x *LogData) SetLicenseExceededError(v *logs_pb.LicenseExceededError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseExceededError{v}
}

func (x *LogData) SetLicenseHostMachineError(v *logs_pb.LicenseHostMachineError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseHostMachineError{v}
}

func (x *LogData) SetLicensePrivilegeError(v *logs_pb.LicensePrivilegeError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicensePrivilegeError{v}
}

func (x *LogData) SetLicenseActiveInfo(v *logs_pb.LicenseActiveInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseActiveInfo{v}
}

func (x *LogData) SetMultipleLicensesWarning(v *logs_pb.MultipleLicensesWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_MultipleLicensesWarning{v}
}

func (x *LogData) SetLicenseCurrentLicenseStatusInfo(v *logs_pb.LicenseCurrentLicenseStatusInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseCurrentLicenseStatusInfo{v}
}

func (x *LogData) SetBagRecordingStoppedInfo(v *logs_pb.BagRecordingStoppedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagRecordingStoppedInfo{v}
}

func (x *LogData) SetBagRecordingFailedToStart(v *logs_pb.BagRecordingFailedToStart) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagRecordingFailedToStart{v}
}

func (x *LogData) SetBagRecordingStartedInfo(v *logs_pb.BagRecordingStartedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagRecordingStartedInfo{v}
}

func (x *LogData) SetReplayRestartedInfo(v *logs_pb.ReplayRestartedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ReplayRestartedInfo{v}
}

func (x *LogData) SetInputSourceChangeRequestedInfo(v *logs_pb.InputSourceChangeRequestedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InputSourceChangeRequestedInfo{v}
}

func (x *LogData) SetInputSourceSwitchedInfo(v *logs_pb.InputSourceSwitchedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InputSourceSwitchedInfo{v}
}

func (x *LogData) SetRpcTimeoutWarning(v *logs_pb.RpcTimeoutWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RpcTimeoutWarning{v}
}

func (x *LogData) SetCannotWriteLogFile(v *logs_pb.CannotWriteLogFile) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CannotWriteLogFile{v}
}

func (x *LogData) SetPointCloudParsingFailureWarning(v *logs_pb.PointCloudParsingFailureWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_PointCloudParsingFailureWarning{v}
}

func (x *LogData) SetLidarIsDead(v *logs_pb.LidarIsDead) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarIsDead{v}
}

func (x *LogData) SetLidarIsNotDeadAnymore(v *logs_pb.LidarIsNotDeadAnymore) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarIsNotDeadAnymore{v}
}

func (x *LogData) SetLidarIsObstructed(v *logs_pb.LidarIsObstructed) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarIsObstructed{v}
}

func (x *LogData) SetLidarIsNotObstructedAnymore(v *logs_pb.LidarIsNotObstructedAnymore) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarIsNotObstructedAnymore{v}
}

func (x *LogData) SetLidarIsTilted(v *logs_pb.LidarIsTilted) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarIsTilted{v}
}

func (x *LogData) SetLidarIsNotTiltedAnymore(v *logs_pb.LidarIsNotTiltedAnymore) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarIsNotTiltedAnymore{v}
}

func (x *LogData) SetLidarHasBeenAutomaticallyRecalibrated(v *logs_pb.LidarHasBeenAutomaticallyRecalibrated) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarHasBeenAutomaticallyRecalibrated{v}
}

func (x *LogData) SetReceivedFirstDataForLidar(v *logs_pb.ReceivedFirstDataForLidar) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ReceivedFirstDataForLidar{v}
}

func (x *LogData) SetTerminationFailureError(v *logs_pb.TerminationFailureError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_TerminationFailureError{v}
}

func (x *LogData) SetFrameProcessingError(v *logs_pb.FrameProcessingError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_FrameProcessingError{v}
}

func (x *LogData) SetThreadPoolUnavailableError(v *logs_pb.ThreadPoolUnavailableError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ThreadPoolUnavailableError{v}
}

func (x *LogData) SetInvalidArgument(v *logs_pb.InvalidArgument) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InvalidArgument{v}
}

func (x *LogData) SetComponentInitializationFailureFatal(v *logs_pb.ComponentInitializationFailureFatal) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ComponentInitializationFailureFatal{v}
}

func (x *LogData) SetUnhandledEnumCaseError(v *logs_pb.UnhandledEnumCaseError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_UnhandledEnumCaseError{v}
}

func (x *LogData) SetBagEmptyError(v *logs_pb.BagEmptyError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagEmptyError{v}
}

func (x *LogData) SetDiscardingDataError(v *logs_pb.DiscardingDataError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_DiscardingDataError{v}
}

func (x *LogData) SetDiscardingDataWarning(v *logs_pb.DiscardingDataWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_DiscardingDataWarning{v}
}

func (x *LogData) SetNothingToProcess(v *logs_pb.NothingToProcess) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_NothingToProcess{v}
}

func (x *LogData) SetInvalidComponentConfiguration(v *logs_pb.InvalidComponentConfiguration) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InvalidComponentConfiguration{v}
}

func (x *LogData) SetChannelReceiverNotFoundWarning(v *logs_pb.ChannelReceiverNotFoundWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ChannelReceiverNotFoundWarning{v}
}

func (x *LogData) SetModelLoadFailure(v *logs_pb.ModelLoadFailure) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ModelLoadFailure{v}
}

func (x *LogData) SetModelExecutionFailureError(v *logs_pb.ModelExecutionFailureError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ModelExecutionFailureError{v}
}

func (x *LogData) SetServiceReadyInfo(v *logs_pb.ServiceReadyInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ServiceReadyInfo{v}
}

func (x *LogData) SetModelPreparingInfo(v *logs_pb.ModelPreparingInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ModelPreparingInfo{v}
}

func (x *LogData) SetModelInitializedInfo(v *logs_pb.ModelInitializedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ModelInitializedInfo{v}
}

func (x *LogData) SetModelInitializationFailureWarning(v *logs_pb.ModelInitializationFailureWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ModelInitializationFailureWarning{v}
}

func (x *LogData) SetRosSpinnerStoppedWarning(v *logs_pb.RosSpinnerStoppedWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RosSpinnerStoppedWarning{v}
}

func (x *LogData) SetActorSystemUnavailableError(v *logs_pb.ActorSystemUnavailableError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ActorSystemUnavailableError{v}
}

func (x *LogData) SetConfigNodeNotFoundError(v *logs_pb.ConfigNodeNotFoundError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ConfigNodeNotFoundError{v}
}

func (x *LogData) SetBagTimestampOutOfOrderError(v *logs_pb.BagTimestampOutOfOrderError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagTimestampOutOfOrderError{v}
}

func (x *LogData) SetBagReplayUnexpectedTimestampError(v *logs_pb.BagReplayUnexpectedTimestampError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagReplayUnexpectedTimestampError{v}
}

func (x *LogData) SetWebsocketClosedInfo(v *logs_pb.WebsocketClosedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_WebsocketClosedInfo{v}
}

func (x *LogData) SetWebsocketOpenedInfo(v *logs_pb.WebsocketOpenedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_WebsocketOpenedInfo{v}
}

func (x *LogData) SetSubscriberDisconnectedInfo(v *logs_pb.SubscriberDisconnectedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_SubscriberDisconnectedInfo{v}
}

func (x *LogData) SetThreadPoolSlowingDownWarning(v *logs_pb.ThreadPoolSlowingDownWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ThreadPoolSlowingDownWarning{v}
}

func (x *LogData) SetThreadPoolNotRespondingWarning(v *logs_pb.ThreadPoolNotRespondingWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ThreadPoolNotRespondingWarning{v}
}

func (x *LogData) SetThreadPoolBrokenPromiseWarning(v *logs_pb.ThreadPoolBrokenPromiseWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ThreadPoolBrokenPromiseWarning{v}
}

func (x *LogData) SetBoxFittingPointsBelowBaseWarning(v *logs_pb.BoxFittingPointsBelowBaseWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BoxFittingPointsBelowBaseWarning{v}
}

func (x *LogData) SetFailedToRemoveStalePointsWarning(v *logs_pb.FailedToRemoveStalePointsWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_FailedToRemoveStalePointsWarning{v}
}

func (x *LogData) SetIrregularBroadcastingPeriodWarning(v *logs_pb.IrregularBroadcastingPeriodWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_IrregularBroadcastingPeriodWarning{v}
}

func (x *LogData) SetClustererPointsOutOfRangeWarning(v *logs_pb.ClustererPointsOutOfRangeWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ClustererPointsOutOfRangeWarning{v}
}

func (x *LogData) SetInternalError(v *logs_pb.InternalError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InternalError{v}
}

func (x *LogData) SetInternalFatal(v *logs_pb.InternalFatal) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InternalFatal{v}
}

func (x *LogData) SetServiceStartingInfo(v *logs_pb.ServiceStartingInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ServiceStartingInfo{v}
}

func (x *LogData) SetConfigNodeNotFoundFatal(v *logs_pb.ConfigNodeNotFoundFatal) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ConfigNodeNotFoundFatal{v}
}

func (x *LogData) SetServiceSetupError(v *logs_pb.ServiceSetupError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ServiceSetupError{v}
}

func (x *LogData) SetFilesystemError(v *logs_pb.FilesystemError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_FilesystemError{v}
}

func (x *LogData) SetInvalidPresetWarning(v *logs_pb.InvalidPresetWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InvalidPresetWarning{v}
}

func (x *LogData) SetWebsocketFailedClearPendingError(v *logs_pb.WebsocketFailedClearPendingError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_WebsocketFailedClearPendingError{v}
}

func (x *LogData) SetWebsocketFailedToStopError(v *logs_pb.WebsocketFailedToStopError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_WebsocketFailedToStopError{v}
}

func (x *LogData) SetWebsocketFailedToCreateError(v *logs_pb.WebsocketFailedToCreateError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_WebsocketFailedToCreateError{v}
}

func (x *LogData) SetUnexpectedRpcError(v *logs_pb.UnexpectedRpcError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_UnexpectedRpcError{v}
}

func (x *LogData) SetLicensePollFailed(v *logs_pb.LicensePollFailed) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicensePollFailed{v}
}

func (x *LogData) SetLicenseExpiredWarning(v *logs_pb.LicenseExpiredWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseExpiredWarning{v}
}

func (x *LogData) SetLicenseUsageExceededWarning(v *logs_pb.LicenseUsageExceededWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseUsageExceededWarning{v}
}

func (x *LogData) SetStaticThreadPoolSlowTaskWarning(v *logs_pb.StaticThreadPoolSlowTaskWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_StaticThreadPoolSlowTaskWarning{v}
}

func (x *LogData) SetRpcUnsupportedServiceWarning(v *logs_pb.RpcUnsupportedServiceWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RpcUnsupportedServiceWarning{v}
}

func (x *LogData) SetWebsocketHandlerProblem(v *logs_pb.WebsocketHandlerProblem) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_WebsocketHandlerProblem{v}
}

func (x *LogData) SetWebsocketDeserializeError(v *logs_pb.WebsocketDeserializeError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_WebsocketDeserializeError{v}
}

func (x *LogData) SetWebsocketExpiredRpcEndpointError(v *logs_pb.WebsocketExpiredRpcEndpointError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_WebsocketExpiredRpcEndpointError{v}
}

func (x *LogData) SetWebsocketQueueOverloadedWarning(v *logs_pb.WebsocketQueueOverloadedWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_WebsocketQueueOverloadedWarning{v}
}

func (x *LogData) SetRpcFailedToNotifyWarning(v *logs_pb.RpcFailedToNotifyWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RpcFailedToNotifyWarning{v}
}

func (x *LogData) SetConfigSubscriptionFailedWarning(v *logs_pb.ConfigSubscriptionFailedWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ConfigSubscriptionFailedWarning{v}
}

func (x *LogData) SetThreadPoolClampedWorkersWarning(v *logs_pb.ThreadPoolClampedWorkersWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ThreadPoolClampedWorkersWarning{v}
}

func (x *LogData) SetStoppingHorusBagRecorderAlreadyStopped(v *logs_pb.StoppingHorusBagRecorderAlreadyStopped) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_StoppingHorusBagRecorderAlreadyStopped{v}
}

func (x *LogData) SetRecorderConfigUpdateWhileRunning(v *logs_pb.RecorderConfigUpdateWhileRunning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RecorderConfigUpdateWhileRunning{v}
}

func (x *LogData) SetClampingDataWarning(v *logs_pb.ClampingDataWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ClampingDataWarning{v}
}

func (x *LogData) SetLidarIncompatibleValues(v *logs_pb.LidarIncompatibleValues) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarIncompatibleValues{v}
}

func (x *LogData) SetCannotDetermineContainerIdError(v *logs_pb.CannotDetermineContainerIdError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CannotDetermineContainerIdError{v}
}

func (x *LogData) SetStartedLidarDriver(v *logs_pb.StartedLidarDriver) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_StartedLidarDriver{v}
}

func (x *LogData) SetCannotStartLidarDriver(v *logs_pb.CannotStartLidarDriver) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CannotStartLidarDriver{v}
}

func (x *LogData) SetStoppedLidarDriver(v *logs_pb.StoppedLidarDriver) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_StoppedLidarDriver{v}
}

func (x *LogData) SetCannotStopLidarDriver(v *logs_pb.CannotStopLidarDriver) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CannotStopLidarDriver{v}
}

func (x *LogData) SetRestartedLidarDriver(v *logs_pb.RestartedLidarDriver) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RestartedLidarDriver{v}
}

func (x *LogData) SetCannotRestartLidarDriver(v *logs_pb.CannotRestartLidarDriver) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CannotRestartLidarDriver{v}
}

func (x *LogData) SetRemovedUnusedLidarDriver(v *logs_pb.RemovedUnusedLidarDriver) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RemovedUnusedLidarDriver{v}
}

func (x *LogData) SetCannotRemoveUnusedLidarDriver(v *logs_pb.CannotRemoveUnusedLidarDriver) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CannotRemoveUnusedLidarDriver{v}
}

func (x *LogData) SetLidarDriverGcFailure(v *logs_pb.LidarDriverGcFailure) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarDriverGcFailure{v}
}

func (x *LogData) SetIdSpaceExhausted(v *logs_pb.IdSpaceExhausted) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_IdSpaceExhausted{v}
}

func (x *LogData) SetPreprocessingToPointAggregatorPointsSkipped(v *logs_pb.PreprocessingToPointAggregatorPointsSkipped) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_PreprocessingToPointAggregatorPointsSkipped{v}
}

func (x *LogData) SetMinMsgIntervalLessThanThreshold(v *logs_pb.MinMsgIntervalLessThanThreshold) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_MinMsgIntervalLessThanThreshold{v}
}

func (x *LogData) SetFailedToCleanupRosWarning(v *logs_pb.FailedToCleanupRosWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_FailedToCleanupRosWarning{v}
}

func (x *LogData) SetRpcDisconnectedWarning(v *logs_pb.RpcDisconnectedWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RpcDisconnectedWarning{v}
}

func (x *LogData) SetRpcUnhandledError(v *logs_pb.RpcUnhandledError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RpcUnhandledError{v}
}

func (x *LogData) SetTimeDiffOutOfRangeWarning(v *logs_pb.TimeDiffOutOfRangeWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_TimeDiffOutOfRangeWarning{v}
}

func (x *LogData) SetTensorrtLog(v *logs_pb.TensorrtLog) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_TensorrtLog{v}
}

func (x *LogData) SetBuildingTensorrtEngineInfo(v *logs_pb.BuildingTensorrtEngineInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BuildingTensorrtEngineInfo{v}
}

func (x *LogData) SetLoadingTensorrtEngineInfo(v *logs_pb.LoadingTensorrtEngineInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LoadingTensorrtEngineInfo{v}
}

func (x *LogData) SetCalibrationMapNotFound(v *logs_pb.CalibrationMapNotFound) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CalibrationMapNotFound{v}
}

func (x *LogData) SetCalibrationMapNotValid(v *logs_pb.CalibrationMapNotValid) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CalibrationMapNotValid{v}
}

func (x *LogData) SetCalibrationMapPathAlreadyExists(v *logs_pb.CalibrationMapPathAlreadyExists) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CalibrationMapPathAlreadyExists{v}
}

func (x *LogData) SetFailedToSaveCalibrationMap(v *logs_pb.FailedToSaveCalibrationMap) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_FailedToSaveCalibrationMap{v}
}

func (x *LogData) SetFailedToRemoveCalibrationMap(v *logs_pb.FailedToRemoveCalibrationMap) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_FailedToRemoveCalibrationMap{v}
}

func (x *LogData) SetFailedToIterateInDirectory(v *logs_pb.FailedToIterateInDirectory) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_FailedToIterateInDirectory{v}
}

func (x *LogData) SetMapBasedCalibrationWithoutMapLoading(v *logs_pb.MapBasedCalibrationWithoutMapLoading) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_MapBasedCalibrationWithoutMapLoading{v}
}

func (x *LogData) SetMapBasedCalibrationAlreadyRunning(v *logs_pb.MapBasedCalibrationAlreadyRunning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_MapBasedCalibrationAlreadyRunning{v}
}

func (x *LogData) SetCancelMapBasedCalibrationNotRunning(v *logs_pb.CancelMapBasedCalibrationNotRunning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CancelMapBasedCalibrationNotRunning{v}
}

func (x *LogData) SetBagStreamNotFound(v *logs_pb.BagStreamNotFound) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagStreamNotFound{v}
}

func (x *LogData) SetEvaluationBagStartedInfo(v *logs_pb.EvaluationBagStartedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_EvaluationBagStartedInfo{v}
}

func (x *LogData) SetEvaluationBagFinishedInfo(v *logs_pb.EvaluationBagFinishedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_EvaluationBagFinishedInfo{v}
}

func (x *LogData) SetBagNotFound(v *logs_pb.BagNotFound) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagNotFound{v}
}

func (x *LogData) SetBuildingPipelineInfo(v *logs_pb.BuildingPipelineInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BuildingPipelineInfo{v}
}

func (x *LogData) SetBagIsNotEvaluation(v *logs_pb.BagIsNotEvaluation) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagIsNotEvaluation{v}
}

func (x *LogData) SetHorusBagRunning(v *logs_pb.HorusBagRunning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_HorusBagRunning{v}
}

func (x *LogData) SetAutoGroundCalibrationWarning(v *logs_pb.AutoGroundCalibrationWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_AutoGroundCalibrationWarning{v}
}

func (x *LogData) SetAutoGroundCalibrationError(v *logs_pb.AutoGroundCalibrationError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_AutoGroundCalibrationError{v}
}

func (x *LogData) SetObjectDetectorNotLoadedWarning(v *logs_pb.ObjectDetectorNotLoadedWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ObjectDetectorNotLoadedWarning{v}
}

func (x *LogData) SetCalibrationIsRunningError(v *logs_pb.CalibrationIsRunningError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CalibrationIsRunningError{v}
}

func (x *LogData) SetModelInitInProgressInfo(v *logs_pb.ModelInitInProgressInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ModelInitInProgressInfo{v}
}

func (x *LogData) SetRpcTimeoutWithResolutionWarning(v *logs_pb.RpcTimeoutWithResolutionWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RpcTimeoutWithResolutionWarning{v}
}

func (x *LogData) SetCalibrationWasCancelledInfo(v *logs_pb.CalibrationWasCancelledInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CalibrationWasCancelledInfo{v}
}

func (x *LogData) SetCalibrationMapRecordingFailedToStart(v *logs_pb.CalibrationMapRecordingFailedToStart) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CalibrationMapRecordingFailedToStart{v}
}

func (x *LogData) SetDetectionPipelineRequestedResetInfo(v *logs_pb.DetectionPipelineRequestedResetInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_DetectionPipelineRequestedResetInfo{v}
}

func (x *LogData) SetPreprocessingServicePipelineUnavailable(v *logs_pb.PreprocessingServicePipelineUnavailable) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_PreprocessingServicePipelineUnavailable{v}
}

func (x *LogData) SetCircularRecordingDisabledWarning(v *logs_pb.CircularRecordingDisabledWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CircularRecordingDisabledWarning{v}
}

func (x *LogData) SetSnapshotAlreadyRunningWarning(v *logs_pb.SnapshotAlreadyRunningWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_SnapshotAlreadyRunningWarning{v}
}

func (x *LogData) SetActiveProjectChangedInfo(v *logs_pb.ActiveProjectChangedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ActiveProjectChangedInfo{v}
}

func (x *LogData) SetProjectConfigUpdatedInfo(v *logs_pb.ProjectConfigUpdatedInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ProjectConfigUpdatedInfo{v}
}

func (x *LogData) SetInvalidLidarTimestamp(v *logs_pb.InvalidLidarTimestamp) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InvalidLidarTimestamp{v}
}

func (x *LogData) SetCalibrationAccumulatingPointsInfo(v *logs_pb.CalibrationAccumulatingPointsInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CalibrationAccumulatingPointsInfo{v}
}

func (x *LogData) SetSparseNoiseFilterUsageNonRotationalLidars(v *logs_pb.SparseNoiseFilterUsageNonRotationalLidars) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_SparseNoiseFilterUsageNonRotationalLidars{v}
}

func (x *LogData) SetFileWriteWarning(v *logs_pb.FileWriteWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_FileWriteWarning{v}
}

func (x *LogData) SetLicenseForbiddenFeature(v *logs_pb.LicenseForbiddenFeature) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LicenseForbiddenFeature{v}
}

func (x *LogData) SetFailedToUpdateConfiguration(v *logs_pb.FailedToUpdateConfiguration) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_FailedToUpdateConfiguration{v}
}

func (x *LogData) SetObstructionDetectorBadReferenceWarning(v *logs_pb.ObstructionDetectorBadReferenceWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ObstructionDetectorBadReferenceWarning{v}
}

func (x *LogData) SetProjectFileInvalidPermissionsError(v *logs_pb.ProjectFileInvalidPermissionsError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ProjectFileInvalidPermissionsError{v}
}

func (x *LogData) SetPipelineSchedulerError(v *logs_pb.PipelineSchedulerError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_PipelineSchedulerError{v}
}

func (x *LogData) SetMultiLidarCalibrationWarning(v *logs_pb.MultiLidarCalibrationWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_MultiLidarCalibrationWarning{v}
}

func (x *LogData) SetMultiLidarCalibrationError(v *logs_pb.MultiLidarCalibrationError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_MultiLidarCalibrationError{v}
}

func (x *LogData) SetOldBagWarning(v *logs_pb.OldBagWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_OldBagWarning{v}
}

func (x *LogData) SetUpgradingBagInfo(v *logs_pb.UpgradingBagInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_UpgradingBagInfo{v}
}

func (x *LogData) SetBagCalibrationSaveFailed(v *logs_pb.BagCalibrationSaveFailed) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagCalibrationSaveFailed{v}
}

func (x *LogData) SetBagUpgradeFailed(v *logs_pb.BagUpgradeFailed) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_BagUpgradeFailed{v}
}

func (x *LogData) SetUnknownLidarError(v *logs_pb.UnknownLidarError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_UnknownLidarError{v}
}

func (x *LogData) SetInvalidPointCloudWarning(v *logs_pb.InvalidPointCloudWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_InvalidPointCloudWarning{v}
}

func (x *LogData) SetLidarIsDroppingPackets(v *logs_pb.LidarIsDroppingPackets) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LidarIsDroppingPackets{v}
}

func (x *LogData) SetRemovedInvalidLidarsFromConfigWarning(v *logs_pb.RemovedInvalidLidarsFromConfigWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_RemovedInvalidLidarsFromConfigWarning{v}
}

func (x *LogData) SetCalibrationMapRecordingFailed(v *logs_pb.CalibrationMapRecordingFailed) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CalibrationMapRecordingFailed{v}
}

func (x *LogData) SetDetectionNodeNotFoundError(v *logs_pb.DetectionNodeNotFoundError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_DetectionNodeNotFoundError{v}
}

func (x *LogData) SetCreatedVersionBackupInfo(v *logs_pb.CreatedVersionBackupInfo) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_CreatedVersionBackupInfo{v}
}

func (x *LogData) SetPlyFileLoadFailedError(v *logs_pb.PlyFileLoadFailedError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_PlyFileLoadFailedError{v}
}

func (x *LogData) SetHesaiDriverLifecycle(v *logs_pb.HesaiDriverLifecycle) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_HesaiDriverLifecycle{v}
}

func (x *LogData) SetHesaiDriverError(v *logs_pb.HesaiDriverError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_HesaiDriverError{v}
}

func (x *LogData) SetHesaiPacketProcessingFailed(v *logs_pb.HesaiPacketProcessingFailed) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_HesaiPacketProcessingFailed{v}
}

func (x *LogData) SetHesaiCorrectionFileError(v *logs_pb.HesaiCorrectionFileError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_HesaiCorrectionFileError{v}
}

func (x *LogData) SetHesaiPacketStatistics(v *logs_pb.HesaiPacketStatistics) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_HesaiPacketStatistics{v}
}

func (x *LogData) SetPlyFileWriteFailedError(v *logs_pb.PlyFileWriteFailedError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_PlyFileWriteFailedError{v}
}

func (x *LogData) SetProjectSaveError(v *logs_pb.ProjectSaveError) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ProjectSaveError{v}
}

func (x *LogData) SetSaveStaticEnvironmentSuccess(v *logs_pb.SaveStaticEnvironmentSuccess) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_SaveStaticEnvironmentSuccess{v}
}

func (x *LogData) SetSaveStaticEnvironmentFailed(v *logs_pb.SaveStaticEnvironmentFailed) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_SaveStaticEnvironmentFailed{v}
}

func (x *LogData) SetLoadStaticEnvironmentSuccess(v *logs_pb.LoadStaticEnvironmentSuccess) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LoadStaticEnvironmentSuccess{v}
}

func (x *LogData) SetLoadStaticEnvironmentFailed(v *logs_pb.LoadStaticEnvironmentFailed) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_LoadStaticEnvironmentFailed{v}
}

func (x *LogData) SetAttemptToInjectInvalidLidarIdWarning(v *logs_pb.AttemptToInjectInvalidLidarIdWarning) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_AttemptToInjectInvalidLidarIdWarning{v}
}

func (x *LogData) SetResetBundledPacketDueToUnexpectedPacket(v *logs_pb.ResetBundledPacketDueToUnexpectedPacket) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &logData_ResetBundledPacketDueToUnexpectedPacket{v}
}

func (x *LogData) HasData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data != nil
}

func (x *LogData) HasGeneric() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_Generic)
	return ok
}

func (x *LogData) HasOom() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_Oom)
	return ok
}

func (x *LogData) HasRpcConnectionError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RpcConnectionError)
	return ok
}

func (x *LogData) HasInvalidProjectName() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InvalidProjectName)
	return ok
}

func (x *LogData) HasProjectNotFound() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ProjectNotFound)
	return ok
}

func (x *LogData) HasProjectAlreadyExists() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ProjectAlreadyExists)
	return ok
}

func (x *LogData) HasInvalidConfiguration() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InvalidConfiguration)
	return ok
}

func (x *LogData) HasEntityNotFound() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_EntityNotFound)
	return ok
}

func (x *LogData) HasActiveProjectCannotBeDeleted() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ActiveProjectCannotBeDeleted)
	return ok
}

func (x *LogData) HasRpcDisconnectionError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RpcDisconnectionError)
	return ok
}

func (x *LogData) HasDroppedLogs() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_DroppedLogs)
	return ok
}

func (x *LogData) HasOpenedProject() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_OpenedProject)
	return ok
}

func (x *LogData) HasCreatedProject() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CreatedProject)
	return ok
}

func (x *LogData) HasConfigUnavailable() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ConfigUnavailable)
	return ok
}

func (x *LogData) HasInvalidRequest() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InvalidRequest)
	return ok
}

func (x *LogData) HasSanityCheckError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_SanityCheckError)
	return ok
}

func (x *LogData) HasBagFailedToOpen() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagFailedToOpen)
	return ok
}

func (x *LogData) HasBagFailedToClose() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagFailedToClose)
	return ok
}

func (x *LogData) HasBagConversionFailed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagConversionFailed)
	return ok
}

func (x *LogData) HasBagFailedToWrite() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagFailedToWrite)
	return ok
}

func (x *LogData) HasCalibrationError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CalibrationError)
	return ok
}

func (x *LogData) HasProjectManagerFailedToStartRecording() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ProjectManagerFailedToStartRecording)
	return ok
}

func (x *LogData) HasProjectManagerFailedToStopRecording() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ProjectManagerFailedToStopRecording)
	return ok
}

func (x *LogData) HasServiceConnectionTimedOut() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ServiceConnectionTimedOut)
	return ok
}

func (x *LogData) HasBagRecorderAlreadyRunning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagRecorderAlreadyRunning)
	return ok
}

func (x *LogData) HasLicenseServerConnectionError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseServerConnectionError)
	return ok
}

func (x *LogData) HasLicenseError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseError)
	return ok
}

func (x *LogData) HasLicenseNotFoundError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseNotFoundError)
	return ok
}

func (x *LogData) HasLicenseExpiredError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseExpiredError)
	return ok
}

func (x *LogData) HasLicenseExceededError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseExceededError)
	return ok
}

func (x *LogData) HasLicenseHostMachineError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseHostMachineError)
	return ok
}

func (x *LogData) HasLicensePrivilegeError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicensePrivilegeError)
	return ok
}

func (x *LogData) HasLicenseActiveInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseActiveInfo)
	return ok
}

func (x *LogData) HasMultipleLicensesWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_MultipleLicensesWarning)
	return ok
}

func (x *LogData) HasLicenseCurrentLicenseStatusInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseCurrentLicenseStatusInfo)
	return ok
}

func (x *LogData) HasBagRecordingStoppedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagRecordingStoppedInfo)
	return ok
}

func (x *LogData) HasBagRecordingFailedToStart() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagRecordingFailedToStart)
	return ok
}

func (x *LogData) HasBagRecordingStartedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagRecordingStartedInfo)
	return ok
}

func (x *LogData) HasReplayRestartedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ReplayRestartedInfo)
	return ok
}

func (x *LogData) HasInputSourceChangeRequestedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InputSourceChangeRequestedInfo)
	return ok
}

func (x *LogData) HasInputSourceSwitchedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InputSourceSwitchedInfo)
	return ok
}

func (x *LogData) HasRpcTimeoutWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RpcTimeoutWarning)
	return ok
}

func (x *LogData) HasCannotWriteLogFile() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CannotWriteLogFile)
	return ok
}

func (x *LogData) HasPointCloudParsingFailureWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_PointCloudParsingFailureWarning)
	return ok
}

func (x *LogData) HasLidarIsDead() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarIsDead)
	return ok
}

func (x *LogData) HasLidarIsNotDeadAnymore() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarIsNotDeadAnymore)
	return ok
}

func (x *LogData) HasLidarIsObstructed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarIsObstructed)
	return ok
}

func (x *LogData) HasLidarIsNotObstructedAnymore() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarIsNotObstructedAnymore)
	return ok
}

func (x *LogData) HasLidarIsTilted() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarIsTilted)
	return ok
}

func (x *LogData) HasLidarIsNotTiltedAnymore() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarIsNotTiltedAnymore)
	return ok
}

func (x *LogData) HasLidarHasBeenAutomaticallyRecalibrated() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarHasBeenAutomaticallyRecalibrated)
	return ok
}

func (x *LogData) HasReceivedFirstDataForLidar() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ReceivedFirstDataForLidar)
	return ok
}

func (x *LogData) HasTerminationFailureError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_TerminationFailureError)
	return ok
}

func (x *LogData) HasFrameProcessingError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_FrameProcessingError)
	return ok
}

func (x *LogData) HasThreadPoolUnavailableError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ThreadPoolUnavailableError)
	return ok
}

func (x *LogData) HasInvalidArgument() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InvalidArgument)
	return ok
}

func (x *LogData) HasComponentInitializationFailureFatal() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ComponentInitializationFailureFatal)
	return ok
}

func (x *LogData) HasUnhandledEnumCaseError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_UnhandledEnumCaseError)
	return ok
}

func (x *LogData) HasBagEmptyError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagEmptyError)
	return ok
}

func (x *LogData) HasDiscardingDataError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_DiscardingDataError)
	return ok
}

func (x *LogData) HasDiscardingDataWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_DiscardingDataWarning)
	return ok
}

func (x *LogData) HasNothingToProcess() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_NothingToProcess)
	return ok
}

func (x *LogData) HasInvalidComponentConfiguration() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InvalidComponentConfiguration)
	return ok
}

func (x *LogData) HasChannelReceiverNotFoundWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ChannelReceiverNotFoundWarning)
	return ok
}

func (x *LogData) HasModelLoadFailure() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ModelLoadFailure)
	return ok
}

func (x *LogData) HasModelExecutionFailureError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ModelExecutionFailureError)
	return ok
}

func (x *LogData) HasServiceReadyInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ServiceReadyInfo)
	return ok
}

func (x *LogData) HasModelPreparingInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ModelPreparingInfo)
	return ok
}

func (x *LogData) HasModelInitializedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ModelInitializedInfo)
	return ok
}

func (x *LogData) HasModelInitializationFailureWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ModelInitializationFailureWarning)
	return ok
}

func (x *LogData) HasRosSpinnerStoppedWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RosSpinnerStoppedWarning)
	return ok
}

func (x *LogData) HasActorSystemUnavailableError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ActorSystemUnavailableError)
	return ok
}

func (x *LogData) HasConfigNodeNotFoundError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ConfigNodeNotFoundError)
	return ok
}

func (x *LogData) HasBagTimestampOutOfOrderError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagTimestampOutOfOrderError)
	return ok
}

func (x *LogData) HasBagReplayUnexpectedTimestampError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagReplayUnexpectedTimestampError)
	return ok
}

func (x *LogData) HasWebsocketClosedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_WebsocketClosedInfo)
	return ok
}

func (x *LogData) HasWebsocketOpenedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_WebsocketOpenedInfo)
	return ok
}

func (x *LogData) HasSubscriberDisconnectedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_SubscriberDisconnectedInfo)
	return ok
}

func (x *LogData) HasThreadPoolSlowingDownWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ThreadPoolSlowingDownWarning)
	return ok
}

func (x *LogData) HasThreadPoolNotRespondingWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ThreadPoolNotRespondingWarning)
	return ok
}

func (x *LogData) HasThreadPoolBrokenPromiseWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ThreadPoolBrokenPromiseWarning)
	return ok
}

func (x *LogData) HasBoxFittingPointsBelowBaseWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BoxFittingPointsBelowBaseWarning)
	return ok
}

func (x *LogData) HasFailedToRemoveStalePointsWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_FailedToRemoveStalePointsWarning)
	return ok
}

func (x *LogData) HasIrregularBroadcastingPeriodWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_IrregularBroadcastingPeriodWarning)
	return ok
}

func (x *LogData) HasClustererPointsOutOfRangeWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ClustererPointsOutOfRangeWarning)
	return ok
}

func (x *LogData) HasInternalError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InternalError)
	return ok
}

func (x *LogData) HasInternalFatal() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InternalFatal)
	return ok
}

func (x *LogData) HasServiceStartingInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ServiceStartingInfo)
	return ok
}

func (x *LogData) HasConfigNodeNotFoundFatal() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ConfigNodeNotFoundFatal)
	return ok
}

func (x *LogData) HasServiceSetupError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ServiceSetupError)
	return ok
}

func (x *LogData) HasFilesystemError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_FilesystemError)
	return ok
}

func (x *LogData) HasInvalidPresetWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InvalidPresetWarning)
	return ok
}

func (x *LogData) HasWebsocketFailedClearPendingError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_WebsocketFailedClearPendingError)
	return ok
}

func (x *LogData) HasWebsocketFailedToStopError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_WebsocketFailedToStopError)
	return ok
}

func (x *LogData) HasWebsocketFailedToCreateError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_WebsocketFailedToCreateError)
	return ok
}

func (x *LogData) HasUnexpectedRpcError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_UnexpectedRpcError)
	return ok
}

func (x *LogData) HasLicensePollFailed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicensePollFailed)
	return ok
}

func (x *LogData) HasLicenseExpiredWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseExpiredWarning)
	return ok
}

func (x *LogData) HasLicenseUsageExceededWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseUsageExceededWarning)
	return ok
}

func (x *LogData) HasStaticThreadPoolSlowTaskWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_StaticThreadPoolSlowTaskWarning)
	return ok
}

func (x *LogData) HasRpcUnsupportedServiceWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RpcUnsupportedServiceWarning)
	return ok
}

func (x *LogData) HasWebsocketHandlerProblem() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_WebsocketHandlerProblem)
	return ok
}

func (x *LogData) HasWebsocketDeserializeError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_WebsocketDeserializeError)
	return ok
}

func (x *LogData) HasWebsocketExpiredRpcEndpointError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_WebsocketExpiredRpcEndpointError)
	return ok
}

func (x *LogData) HasWebsocketQueueOverloadedWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_WebsocketQueueOverloadedWarning)
	return ok
}

func (x *LogData) HasRpcFailedToNotifyWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RpcFailedToNotifyWarning)
	return ok
}

func (x *LogData) HasConfigSubscriptionFailedWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ConfigSubscriptionFailedWarning)
	return ok
}

func (x *LogData) HasThreadPoolClampedWorkersWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ThreadPoolClampedWorkersWarning)
	return ok
}

func (x *LogData) HasStoppingHorusBagRecorderAlreadyStopped() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_StoppingHorusBagRecorderAlreadyStopped)
	return ok
}

func (x *LogData) HasRecorderConfigUpdateWhileRunning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RecorderConfigUpdateWhileRunning)
	return ok
}

func (x *LogData) HasClampingDataWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ClampingDataWarning)
	return ok
}

func (x *LogData) HasLidarIncompatibleValues() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarIncompatibleValues)
	return ok
}

func (x *LogData) HasCannotDetermineContainerIdError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CannotDetermineContainerIdError)
	return ok
}

func (x *LogData) HasStartedLidarDriver() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_StartedLidarDriver)
	return ok
}

func (x *LogData) HasCannotStartLidarDriver() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CannotStartLidarDriver)
	return ok
}

func (x *LogData) HasStoppedLidarDriver() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_StoppedLidarDriver)
	return ok
}

func (x *LogData) HasCannotStopLidarDriver() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CannotStopLidarDriver)
	return ok
}

func (x *LogData) HasRestartedLidarDriver() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RestartedLidarDriver)
	return ok
}

func (x *LogData) HasCannotRestartLidarDriver() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CannotRestartLidarDriver)
	return ok
}

func (x *LogData) HasRemovedUnusedLidarDriver() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RemovedUnusedLidarDriver)
	return ok
}

func (x *LogData) HasCannotRemoveUnusedLidarDriver() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CannotRemoveUnusedLidarDriver)
	return ok
}

func (x *LogData) HasLidarDriverGcFailure() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarDriverGcFailure)
	return ok
}

func (x *LogData) HasIdSpaceExhausted() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_IdSpaceExhausted)
	return ok
}

func (x *LogData) HasPreprocessingToPointAggregatorPointsSkipped() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_PreprocessingToPointAggregatorPointsSkipped)
	return ok
}

func (x *LogData) HasMinMsgIntervalLessThanThreshold() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_MinMsgIntervalLessThanThreshold)
	return ok
}

func (x *LogData) HasFailedToCleanupRosWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_FailedToCleanupRosWarning)
	return ok
}

func (x *LogData) HasRpcDisconnectedWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RpcDisconnectedWarning)
	return ok
}

func (x *LogData) HasRpcUnhandledError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RpcUnhandledError)
	return ok
}

func (x *LogData) HasTimeDiffOutOfRangeWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_TimeDiffOutOfRangeWarning)
	return ok
}

func (x *LogData) HasTensorrtLog() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_TensorrtLog)
	return ok
}

func (x *LogData) HasBuildingTensorrtEngineInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BuildingTensorrtEngineInfo)
	return ok
}

func (x *LogData) HasLoadingTensorrtEngineInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LoadingTensorrtEngineInfo)
	return ok
}

func (x *LogData) HasCalibrationMapNotFound() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CalibrationMapNotFound)
	return ok
}

func (x *LogData) HasCalibrationMapNotValid() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CalibrationMapNotValid)
	return ok
}

func (x *LogData) HasCalibrationMapPathAlreadyExists() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CalibrationMapPathAlreadyExists)
	return ok
}

func (x *LogData) HasFailedToSaveCalibrationMap() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_FailedToSaveCalibrationMap)
	return ok
}

func (x *LogData) HasFailedToRemoveCalibrationMap() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_FailedToRemoveCalibrationMap)
	return ok
}

func (x *LogData) HasFailedToIterateInDirectory() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_FailedToIterateInDirectory)
	return ok
}

func (x *LogData) HasMapBasedCalibrationWithoutMapLoading() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_MapBasedCalibrationWithoutMapLoading)
	return ok
}

func (x *LogData) HasMapBasedCalibrationAlreadyRunning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_MapBasedCalibrationAlreadyRunning)
	return ok
}

func (x *LogData) HasCancelMapBasedCalibrationNotRunning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CancelMapBasedCalibrationNotRunning)
	return ok
}

func (x *LogData) HasBagStreamNotFound() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagStreamNotFound)
	return ok
}

func (x *LogData) HasEvaluationBagStartedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_EvaluationBagStartedInfo)
	return ok
}

func (x *LogData) HasEvaluationBagFinishedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_EvaluationBagFinishedInfo)
	return ok
}

func (x *LogData) HasBagNotFound() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagNotFound)
	return ok
}

func (x *LogData) HasBuildingPipelineInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BuildingPipelineInfo)
	return ok
}

func (x *LogData) HasBagIsNotEvaluation() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagIsNotEvaluation)
	return ok
}

func (x *LogData) HasHorusBagRunning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_HorusBagRunning)
	return ok
}

func (x *LogData) HasAutoGroundCalibrationWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_AutoGroundCalibrationWarning)
	return ok
}

func (x *LogData) HasAutoGroundCalibrationError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_AutoGroundCalibrationError)
	return ok
}

func (x *LogData) HasObjectDetectorNotLoadedWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ObjectDetectorNotLoadedWarning)
	return ok
}

func (x *LogData) HasCalibrationIsRunningError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CalibrationIsRunningError)
	return ok
}

func (x *LogData) HasModelInitInProgressInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ModelInitInProgressInfo)
	return ok
}

func (x *LogData) HasRpcTimeoutWithResolutionWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RpcTimeoutWithResolutionWarning)
	return ok
}

func (x *LogData) HasCalibrationWasCancelledInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CalibrationWasCancelledInfo)
	return ok
}

func (x *LogData) HasCalibrationMapRecordingFailedToStart() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CalibrationMapRecordingFailedToStart)
	return ok
}

func (x *LogData) HasDetectionPipelineRequestedResetInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_DetectionPipelineRequestedResetInfo)
	return ok
}

func (x *LogData) HasPreprocessingServicePipelineUnavailable() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_PreprocessingServicePipelineUnavailable)
	return ok
}

func (x *LogData) HasCircularRecordingDisabledWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CircularRecordingDisabledWarning)
	return ok
}

func (x *LogData) HasSnapshotAlreadyRunningWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_SnapshotAlreadyRunningWarning)
	return ok
}

func (x *LogData) HasActiveProjectChangedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ActiveProjectChangedInfo)
	return ok
}

func (x *LogData) HasProjectConfigUpdatedInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ProjectConfigUpdatedInfo)
	return ok
}

func (x *LogData) HasInvalidLidarTimestamp() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InvalidLidarTimestamp)
	return ok
}

func (x *LogData) HasCalibrationAccumulatingPointsInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CalibrationAccumulatingPointsInfo)
	return ok
}

func (x *LogData) HasSparseNoiseFilterUsageNonRotationalLidars() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_SparseNoiseFilterUsageNonRotationalLidars)
	return ok
}

func (x *LogData) HasFileWriteWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_FileWriteWarning)
	return ok
}

func (x *LogData) HasLicenseForbiddenFeature() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LicenseForbiddenFeature)
	return ok
}

func (x *LogData) HasFailedToUpdateConfiguration() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_FailedToUpdateConfiguration)
	return ok
}

func (x *LogData) HasObstructionDetectorBadReferenceWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ObstructionDetectorBadReferenceWarning)
	return ok
}

func (x *LogData) HasProjectFileInvalidPermissionsError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ProjectFileInvalidPermissionsError)
	return ok
}

func (x *LogData) HasPipelineSchedulerError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_PipelineSchedulerError)
	return ok
}

func (x *LogData) HasMultiLidarCalibrationWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_MultiLidarCalibrationWarning)
	return ok
}

func (x *LogData) HasMultiLidarCalibrationError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_MultiLidarCalibrationError)
	return ok
}

func (x *LogData) HasOldBagWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_OldBagWarning)
	return ok
}

func (x *LogData) HasUpgradingBagInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_UpgradingBagInfo)
	return ok
}

func (x *LogData) HasBagCalibrationSaveFailed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagCalibrationSaveFailed)
	return ok
}

func (x *LogData) HasBagUpgradeFailed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_BagUpgradeFailed)
	return ok
}

func (x *LogData) HasUnknownLidarError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_UnknownLidarError)
	return ok
}

func (x *LogData) HasInvalidPointCloudWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_InvalidPointCloudWarning)
	return ok
}

func (x *LogData) HasLidarIsDroppingPackets() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LidarIsDroppingPackets)
	return ok
}

func (x *LogData) HasRemovedInvalidLidarsFromConfigWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_RemovedInvalidLidarsFromConfigWarning)
	return ok
}

func (x *LogData) HasCalibrationMapRecordingFailed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CalibrationMapRecordingFailed)
	return ok
}

func (x *LogData) HasDetectionNodeNotFoundError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_DetectionNodeNotFoundError)
	return ok
}

func (x *LogData) HasCreatedVersionBackupInfo() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_CreatedVersionBackupInfo)
	return ok
}

func (x *LogData) HasPlyFileLoadFailedError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_PlyFileLoadFailedError)
	return ok
}

func (x *LogData) HasHesaiDriverLifecycle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_HesaiDriverLifecycle)
	return ok
}

func (x *LogData) HasHesaiDriverError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_HesaiDriverError)
	return ok
}

func (x *LogData) HasHesaiPacketProcessingFailed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_HesaiPacketProcessingFailed)
	return ok
}

func (x *LogData) HasHesaiCorrectionFileError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_HesaiCorrectionFileError)
	return ok
}

func (x *LogData) HasHesaiPacketStatistics() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_HesaiPacketStatistics)
	return ok
}

func (x *LogData) HasPlyFileWriteFailedError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_PlyFileWriteFailedError)
	return ok
}

func (x *LogData) HasProjectSaveError() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ProjectSaveError)
	return ok
}

func (x *LogData) HasSaveStaticEnvironmentSuccess() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_SaveStaticEnvironmentSuccess)
	return ok
}

func (x *LogData) HasSaveStaticEnvironmentFailed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_SaveStaticEnvironmentFailed)
	return ok
}

func (x *LogData) HasLoadStaticEnvironmentSuccess() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LoadStaticEnvironmentSuccess)
	return ok
}

func (x *LogData) HasLoadStaticEnvironmentFailed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_LoadStaticEnvironmentFailed)
	return ok
}

func (x *LogData) HasAttemptToInjectInvalidLidarIdWarning() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_AttemptToInjectInvalidLidarIdWarning)
	return ok
}

func (x *LogData) HasResetBundledPacketDueToUnexpectedPacket() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*logData_ResetBundledPacketDueToUnexpectedPacket)
	return ok
}

func (x *LogData) ClearData() {
	x.xxx_hidden_Data = nil
}

func (x *LogData) ClearGeneric() {
	if _, ok := x.xxx_hidden_Data.(*logData_Generic); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearOom() {
	if _, ok := x.xxx_hidden_Data.(*logData_Oom); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRpcConnectionError() {
	if _, ok := x.xxx_hidden_Data.(*logData_RpcConnectionError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInvalidProjectName() {
	if _, ok := x.xxx_hidden_Data.(*logData_InvalidProjectName); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearProjectNotFound() {
	if _, ok := x.xxx_hidden_Data.(*logData_ProjectNotFound); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearProjectAlreadyExists() {
	if _, ok := x.xxx_hidden_Data.(*logData_ProjectAlreadyExists); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInvalidConfiguration() {
	if _, ok := x.xxx_hidden_Data.(*logData_InvalidConfiguration); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearEntityNotFound() {
	if _, ok := x.xxx_hidden_Data.(*logData_EntityNotFound); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearActiveProjectCannotBeDeleted() {
	if _, ok := x.xxx_hidden_Data.(*logData_ActiveProjectCannotBeDeleted); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRpcDisconnectionError() {
	if _, ok := x.xxx_hidden_Data.(*logData_RpcDisconnectionError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearDroppedLogs() {
	if _, ok := x.xxx_hidden_Data.(*logData_DroppedLogs); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearOpenedProject() {
	if _, ok := x.xxx_hidden_Data.(*logData_OpenedProject); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCreatedProject() {
	if _, ok := x.xxx_hidden_Data.(*logData_CreatedProject); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearConfigUnavailable() {
	if _, ok := x.xxx_hidden_Data.(*logData_ConfigUnavailable); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInvalidRequest() {
	if _, ok := x.xxx_hidden_Data.(*logData_InvalidRequest); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearSanityCheckError() {
	if _, ok := x.xxx_hidden_Data.(*logData_SanityCheckError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagFailedToOpen() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagFailedToOpen); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagFailedToClose() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagFailedToClose); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagConversionFailed() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagConversionFailed); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagFailedToWrite() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagFailedToWrite); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCalibrationError() {
	if _, ok := x.xxx_hidden_Data.(*logData_CalibrationError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearProjectManagerFailedToStartRecording() {
	if _, ok := x.xxx_hidden_Data.(*logData_ProjectManagerFailedToStartRecording); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearProjectManagerFailedToStopRecording() {
	if _, ok := x.xxx_hidden_Data.(*logData_ProjectManagerFailedToStopRecording); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearServiceConnectionTimedOut() {
	if _, ok := x.xxx_hidden_Data.(*logData_ServiceConnectionTimedOut); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagRecorderAlreadyRunning() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagRecorderAlreadyRunning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseServerConnectionError() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseServerConnectionError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseError() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseNotFoundError() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseNotFoundError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseExpiredError() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseExpiredError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseExceededError() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseExceededError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseHostMachineError() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseHostMachineError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicensePrivilegeError() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicensePrivilegeError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseActiveInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseActiveInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearMultipleLicensesWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_MultipleLicensesWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseCurrentLicenseStatusInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseCurrentLicenseStatusInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagRecordingStoppedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagRecordingStoppedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagRecordingFailedToStart() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagRecordingFailedToStart); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagRecordingStartedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagRecordingStartedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearReplayRestartedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_ReplayRestartedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInputSourceChangeRequestedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_InputSourceChangeRequestedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInputSourceSwitchedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_InputSourceSwitchedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRpcTimeoutWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_RpcTimeoutWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCannotWriteLogFile() {
	if _, ok := x.xxx_hidden_Data.(*logData_CannotWriteLogFile); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearPointCloudParsingFailureWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_PointCloudParsingFailureWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarIsDead() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarIsDead); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarIsNotDeadAnymore() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarIsNotDeadAnymore); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarIsObstructed() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarIsObstructed); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarIsNotObstructedAnymore() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarIsNotObstructedAnymore); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarIsTilted() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarIsTilted); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarIsNotTiltedAnymore() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarIsNotTiltedAnymore); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarHasBeenAutomaticallyRecalibrated() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarHasBeenAutomaticallyRecalibrated); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearReceivedFirstDataForLidar() {
	if _, ok := x.xxx_hidden_Data.(*logData_ReceivedFirstDataForLidar); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearTerminationFailureError() {
	if _, ok := x.xxx_hidden_Data.(*logData_TerminationFailureError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearFrameProcessingError() {
	if _, ok := x.xxx_hidden_Data.(*logData_FrameProcessingError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearThreadPoolUnavailableError() {
	if _, ok := x.xxx_hidden_Data.(*logData_ThreadPoolUnavailableError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInvalidArgument() {
	if _, ok := x.xxx_hidden_Data.(*logData_InvalidArgument); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearComponentInitializationFailureFatal() {
	if _, ok := x.xxx_hidden_Data.(*logData_ComponentInitializationFailureFatal); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearUnhandledEnumCaseError() {
	if _, ok := x.xxx_hidden_Data.(*logData_UnhandledEnumCaseError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagEmptyError() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagEmptyError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearDiscardingDataError() {
	if _, ok := x.xxx_hidden_Data.(*logData_DiscardingDataError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearDiscardingDataWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_DiscardingDataWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearNothingToProcess() {
	if _, ok := x.xxx_hidden_Data.(*logData_NothingToProcess); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInvalidComponentConfiguration() {
	if _, ok := x.xxx_hidden_Data.(*logData_InvalidComponentConfiguration); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearChannelReceiverNotFoundWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ChannelReceiverNotFoundWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearModelLoadFailure() {
	if _, ok := x.xxx_hidden_Data.(*logData_ModelLoadFailure); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearModelExecutionFailureError() {
	if _, ok := x.xxx_hidden_Data.(*logData_ModelExecutionFailureError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearServiceReadyInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_ServiceReadyInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearModelPreparingInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_ModelPreparingInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearModelInitializedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_ModelInitializedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearModelInitializationFailureWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ModelInitializationFailureWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRosSpinnerStoppedWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_RosSpinnerStoppedWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearActorSystemUnavailableError() {
	if _, ok := x.xxx_hidden_Data.(*logData_ActorSystemUnavailableError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearConfigNodeNotFoundError() {
	if _, ok := x.xxx_hidden_Data.(*logData_ConfigNodeNotFoundError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagTimestampOutOfOrderError() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagTimestampOutOfOrderError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagReplayUnexpectedTimestampError() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagReplayUnexpectedTimestampError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearWebsocketClosedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_WebsocketClosedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearWebsocketOpenedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_WebsocketOpenedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearSubscriberDisconnectedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_SubscriberDisconnectedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearThreadPoolSlowingDownWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ThreadPoolSlowingDownWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearThreadPoolNotRespondingWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ThreadPoolNotRespondingWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearThreadPoolBrokenPromiseWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ThreadPoolBrokenPromiseWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBoxFittingPointsBelowBaseWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_BoxFittingPointsBelowBaseWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearFailedToRemoveStalePointsWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_FailedToRemoveStalePointsWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearIrregularBroadcastingPeriodWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_IrregularBroadcastingPeriodWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearClustererPointsOutOfRangeWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ClustererPointsOutOfRangeWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInternalError() {
	if _, ok := x.xxx_hidden_Data.(*logData_InternalError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInternalFatal() {
	if _, ok := x.xxx_hidden_Data.(*logData_InternalFatal); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearServiceStartingInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_ServiceStartingInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearConfigNodeNotFoundFatal() {
	if _, ok := x.xxx_hidden_Data.(*logData_ConfigNodeNotFoundFatal); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearServiceSetupError() {
	if _, ok := x.xxx_hidden_Data.(*logData_ServiceSetupError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearFilesystemError() {
	if _, ok := x.xxx_hidden_Data.(*logData_FilesystemError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInvalidPresetWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_InvalidPresetWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearWebsocketFailedClearPendingError() {
	if _, ok := x.xxx_hidden_Data.(*logData_WebsocketFailedClearPendingError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearWebsocketFailedToStopError() {
	if _, ok := x.xxx_hidden_Data.(*logData_WebsocketFailedToStopError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearWebsocketFailedToCreateError() {
	if _, ok := x.xxx_hidden_Data.(*logData_WebsocketFailedToCreateError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearUnexpectedRpcError() {
	if _, ok := x.xxx_hidden_Data.(*logData_UnexpectedRpcError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicensePollFailed() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicensePollFailed); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseExpiredWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseExpiredWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseUsageExceededWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseUsageExceededWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearStaticThreadPoolSlowTaskWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_StaticThreadPoolSlowTaskWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRpcUnsupportedServiceWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_RpcUnsupportedServiceWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearWebsocketHandlerProblem() {
	if _, ok := x.xxx_hidden_Data.(*logData_WebsocketHandlerProblem); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearWebsocketDeserializeError() {
	if _, ok := x.xxx_hidden_Data.(*logData_WebsocketDeserializeError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearWebsocketExpiredRpcEndpointError() {
	if _, ok := x.xxx_hidden_Data.(*logData_WebsocketExpiredRpcEndpointError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearWebsocketQueueOverloadedWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_WebsocketQueueOverloadedWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRpcFailedToNotifyWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_RpcFailedToNotifyWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearConfigSubscriptionFailedWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ConfigSubscriptionFailedWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearThreadPoolClampedWorkersWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ThreadPoolClampedWorkersWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearStoppingHorusBagRecorderAlreadyStopped() {
	if _, ok := x.xxx_hidden_Data.(*logData_StoppingHorusBagRecorderAlreadyStopped); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRecorderConfigUpdateWhileRunning() {
	if _, ok := x.xxx_hidden_Data.(*logData_RecorderConfigUpdateWhileRunning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearClampingDataWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ClampingDataWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarIncompatibleValues() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarIncompatibleValues); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCannotDetermineContainerIdError() {
	if _, ok := x.xxx_hidden_Data.(*logData_CannotDetermineContainerIdError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearStartedLidarDriver() {
	if _, ok := x.xxx_hidden_Data.(*logData_StartedLidarDriver); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCannotStartLidarDriver() {
	if _, ok := x.xxx_hidden_Data.(*logData_CannotStartLidarDriver); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearStoppedLidarDriver() {
	if _, ok := x.xxx_hidden_Data.(*logData_StoppedLidarDriver); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCannotStopLidarDriver() {
	if _, ok := x.xxx_hidden_Data.(*logData_CannotStopLidarDriver); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRestartedLidarDriver() {
	if _, ok := x.xxx_hidden_Data.(*logData_RestartedLidarDriver); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCannotRestartLidarDriver() {
	if _, ok := x.xxx_hidden_Data.(*logData_CannotRestartLidarDriver); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRemovedUnusedLidarDriver() {
	if _, ok := x.xxx_hidden_Data.(*logData_RemovedUnusedLidarDriver); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCannotRemoveUnusedLidarDriver() {
	if _, ok := x.xxx_hidden_Data.(*logData_CannotRemoveUnusedLidarDriver); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarDriverGcFailure() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarDriverGcFailure); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearIdSpaceExhausted() {
	if _, ok := x.xxx_hidden_Data.(*logData_IdSpaceExhausted); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearPreprocessingToPointAggregatorPointsSkipped() {
	if _, ok := x.xxx_hidden_Data.(*logData_PreprocessingToPointAggregatorPointsSkipped); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearMinMsgIntervalLessThanThreshold() {
	if _, ok := x.xxx_hidden_Data.(*logData_MinMsgIntervalLessThanThreshold); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearFailedToCleanupRosWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_FailedToCleanupRosWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRpcDisconnectedWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_RpcDisconnectedWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRpcUnhandledError() {
	if _, ok := x.xxx_hidden_Data.(*logData_RpcUnhandledError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearTimeDiffOutOfRangeWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_TimeDiffOutOfRangeWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearTensorrtLog() {
	if _, ok := x.xxx_hidden_Data.(*logData_TensorrtLog); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBuildingTensorrtEngineInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_BuildingTensorrtEngineInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLoadingTensorrtEngineInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_LoadingTensorrtEngineInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCalibrationMapNotFound() {
	if _, ok := x.xxx_hidden_Data.(*logData_CalibrationMapNotFound); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCalibrationMapNotValid() {
	if _, ok := x.xxx_hidden_Data.(*logData_CalibrationMapNotValid); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCalibrationMapPathAlreadyExists() {
	if _, ok := x.xxx_hidden_Data.(*logData_CalibrationMapPathAlreadyExists); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearFailedToSaveCalibrationMap() {
	if _, ok := x.xxx_hidden_Data.(*logData_FailedToSaveCalibrationMap); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearFailedToRemoveCalibrationMap() {
	if _, ok := x.xxx_hidden_Data.(*logData_FailedToRemoveCalibrationMap); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearFailedToIterateInDirectory() {
	if _, ok := x.xxx_hidden_Data.(*logData_FailedToIterateInDirectory); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearMapBasedCalibrationWithoutMapLoading() {
	if _, ok := x.xxx_hidden_Data.(*logData_MapBasedCalibrationWithoutMapLoading); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearMapBasedCalibrationAlreadyRunning() {
	if _, ok := x.xxx_hidden_Data.(*logData_MapBasedCalibrationAlreadyRunning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCancelMapBasedCalibrationNotRunning() {
	if _, ok := x.xxx_hidden_Data.(*logData_CancelMapBasedCalibrationNotRunning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagStreamNotFound() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagStreamNotFound); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearEvaluationBagStartedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_EvaluationBagStartedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearEvaluationBagFinishedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_EvaluationBagFinishedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagNotFound() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagNotFound); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBuildingPipelineInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_BuildingPipelineInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagIsNotEvaluation() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagIsNotEvaluation); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearHorusBagRunning() {
	if _, ok := x.xxx_hidden_Data.(*logData_HorusBagRunning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearAutoGroundCalibrationWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_AutoGroundCalibrationWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearAutoGroundCalibrationError() {
	if _, ok := x.xxx_hidden_Data.(*logData_AutoGroundCalibrationError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearObjectDetectorNotLoadedWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ObjectDetectorNotLoadedWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCalibrationIsRunningError() {
	if _, ok := x.xxx_hidden_Data.(*logData_CalibrationIsRunningError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearModelInitInProgressInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_ModelInitInProgressInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRpcTimeoutWithResolutionWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_RpcTimeoutWithResolutionWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCalibrationWasCancelledInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_CalibrationWasCancelledInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCalibrationMapRecordingFailedToStart() {
	if _, ok := x.xxx_hidden_Data.(*logData_CalibrationMapRecordingFailedToStart); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearDetectionPipelineRequestedResetInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_DetectionPipelineRequestedResetInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearPreprocessingServicePipelineUnavailable() {
	if _, ok := x.xxx_hidden_Data.(*logData_PreprocessingServicePipelineUnavailable); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCircularRecordingDisabledWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_CircularRecordingDisabledWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearSnapshotAlreadyRunningWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_SnapshotAlreadyRunningWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearActiveProjectChangedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_ActiveProjectChangedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearProjectConfigUpdatedInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_ProjectConfigUpdatedInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInvalidLidarTimestamp() {
	if _, ok := x.xxx_hidden_Data.(*logData_InvalidLidarTimestamp); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCalibrationAccumulatingPointsInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_CalibrationAccumulatingPointsInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearSparseNoiseFilterUsageNonRotationalLidars() {
	if _, ok := x.xxx_hidden_Data.(*logData_SparseNoiseFilterUsageNonRotationalLidars); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearFileWriteWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_FileWriteWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLicenseForbiddenFeature() {
	if _, ok := x.xxx_hidden_Data.(*logData_LicenseForbiddenFeature); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearFailedToUpdateConfiguration() {
	if _, ok := x.xxx_hidden_Data.(*logData_FailedToUpdateConfiguration); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearObstructionDetectorBadReferenceWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_ObstructionDetectorBadReferenceWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearProjectFileInvalidPermissionsError() {
	if _, ok := x.xxx_hidden_Data.(*logData_ProjectFileInvalidPermissionsError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearPipelineSchedulerError() {
	if _, ok := x.xxx_hidden_Data.(*logData_PipelineSchedulerError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearMultiLidarCalibrationWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_MultiLidarCalibrationWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearMultiLidarCalibrationError() {
	if _, ok := x.xxx_hidden_Data.(*logData_MultiLidarCalibrationError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearOldBagWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_OldBagWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearUpgradingBagInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_UpgradingBagInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagCalibrationSaveFailed() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagCalibrationSaveFailed); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearBagUpgradeFailed() {
	if _, ok := x.xxx_hidden_Data.(*logData_BagUpgradeFailed); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearUnknownLidarError() {
	if _, ok := x.xxx_hidden_Data.(*logData_UnknownLidarError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearInvalidPointCloudWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_InvalidPointCloudWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLidarIsDroppingPackets() {
	if _, ok := x.xxx_hidden_Data.(*logData_LidarIsDroppingPackets); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearRemovedInvalidLidarsFromConfigWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_RemovedInvalidLidarsFromConfigWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCalibrationMapRecordingFailed() {
	if _, ok := x.xxx_hidden_Data.(*logData_CalibrationMapRecordingFailed); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearDetectionNodeNotFoundError() {
	if _, ok := x.xxx_hidden_Data.(*logData_DetectionNodeNotFoundError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearCreatedVersionBackupInfo() {
	if _, ok := x.xxx_hidden_Data.(*logData_CreatedVersionBackupInfo); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearPlyFileLoadFailedError() {
	if _, ok := x.xxx_hidden_Data.(*logData_PlyFileLoadFailedError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearHesaiDriverLifecycle() {
	if _, ok := x.xxx_hidden_Data.(*logData_HesaiDriverLifecycle); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearHesaiDriverError() {
	if _, ok := x.xxx_hidden_Data.(*logData_HesaiDriverError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearHesaiPacketProcessingFailed() {
	if _, ok := x.xxx_hidden_Data.(*logData_HesaiPacketProcessingFailed); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearHesaiCorrectionFileError() {
	if _, ok := x.xxx_hidden_Data.(*logData_HesaiCorrectionFileError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearHesaiPacketStatistics() {
	if _, ok := x.xxx_hidden_Data.(*logData_HesaiPacketStatistics); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearPlyFileWriteFailedError() {
	if _, ok := x.xxx_hidden_Data.(*logData_PlyFileWriteFailedError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearProjectSaveError() {
	if _, ok := x.xxx_hidden_Data.(*logData_ProjectSaveError); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearSaveStaticEnvironmentSuccess() {
	if _, ok := x.xxx_hidden_Data.(*logData_SaveStaticEnvironmentSuccess); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearSaveStaticEnvironmentFailed() {
	if _, ok := x.xxx_hidden_Data.(*logData_SaveStaticEnvironmentFailed); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLoadStaticEnvironmentSuccess() {
	if _, ok := x.xxx_hidden_Data.(*logData_LoadStaticEnvironmentSuccess); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearLoadStaticEnvironmentFailed() {
	if _, ok := x.xxx_hidden_Data.(*logData_LoadStaticEnvironmentFailed); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearAttemptToInjectInvalidLidarIdWarning() {
	if _, ok := x.xxx_hidden_Data.(*logData_AttemptToInjectInvalidLidarIdWarning); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *LogData) ClearResetBundledPacketDueToUnexpectedPacket() {
	if _, ok := x.xxx_hidden_Data.(*logData_ResetBundledPacketDueToUnexpectedPacket); ok {
		x.xxx_hidden_Data = nil
	}
}

const LogData_Data_not_set_case case_LogData_Data = 0
const LogData_Generic_case case_LogData_Data = 1
const LogData_Oom_case case_LogData_Data = 2
const LogData_RpcConnectionError_case case_LogData_Data = 3
const LogData_InvalidProjectName_case case_LogData_Data = 4
const LogData_ProjectNotFound_case case_LogData_Data = 5
const LogData_ProjectAlreadyExists_case case_LogData_Data = 6
const LogData_InvalidConfiguration_case case_LogData_Data = 7
const LogData_EntityNotFound_case case_LogData_Data = 8
const LogData_ActiveProjectCannotBeDeleted_case case_LogData_Data = 9
const LogData_RpcDisconnectionError_case case_LogData_Data = 10
const LogData_DroppedLogs_case case_LogData_Data = 11
const LogData_OpenedProject_case case_LogData_Data = 12
const LogData_CreatedProject_case case_LogData_Data = 13
const LogData_ConfigUnavailable_case case_LogData_Data = 14
const LogData_InvalidRequest_case case_LogData_Data = 15
const LogData_SanityCheckError_case case_LogData_Data = 16
const LogData_BagFailedToOpen_case case_LogData_Data = 17
const LogData_BagFailedToClose_case case_LogData_Data = 18
const LogData_BagConversionFailed_case case_LogData_Data = 19
const LogData_BagFailedToWrite_case case_LogData_Data = 20
const LogData_CalibrationError_case case_LogData_Data = 21
const LogData_ProjectManagerFailedToStartRecording_case case_LogData_Data = 22
const LogData_ProjectManagerFailedToStopRecording_case case_LogData_Data = 23
const LogData_ServiceConnectionTimedOut_case case_LogData_Data = 24
const LogData_BagRecorderAlreadyRunning_case case_LogData_Data = 25
const LogData_LicenseServerConnectionError_case case_LogData_Data = 26
const LogData_LicenseError_case case_LogData_Data = 27
const LogData_LicenseNotFoundError_case case_LogData_Data = 145
const LogData_LicenseExpiredError_case case_LogData_Data = 146
const LogData_LicenseExceededError_case case_LogData_Data = 147
const LogData_LicenseHostMachineError_case case_LogData_Data = 28
const LogData_LicensePrivilegeError_case case_LogData_Data = 148
const LogData_LicenseActiveInfo_case case_LogData_Data = 149
const LogData_MultipleLicensesWarning_case case_LogData_Data = 150
const LogData_LicenseCurrentLicenseStatusInfo_case case_LogData_Data = 29
const LogData_BagRecordingStoppedInfo_case case_LogData_Data = 30
const LogData_BagRecordingFailedToStart_case case_LogData_Data = 31
const LogData_BagRecordingStartedInfo_case case_LogData_Data = 32
const LogData_ReplayRestartedInfo_case case_LogData_Data = 33
const LogData_InputSourceChangeRequestedInfo_case case_LogData_Data = 34
const LogData_InputSourceSwitchedInfo_case case_LogData_Data = 35
const LogData_RpcTimeoutWarning_case case_LogData_Data = 36
const LogData_CannotWriteLogFile_case case_LogData_Data = 37
const LogData_PointCloudParsingFailureWarning_case case_LogData_Data = 38
const LogData_LidarIsDead_case case_LogData_Data = 39
const LogData_LidarIsNotDeadAnymore_case case_LogData_Data = 40
const LogData_LidarIsObstructed_case case_LogData_Data = 41
const LogData_LidarIsNotObstructedAnymore_case case_LogData_Data = 42
const LogData_LidarIsTilted_case case_LogData_Data = 43
const LogData_LidarIsNotTiltedAnymore_case case_LogData_Data = 44
const LogData_LidarHasBeenAutomaticallyRecalibrated_case case_LogData_Data = 45
const LogData_ReceivedFirstDataForLidar_case case_LogData_Data = 46
const LogData_TerminationFailureError_case case_LogData_Data = 47
const LogData_FrameProcessingError_case case_LogData_Data = 48
const LogData_ThreadPoolUnavailableError_case case_LogData_Data = 49
const LogData_InvalidArgument_case case_LogData_Data = 50
const LogData_ComponentInitializationFailureFatal_case case_LogData_Data = 51
const LogData_UnhandledEnumCaseError_case case_LogData_Data = 52
const LogData_BagEmptyError_case case_LogData_Data = 53
const LogData_DiscardingDataError_case case_LogData_Data = 54
const LogData_DiscardingDataWarning_case case_LogData_Data = 55
const LogData_NothingToProcess_case case_LogData_Data = 56
const LogData_InvalidComponentConfiguration_case case_LogData_Data = 57
const LogData_ChannelReceiverNotFoundWarning_case case_LogData_Data = 58
const LogData_ModelLoadFailure_case case_LogData_Data = 59
const LogData_ModelExecutionFailureError_case case_LogData_Data = 60
const LogData_ServiceReadyInfo_case case_LogData_Data = 61
const LogData_ModelPreparingInfo_case case_LogData_Data = 62
const LogData_ModelInitializedInfo_case case_LogData_Data = 63
const LogData_ModelInitializationFailureWarning_case case_LogData_Data = 64
const LogData_RosSpinnerStoppedWarning_case case_LogData_Data = 65
const LogData_ActorSystemUnavailableError_case case_LogData_Data = 66
const LogData_ConfigNodeNotFoundError_case case_LogData_Data = 67
const LogData_BagTimestampOutOfOrderError_case case_LogData_Data = 68
const LogData_BagReplayUnexpectedTimestampError_case case_LogData_Data = 69
const LogData_WebsocketClosedInfo_case case_LogData_Data = 70
const LogData_WebsocketOpenedInfo_case case_LogData_Data = 71
const LogData_SubscriberDisconnectedInfo_case case_LogData_Data = 72
const LogData_ThreadPoolSlowingDownWarning_case case_LogData_Data = 73
const LogData_ThreadPoolNotRespondingWarning_case case_LogData_Data = 74
const LogData_ThreadPoolBrokenPromiseWarning_case case_LogData_Data = 75
const LogData_BoxFittingPointsBelowBaseWarning_case case_LogData_Data = 76
const LogData_FailedToRemoveStalePointsWarning_case case_LogData_Data = 77
const LogData_IrregularBroadcastingPeriodWarning_case case_LogData_Data = 78
const LogData_ClustererPointsOutOfRangeWarning_case case_LogData_Data = 79
const LogData_InternalError_case case_LogData_Data = 80
const LogData_InternalFatal_case case_LogData_Data = 81
const LogData_ServiceStartingInfo_case case_LogData_Data = 82
const LogData_ConfigNodeNotFoundFatal_case case_LogData_Data = 83
const LogData_ServiceSetupError_case case_LogData_Data = 84
const LogData_FilesystemError_case case_LogData_Data = 85
const LogData_InvalidPresetWarning_case case_LogData_Data = 86
const LogData_WebsocketFailedClearPendingError_case case_LogData_Data = 87
const LogData_WebsocketFailedToStopError_case case_LogData_Data = 88
const LogData_WebsocketFailedToCreateError_case case_LogData_Data = 89
const LogData_UnexpectedRpcError_case case_LogData_Data = 90
const LogData_LicensePollFailed_case case_LogData_Data = 91
const LogData_LicenseExpiredWarning_case case_LogData_Data = 92
const LogData_LicenseUsageExceededWarning_case case_LogData_Data = 93
const LogData_StaticThreadPoolSlowTaskWarning_case case_LogData_Data = 94
const LogData_RpcUnsupportedServiceWarning_case case_LogData_Data = 95
const LogData_WebsocketHandlerProblem_case case_LogData_Data = 96
const LogData_WebsocketDeserializeError_case case_LogData_Data = 97
const LogData_WebsocketExpiredRpcEndpointError_case case_LogData_Data = 98
const LogData_WebsocketQueueOverloadedWarning_case case_LogData_Data = 99
const LogData_RpcFailedToNotifyWarning_case case_LogData_Data = 100
const LogData_ConfigSubscriptionFailedWarning_case case_LogData_Data = 101
const LogData_ThreadPoolClampedWorkersWarning_case case_LogData_Data = 102
const LogData_StoppingHorusBagRecorderAlreadyStopped_case case_LogData_Data = 103
const LogData_RecorderConfigUpdateWhileRunning_case case_LogData_Data = 104
const LogData_ClampingDataWarning_case case_LogData_Data = 105
const LogData_LidarIncompatibleValues_case case_LogData_Data = 106
const LogData_CannotDetermineContainerIdError_case case_LogData_Data = 107
const LogData_StartedLidarDriver_case case_LogData_Data = 108
const LogData_CannotStartLidarDriver_case case_LogData_Data = 109
const LogData_StoppedLidarDriver_case case_LogData_Data = 110
const LogData_CannotStopLidarDriver_case case_LogData_Data = 111
const LogData_RestartedLidarDriver_case case_LogData_Data = 112
const LogData_CannotRestartLidarDriver_case case_LogData_Data = 113
const LogData_RemovedUnusedLidarDriver_case case_LogData_Data = 114
const LogData_CannotRemoveUnusedLidarDriver_case case_LogData_Data = 115
const LogData_LidarDriverGcFailure_case case_LogData_Data = 116
const LogData_IdSpaceExhausted_case case_LogData_Data = 117
const LogData_PreprocessingToPointAggregatorPointsSkipped_case case_LogData_Data = 118
const LogData_MinMsgIntervalLessThanThreshold_case case_LogData_Data = 119
const LogData_FailedToCleanupRosWarning_case case_LogData_Data = 120
const LogData_RpcDisconnectedWarning_case case_LogData_Data = 121
const LogData_RpcUnhandledError_case case_LogData_Data = 122
const LogData_TimeDiffOutOfRangeWarning_case case_LogData_Data = 123
const LogData_TensorrtLog_case case_LogData_Data = 124
const LogData_BuildingTensorrtEngineInfo_case case_LogData_Data = 125
const LogData_LoadingTensorrtEngineInfo_case case_LogData_Data = 126
const LogData_CalibrationMapNotFound_case case_LogData_Data = 127
const LogData_CalibrationMapNotValid_case case_LogData_Data = 128
const LogData_CalibrationMapPathAlreadyExists_case case_LogData_Data = 129
const LogData_FailedToSaveCalibrationMap_case case_LogData_Data = 130
const LogData_FailedToRemoveCalibrationMap_case case_LogData_Data = 131
const LogData_FailedToIterateInDirectory_case case_LogData_Data = 132
const LogData_MapBasedCalibrationWithoutMapLoading_case case_LogData_Data = 133
const LogData_MapBasedCalibrationAlreadyRunning_case case_LogData_Data = 134
const LogData_CancelMapBasedCalibrationNotRunning_case case_LogData_Data = 135
const LogData_BagStreamNotFound_case case_LogData_Data = 136
const LogData_EvaluationBagStartedInfo_case case_LogData_Data = 137
const LogData_EvaluationBagFinishedInfo_case case_LogData_Data = 138
const LogData_BagNotFound_case case_LogData_Data = 139
const LogData_BuildingPipelineInfo_case case_LogData_Data = 140
const LogData_BagIsNotEvaluation_case case_LogData_Data = 141
const LogData_HorusBagRunning_case case_LogData_Data = 142
const LogData_AutoGroundCalibrationWarning_case case_LogData_Data = 143
const LogData_AutoGroundCalibrationError_case case_LogData_Data = 144
const LogData_ObjectDetectorNotLoadedWarning_case case_LogData_Data = 151
const LogData_CalibrationIsRunningError_case case_LogData_Data = 152
const LogData_ModelInitInProgressInfo_case case_LogData_Data = 153
const LogData_RpcTimeoutWithResolutionWarning_case case_LogData_Data = 154
const LogData_CalibrationWasCancelledInfo_case case_LogData_Data = 155
const LogData_CalibrationMapRecordingFailedToStart_case case_LogData_Data = 156
const LogData_DetectionPipelineRequestedResetInfo_case case_LogData_Data = 157
const LogData_PreprocessingServicePipelineUnavailable_case case_LogData_Data = 158
const LogData_CircularRecordingDisabledWarning_case case_LogData_Data = 159
const LogData_SnapshotAlreadyRunningWarning_case case_LogData_Data = 160
const LogData_ActiveProjectChangedInfo_case case_LogData_Data = 161
const LogData_ProjectConfigUpdatedInfo_case case_LogData_Data = 162
const LogData_InvalidLidarTimestamp_case case_LogData_Data = 163
const LogData_CalibrationAccumulatingPointsInfo_case case_LogData_Data = 164
const LogData_SparseNoiseFilterUsageNonRotationalLidars_case case_LogData_Data = 165
const LogData_FileWriteWarning_case case_LogData_Data = 166
const LogData_LicenseForbiddenFeature_case case_LogData_Data = 167
const LogData_FailedToUpdateConfiguration_case case_LogData_Data = 168
const LogData_ObstructionDetectorBadReferenceWarning_case case_LogData_Data = 169
const LogData_ProjectFileInvalidPermissionsError_case case_LogData_Data = 170
const LogData_PipelineSchedulerError_case case_LogData_Data = 171
const LogData_MultiLidarCalibrationWarning_case case_LogData_Data = 172
const LogData_MultiLidarCalibrationError_case case_LogData_Data = 173
const LogData_OldBagWarning_case case_LogData_Data = 174
const LogData_UpgradingBagInfo_case case_LogData_Data = 175
const LogData_BagCalibrationSaveFailed_case case_LogData_Data = 176
const LogData_BagUpgradeFailed_case case_LogData_Data = 177
const LogData_UnknownLidarError_case case_LogData_Data = 178
const LogData_InvalidPointCloudWarning_case case_LogData_Data = 179
const LogData_LidarIsDroppingPackets_case case_LogData_Data = 180
const LogData_RemovedInvalidLidarsFromConfigWarning_case case_LogData_Data = 181
const LogData_CalibrationMapRecordingFailed_case case_LogData_Data = 182
const LogData_DetectionNodeNotFoundError_case case_LogData_Data = 183
const LogData_CreatedVersionBackupInfo_case case_LogData_Data = 184
const LogData_PlyFileLoadFailedError_case case_LogData_Data = 185
const LogData_HesaiDriverLifecycle_case case_LogData_Data = 186
const LogData_HesaiDriverError_case case_LogData_Data = 187
const LogData_HesaiPacketProcessingFailed_case case_LogData_Data = 188
const LogData_HesaiCorrectionFileError_case case_LogData_Data = 189
const LogData_HesaiPacketStatistics_case case_LogData_Data = 190
const LogData_PlyFileWriteFailedError_case case_LogData_Data = 191
const LogData_ProjectSaveError_case case_LogData_Data = 192
const LogData_SaveStaticEnvironmentSuccess_case case_LogData_Data = 193
const LogData_SaveStaticEnvironmentFailed_case case_LogData_Data = 194
const LogData_LoadStaticEnvironmentSuccess_case case_LogData_Data = 195
const LogData_LoadStaticEnvironmentFailed_case case_LogData_Data = 196
const LogData_AttemptToInjectInvalidLidarIdWarning_case case_LogData_Data = 197
const LogData_ResetBundledPacketDueToUnexpectedPacket_case case_LogData_Data = 198

func (x *LogData) WhichData() case_LogData_Data {
	if x == nil {
		return LogData_Data_not_set_case
	}
	switch x.xxx_hidden_Data.(type) {
	case *logData_Generic:
		return LogData_Generic_case
	case *logData_Oom:
		return LogData_Oom_case
	case *logData_RpcConnectionError:
		return LogData_RpcConnectionError_case
	case *logData_InvalidProjectName:
		return LogData_InvalidProjectName_case
	case *logData_ProjectNotFound:
		return LogData_ProjectNotFound_case
	case *logData_ProjectAlreadyExists:
		return LogData_ProjectAlreadyExists_case
	case *logData_InvalidConfiguration:
		return LogData_InvalidConfiguration_case
	case *logData_EntityNotFound:
		return LogData_EntityNotFound_case
	case *logData_ActiveProjectCannotBeDeleted:
		return LogData_ActiveProjectCannotBeDeleted_case
	case *logData_RpcDisconnectionError:
		return LogData_RpcDisconnectionError_case
	case *logData_DroppedLogs:
		return LogData_DroppedLogs_case
	case *logData_OpenedProject:
		return LogData_OpenedProject_case
	case *logData_CreatedProject:
		return LogData_CreatedProject_case
	case *logData_ConfigUnavailable:
		return LogData_ConfigUnavailable_case
	case *logData_InvalidRequest:
		return LogData_InvalidRequest_case
	case *logData_SanityCheckError:
		return LogData_SanityCheckError_case
	case *logData_BagFailedToOpen:
		return LogData_BagFailedToOpen_case
	case *logData_BagFailedToClose:
		return LogData_BagFailedToClose_case
	case *logData_BagConversionFailed:
		return LogData_BagConversionFailed_case
	case *logData_BagFailedToWrite:
		return LogData_BagFailedToWrite_case
	case *logData_CalibrationError:
		return LogData_CalibrationError_case
	case *logData_ProjectManagerFailedToStartRecording:
		return LogData_ProjectManagerFailedToStartRecording_case
	case *logData_ProjectManagerFailedToStopRecording:
		return LogData_ProjectManagerFailedToStopRecording_case
	case *logData_ServiceConnectionTimedOut:
		return LogData_ServiceConnectionTimedOut_case
	case *logData_BagRecorderAlreadyRunning:
		return LogData_BagRecorderAlreadyRunning_case
	case *logData_LicenseServerConnectionError:
		return LogData_LicenseServerConnectionError_case
	case *logData_LicenseError:
		return LogData_LicenseError_case
	case *logData_LicenseNotFoundError:
		return LogData_LicenseNotFoundError_case
	case *logData_LicenseExpiredError:
		return LogData_LicenseExpiredError_case
	case *logData_LicenseExceededError:
		return LogData_LicenseExceededError_case
	case *logData_LicenseHostMachineError:
		return LogData_LicenseHostMachineError_case
	case *logData_LicensePrivilegeError:
		return LogData_LicensePrivilegeError_case
	case *logData_LicenseActiveInfo:
		return LogData_LicenseActiveInfo_case
	case *logData_MultipleLicensesWarning:
		return LogData_MultipleLicensesWarning_case
	case *logData_LicenseCurrentLicenseStatusInfo:
		return LogData_LicenseCurrentLicenseStatusInfo_case
	case *logData_BagRecordingStoppedInfo:
		return LogData_BagRecordingStoppedInfo_case
	case *logData_BagRecordingFailedToStart:
		return LogData_BagRecordingFailedToStart_case
	case *logData_BagRecordingStartedInfo:
		return LogData_BagRecordingStartedInfo_case
	case *logData_ReplayRestartedInfo:
		return LogData_ReplayRestartedInfo_case
	case *logData_InputSourceChangeRequestedInfo:
		return LogData_InputSourceChangeRequestedInfo_case
	case *logData_InputSourceSwitchedInfo:
		return LogData_InputSourceSwitchedInfo_case
	case *logData_RpcTimeoutWarning:
		return LogData_RpcTimeoutWarning_case
	case *logData_CannotWriteLogFile:
		return LogData_CannotWriteLogFile_case
	case *logData_PointCloudParsingFailureWarning:
		return LogData_PointCloudParsingFailureWarning_case
	case *logData_LidarIsDead:
		return LogData_LidarIsDead_case
	case *logData_LidarIsNotDeadAnymore:
		return LogData_LidarIsNotDeadAnymore_case
	case *logData_LidarIsObstructed:
		return LogData_LidarIsObstructed_case
	case *logData_LidarIsNotObstructedAnymore:
		return LogData_LidarIsNotObstructedAnymore_case
	case *logData_LidarIsTilted:
		return LogData_LidarIsTilted_case
	case *logData_LidarIsNotTiltedAnymore:
		return LogData_LidarIsNotTiltedAnymore_case
	case *logData_LidarHasBeenAutomaticallyRecalibrated:
		return LogData_LidarHasBeenAutomaticallyRecalibrated_case
	case *logData_ReceivedFirstDataForLidar:
		return LogData_ReceivedFirstDataForLidar_case
	case *logData_TerminationFailureError:
		return LogData_TerminationFailureError_case
	case *logData_FrameProcessingError:
		return LogData_FrameProcessingError_case
	case *logData_ThreadPoolUnavailableError:
		return LogData_ThreadPoolUnavailableError_case
	case *logData_InvalidArgument:
		return LogData_InvalidArgument_case
	case *logData_ComponentInitializationFailureFatal:
		return LogData_ComponentInitializationFailureFatal_case
	case *logData_UnhandledEnumCaseError:
		return LogData_UnhandledEnumCaseError_case
	case *logData_BagEmptyError:
		return LogData_BagEmptyError_case
	case *logData_DiscardingDataError:
		return LogData_DiscardingDataError_case
	case *logData_DiscardingDataWarning:
		return LogData_DiscardingDataWarning_case
	case *logData_NothingToProcess:
		return LogData_NothingToProcess_case
	case *logData_InvalidComponentConfiguration:
		return LogData_InvalidComponentConfiguration_case
	case *logData_ChannelReceiverNotFoundWarning:
		return LogData_ChannelReceiverNotFoundWarning_case
	case *logData_ModelLoadFailure:
		return LogData_ModelLoadFailure_case
	case *logData_ModelExecutionFailureError:
		return LogData_ModelExecutionFailureError_case
	case *logData_ServiceReadyInfo:
		return LogData_ServiceReadyInfo_case
	case *logData_ModelPreparingInfo:
		return LogData_ModelPreparingInfo_case
	case *logData_ModelInitializedInfo:
		return LogData_ModelInitializedInfo_case
	case *logData_ModelInitializationFailureWarning:
		return LogData_ModelInitializationFailureWarning_case
	case *logData_RosSpinnerStoppedWarning:
		return LogData_RosSpinnerStoppedWarning_case
	case *logData_ActorSystemUnavailableError:
		return LogData_ActorSystemUnavailableError_case
	case *logData_ConfigNodeNotFoundError:
		return LogData_ConfigNodeNotFoundError_case
	case *logData_BagTimestampOutOfOrderError:
		return LogData_BagTimestampOutOfOrderError_case
	case *logData_BagReplayUnexpectedTimestampError:
		return LogData_BagReplayUnexpectedTimestampError_case
	case *logData_WebsocketClosedInfo:
		return LogData_WebsocketClosedInfo_case
	case *logData_WebsocketOpenedInfo:
		return LogData_WebsocketOpenedInfo_case
	case *logData_SubscriberDisconnectedInfo:
		return LogData_SubscriberDisconnectedInfo_case
	case *logData_ThreadPoolSlowingDownWarning:
		return LogData_ThreadPoolSlowingDownWarning_case
	case *logData_ThreadPoolNotRespondingWarning:
		return LogData_ThreadPoolNotRespondingWarning_case
	case *logData_ThreadPoolBrokenPromiseWarning:
		return LogData_ThreadPoolBrokenPromiseWarning_case
	case *logData_BoxFittingPointsBelowBaseWarning:
		return LogData_BoxFittingPointsBelowBaseWarning_case
	case *logData_FailedToRemoveStalePointsWarning:
		return LogData_FailedToRemoveStalePointsWarning_case
	case *logData_IrregularBroadcastingPeriodWarning:
		return LogData_IrregularBroadcastingPeriodWarning_case
	case *logData_ClustererPointsOutOfRangeWarning:
		return LogData_ClustererPointsOutOfRangeWarning_case
	case *logData_InternalError:
		return LogData_InternalError_case
	case *logData_InternalFatal:
		return LogData_InternalFatal_case
	case *logData_ServiceStartingInfo:
		return LogData_ServiceStartingInfo_case
	case *logData_ConfigNodeNotFoundFatal:
		return LogData_ConfigNodeNotFoundFatal_case
	case *logData_ServiceSetupError:
		return LogData_ServiceSetupError_case
	case *logData_FilesystemError:
		return LogData_FilesystemError_case
	case *logData_InvalidPresetWarning:
		return LogData_InvalidPresetWarning_case
	case *logData_WebsocketFailedClearPendingError:
		return LogData_WebsocketFailedClearPendingError_case
	case *logData_WebsocketFailedToStopError:
		return LogData_WebsocketFailedToStopError_case
	case *logData_WebsocketFailedToCreateError:
		return LogData_WebsocketFailedToCreateError_case
	case *logData_UnexpectedRpcError:
		return LogData_UnexpectedRpcError_case
	case *logData_LicensePollFailed:
		return LogData_LicensePollFailed_case
	case *logData_LicenseExpiredWarning:
		return LogData_LicenseExpiredWarning_case
	case *logData_LicenseUsageExceededWarning:
		return LogData_LicenseUsageExceededWarning_case
	case *logData_StaticThreadPoolSlowTaskWarning:
		return LogData_StaticThreadPoolSlowTaskWarning_case
	case *logData_RpcUnsupportedServiceWarning:
		return LogData_RpcUnsupportedServiceWarning_case
	case *logData_WebsocketHandlerProblem:
		return LogData_WebsocketHandlerProblem_case
	case *logData_WebsocketDeserializeError:
		return LogData_WebsocketDeserializeError_case
	case *logData_WebsocketExpiredRpcEndpointError:
		return LogData_WebsocketExpiredRpcEndpointError_case
	case *logData_WebsocketQueueOverloadedWarning:
		return LogData_WebsocketQueueOverloadedWarning_case
	case *logData_RpcFailedToNotifyWarning:
		return LogData_RpcFailedToNotifyWarning_case
	case *logData_ConfigSubscriptionFailedWarning:
		return LogData_ConfigSubscriptionFailedWarning_case
	case *logData_ThreadPoolClampedWorkersWarning:
		return LogData_ThreadPoolClampedWorkersWarning_case
	case *logData_StoppingHorusBagRecorderAlreadyStopped:
		return LogData_StoppingHorusBagRecorderAlreadyStopped_case
	case *logData_RecorderConfigUpdateWhileRunning:
		return LogData_RecorderConfigUpdateWhileRunning_case
	case *logData_ClampingDataWarning:
		return LogData_ClampingDataWarning_case
	case *logData_LidarIncompatibleValues:
		return LogData_LidarIncompatibleValues_case
	case *logData_CannotDetermineContainerIdError:
		return LogData_CannotDetermineContainerIdError_case
	case *logData_StartedLidarDriver:
		return LogData_StartedLidarDriver_case
	case *logData_CannotStartLidarDriver:
		return LogData_CannotStartLidarDriver_case
	case *logData_StoppedLidarDriver:
		return LogData_StoppedLidarDriver_case
	case *logData_CannotStopLidarDriver:
		return LogData_CannotStopLidarDriver_case
	case *logData_RestartedLidarDriver:
		return LogData_RestartedLidarDriver_case
	case *logData_CannotRestartLidarDriver:
		return LogData_CannotRestartLidarDriver_case
	case *logData_RemovedUnusedLidarDriver:
		return LogData_RemovedUnusedLidarDriver_case
	case *logData_CannotRemoveUnusedLidarDriver:
		return LogData_CannotRemoveUnusedLidarDriver_case
	case *logData_LidarDriverGcFailure:
		return LogData_LidarDriverGcFailure_case
	case *logData_IdSpaceExhausted:
		return LogData_IdSpaceExhausted_case
	case *logData_PreprocessingToPointAggregatorPointsSkipped:
		return LogData_PreprocessingToPointAggregatorPointsSkipped_case
	case *logData_MinMsgIntervalLessThanThreshold:
		return LogData_MinMsgIntervalLessThanThreshold_case
	case *logData_FailedToCleanupRosWarning:
		return LogData_FailedToCleanupRosWarning_case
	case *logData_RpcDisconnectedWarning:
		return LogData_RpcDisconnectedWarning_case
	case *logData_RpcUnhandledError:
		return LogData_RpcUnhandledError_case
	case *logData_TimeDiffOutOfRangeWarning:
		return LogData_TimeDiffOutOfRangeWarning_case
	case *logData_TensorrtLog:
		return LogData_TensorrtLog_case
	case *logData_BuildingTensorrtEngineInfo:
		return LogData_BuildingTensorrtEngineInfo_case
	case *logData_LoadingTensorrtEngineInfo:
		return LogData_LoadingTensorrtEngineInfo_case
	case *logData_CalibrationMapNotFound:
		return LogData_CalibrationMapNotFound_case
	case *logData_CalibrationMapNotValid:
		return LogData_CalibrationMapNotValid_case
	case *logData_CalibrationMapPathAlreadyExists:
		return LogData_CalibrationMapPathAlreadyExists_case
	case *logData_FailedToSaveCalibrationMap:
		return LogData_FailedToSaveCalibrationMap_case
	case *logData_FailedToRemoveCalibrationMap:
		return LogData_FailedToRemoveCalibrationMap_case
	case *logData_FailedToIterateInDirectory:
		return LogData_FailedToIterateInDirectory_case
	case *logData_MapBasedCalibrationWithoutMapLoading:
		return LogData_MapBasedCalibrationWithoutMapLoading_case
	case *logData_MapBasedCalibrationAlreadyRunning:
		return LogData_MapBasedCalibrationAlreadyRunning_case
	case *logData_CancelMapBasedCalibrationNotRunning:
		return LogData_CancelMapBasedCalibrationNotRunning_case
	case *logData_BagStreamNotFound:
		return LogData_BagStreamNotFound_case
	case *logData_EvaluationBagStartedInfo:
		return LogData_EvaluationBagStartedInfo_case
	case *logData_EvaluationBagFinishedInfo:
		return LogData_EvaluationBagFinishedInfo_case
	case *logData_BagNotFound:
		return LogData_BagNotFound_case
	case *logData_BuildingPipelineInfo:
		return LogData_BuildingPipelineInfo_case
	case *logData_BagIsNotEvaluation:
		return LogData_BagIsNotEvaluation_case
	case *logData_HorusBagRunning:
		return LogData_HorusBagRunning_case
	case *logData_AutoGroundCalibrationWarning:
		return LogData_AutoGroundCalibrationWarning_case
	case *logData_AutoGroundCalibrationError:
		return LogData_AutoGroundCalibrationError_case
	case *logData_ObjectDetectorNotLoadedWarning:
		return LogData_ObjectDetectorNotLoadedWarning_case
	case *logData_CalibrationIsRunningError:
		return LogData_CalibrationIsRunningError_case
	case *logData_ModelInitInProgressInfo:
		return LogData_ModelInitInProgressInfo_case
	case *logData_RpcTimeoutWithResolutionWarning:
		return LogData_RpcTimeoutWithResolutionWarning_case
	case *logData_CalibrationWasCancelledInfo:
		return LogData_CalibrationWasCancelledInfo_case
	case *logData_CalibrationMapRecordingFailedToStart:
		return LogData_CalibrationMapRecordingFailedToStart_case
	case *logData_DetectionPipelineRequestedResetInfo:
		return LogData_DetectionPipelineRequestedResetInfo_case
	case *logData_PreprocessingServicePipelineUnavailable:
		return LogData_PreprocessingServicePipelineUnavailable_case
	case *logData_CircularRecordingDisabledWarning:
		return LogData_CircularRecordingDisabledWarning_case
	case *logData_SnapshotAlreadyRunningWarning:
		return LogData_SnapshotAlreadyRunningWarning_case
	case *logData_ActiveProjectChangedInfo:
		return LogData_ActiveProjectChangedInfo_case
	case *logData_ProjectConfigUpdatedInfo:
		return LogData_ProjectConfigUpdatedInfo_case
	case *logData_InvalidLidarTimestamp:
		return LogData_InvalidLidarTimestamp_case
	case *logData_CalibrationAccumulatingPointsInfo:
		return LogData_CalibrationAccumulatingPointsInfo_case
	case *logData_SparseNoiseFilterUsageNonRotationalLidars:
		return LogData_SparseNoiseFilterUsageNonRotationalLidars_case
	case *logData_FileWriteWarning:
		return LogData_FileWriteWarning_case
	case *logData_LicenseForbiddenFeature:
		return LogData_LicenseForbiddenFeature_case
	case *logData_FailedToUpdateConfiguration:
		return LogData_FailedToUpdateConfiguration_case
	case *logData_ObstructionDetectorBadReferenceWarning:
		return LogData_ObstructionDetectorBadReferenceWarning_case
	case *logData_ProjectFileInvalidPermissionsError:
		return LogData_ProjectFileInvalidPermissionsError_case
	case *logData_PipelineSchedulerError:
		return LogData_PipelineSchedulerError_case
	case *logData_MultiLidarCalibrationWarning:
		return LogData_MultiLidarCalibrationWarning_case
	case *logData_MultiLidarCalibrationError:
		return LogData_MultiLidarCalibrationError_case
	case *logData_OldBagWarning:
		return LogData_OldBagWarning_case
	case *logData_UpgradingBagInfo:
		return LogData_UpgradingBagInfo_case
	case *logData_BagCalibrationSaveFailed:
		return LogData_BagCalibrationSaveFailed_case
	case *logData_BagUpgradeFailed:
		return LogData_BagUpgradeFailed_case
	case *logData_UnknownLidarError:
		return LogData_UnknownLidarError_case
	case *logData_InvalidPointCloudWarning:
		return LogData_InvalidPointCloudWarning_case
	case *logData_LidarIsDroppingPackets:
		return LogData_LidarIsDroppingPackets_case
	case *logData_RemovedInvalidLidarsFromConfigWarning:
		return LogData_RemovedInvalidLidarsFromConfigWarning_case
	case *logData_CalibrationMapRecordingFailed:
		return LogData_CalibrationMapRecordingFailed_case
	case *logData_DetectionNodeNotFoundError:
		return LogData_DetectionNodeNotFoundError_case
	case *logData_CreatedVersionBackupInfo:
		return LogData_CreatedVersionBackupInfo_case
	case *logData_PlyFileLoadFailedError:
		return LogData_PlyFileLoadFailedError_case
	case *logData_HesaiDriverLifecycle:
		return LogData_HesaiDriverLifecycle_case
	case *logData_HesaiDriverError:
		return LogData_HesaiDriverError_case
	case *logData_HesaiPacketProcessingFailed:
		return LogData_HesaiPacketProcessingFailed_case
	case *logData_HesaiCorrectionFileError:
		return LogData_HesaiCorrectionFileError_case
	case *logData_HesaiPacketStatistics:
		return LogData_HesaiPacketStatistics_case
	case *logData_PlyFileWriteFailedError:
		return LogData_PlyFileWriteFailedError_case
	case *logData_ProjectSaveError:
		return LogData_ProjectSaveError_case
	case *logData_SaveStaticEnvironmentSuccess:
		return LogData_SaveStaticEnvironmentSuccess_case
	case *logData_SaveStaticEnvironmentFailed:
		return LogData_SaveStaticEnvironmentFailed_case
	case *logData_LoadStaticEnvironmentSuccess:
		return LogData_LoadStaticEnvironmentSuccess_case
	case *logData_LoadStaticEnvironmentFailed:
		return LogData_LoadStaticEnvironmentFailed_case
	case *logData_AttemptToInjectInvalidLidarIdWarning:
		return LogData_AttemptToInjectInvalidLidarIdWarning_case
	case *logData_ResetBundledPacketDueToUnexpectedPacket:
		return LogData_ResetBundledPacketDueToUnexpectedPacket_case
	default:
		return LogData_Data_not_set_case
	}
}

type LogData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Data:
	Generic                                     *logs_pb.Generic
	Oom                                         *logs_pb.Oom
	RpcConnectionError                          *logs_pb.RpcConnectionError
	InvalidProjectName                          *logs_pb.InvalidProjectName
	ProjectNotFound                             *logs_pb.ProjectNotFound
	ProjectAlreadyExists                        *logs_pb.ProjectAlreadyExists
	InvalidConfiguration                        *logs_pb.InvalidConfiguration
	EntityNotFound                              *logs_pb.EntityNotFound
	ActiveProjectCannotBeDeleted                *logs_pb.ActiveProjectCannotBeDeleted
	RpcDisconnectionError                       *logs_pb.RpcDisconnectionError
	DroppedLogs                                 *logs_pb.DroppedLogs
	OpenedProject                               *logs_pb.OpenedProject
	CreatedProject                              *logs_pb.CreatedProject
	ConfigUnavailable                           *logs_pb.ConfigUnavailable
	InvalidRequest                              *logs_pb.InvalidRequest
	SanityCheckError                            *logs_pb.SanityCheckError
	BagFailedToOpen                             *logs_pb.BagFailedToOpen
	BagFailedToClose                            *logs_pb.BagFailedToClose
	BagConversionFailed                         *logs_pb.BagConversionFailed
	BagFailedToWrite                            *logs_pb.BagFailedToWrite
	CalibrationError                            *logs_pb.CalibrationError
	ProjectManagerFailedToStartRecording        *logs_pb.ProjectManagerFailedToStartRecording
	ProjectManagerFailedToStopRecording         *logs_pb.ProjectManagerFailedToStopRecording
	ServiceConnectionTimedOut                   *logs_pb.ServiceConnectionTimedOut
	BagRecorderAlreadyRunning                   *logs_pb.BagRecorderAlreadyRunning
	LicenseServerConnectionError                *logs_pb.LicenseServerConnectionError
	LicenseError                                *logs_pb.LicenseError
	LicenseNotFoundError                        *logs_pb.LicenseNotFoundError
	LicenseExpiredError                         *logs_pb.LicenseExpiredError
	LicenseExceededError                        *logs_pb.LicenseExceededError
	LicenseHostMachineError                     *logs_pb.LicenseHostMachineError
	LicensePrivilegeError                       *logs_pb.LicensePrivilegeError
	LicenseActiveInfo                           *logs_pb.LicenseActiveInfo
	MultipleLicensesWarning                     *logs_pb.MultipleLicensesWarning
	LicenseCurrentLicenseStatusInfo             *logs_pb.LicenseCurrentLicenseStatusInfo
	BagRecordingStoppedInfo                     *logs_pb.BagRecordingStoppedInfo
	BagRecordingFailedToStart                   *logs_pb.BagRecordingFailedToStart
	BagRecordingStartedInfo                     *logs_pb.BagRecordingStartedInfo
	ReplayRestartedInfo                         *logs_pb.ReplayRestartedInfo
	InputSourceChangeRequestedInfo              *logs_pb.InputSourceChangeRequestedInfo
	InputSourceSwitchedInfo                     *logs_pb.InputSourceSwitchedInfo
	RpcTimeoutWarning                           *logs_pb.RpcTimeoutWarning
	CannotWriteLogFile                          *logs_pb.CannotWriteLogFile
	PointCloudParsingFailureWarning             *logs_pb.PointCloudParsingFailureWarning
	LidarIsDead                                 *logs_pb.LidarIsDead
	LidarIsNotDeadAnymore                       *logs_pb.LidarIsNotDeadAnymore
	LidarIsObstructed                           *logs_pb.LidarIsObstructed
	LidarIsNotObstructedAnymore                 *logs_pb.LidarIsNotObstructedAnymore
	LidarIsTilted                               *logs_pb.LidarIsTilted
	LidarIsNotTiltedAnymore                     *logs_pb.LidarIsNotTiltedAnymore
	LidarHasBeenAutomaticallyRecalibrated       *logs_pb.LidarHasBeenAutomaticallyRecalibrated
	ReceivedFirstDataForLidar                   *logs_pb.ReceivedFirstDataForLidar
	TerminationFailureError                     *logs_pb.TerminationFailureError
	FrameProcessingError                        *logs_pb.FrameProcessingError
	ThreadPoolUnavailableError                  *logs_pb.ThreadPoolUnavailableError
	InvalidArgument                             *logs_pb.InvalidArgument
	ComponentInitializationFailureFatal         *logs_pb.ComponentInitializationFailureFatal
	UnhandledEnumCaseError                      *logs_pb.UnhandledEnumCaseError
	BagEmptyError                               *logs_pb.BagEmptyError
	DiscardingDataError                         *logs_pb.DiscardingDataError
	DiscardingDataWarning                       *logs_pb.DiscardingDataWarning
	NothingToProcess                            *logs_pb.NothingToProcess
	InvalidComponentConfiguration               *logs_pb.InvalidComponentConfiguration
	ChannelReceiverNotFoundWarning              *logs_pb.ChannelReceiverNotFoundWarning
	ModelLoadFailure                            *logs_pb.ModelLoadFailure
	ModelExecutionFailureError                  *logs_pb.ModelExecutionFailureError
	ServiceReadyInfo                            *logs_pb.ServiceReadyInfo
	ModelPreparingInfo                          *logs_pb.ModelPreparingInfo
	ModelInitializedInfo                        *logs_pb.ModelInitializedInfo
	ModelInitializationFailureWarning           *logs_pb.ModelInitializationFailureWarning
	RosSpinnerStoppedWarning                    *logs_pb.RosSpinnerStoppedWarning
	ActorSystemUnavailableError                 *logs_pb.ActorSystemUnavailableError
	ConfigNodeNotFoundError                     *logs_pb.ConfigNodeNotFoundError
	BagTimestampOutOfOrderError                 *logs_pb.BagTimestampOutOfOrderError
	BagReplayUnexpectedTimestampError           *logs_pb.BagReplayUnexpectedTimestampError
	WebsocketClosedInfo                         *logs_pb.WebsocketClosedInfo
	WebsocketOpenedInfo                         *logs_pb.WebsocketOpenedInfo
	SubscriberDisconnectedInfo                  *logs_pb.SubscriberDisconnectedInfo
	ThreadPoolSlowingDownWarning                *logs_pb.ThreadPoolSlowingDownWarning
	ThreadPoolNotRespondingWarning              *logs_pb.ThreadPoolNotRespondingWarning
	ThreadPoolBrokenPromiseWarning              *logs_pb.ThreadPoolBrokenPromiseWarning
	BoxFittingPointsBelowBaseWarning            *logs_pb.BoxFittingPointsBelowBaseWarning
	FailedToRemoveStalePointsWarning            *logs_pb.FailedToRemoveStalePointsWarning
	IrregularBroadcastingPeriodWarning          *logs_pb.IrregularBroadcastingPeriodWarning
	ClustererPointsOutOfRangeWarning            *logs_pb.ClustererPointsOutOfRangeWarning
	InternalError                               *logs_pb.InternalError
	InternalFatal                               *logs_pb.InternalFatal
	ServiceStartingInfo                         *logs_pb.ServiceStartingInfo
	ConfigNodeNotFoundFatal                     *logs_pb.ConfigNodeNotFoundFatal
	ServiceSetupError                           *logs_pb.ServiceSetupError
	FilesystemError                             *logs_pb.FilesystemError
	InvalidPresetWarning                        *logs_pb.InvalidPresetWarning
	WebsocketFailedClearPendingError            *logs_pb.WebsocketFailedClearPendingError
	WebsocketFailedToStopError                  *logs_pb.WebsocketFailedToStopError
	WebsocketFailedToCreateError                *logs_pb.WebsocketFailedToCreateError
	UnexpectedRpcError                          *logs_pb.UnexpectedRpcError
	LicensePollFailed                           *logs_pb.LicensePollFailed
	LicenseExpiredWarning                       *logs_pb.LicenseExpiredWarning
	LicenseUsageExceededWarning                 *logs_pb.LicenseUsageExceededWarning
	StaticThreadPoolSlowTaskWarning             *logs_pb.StaticThreadPoolSlowTaskWarning
	RpcUnsupportedServiceWarning                *logs_pb.RpcUnsupportedServiceWarning
	WebsocketHandlerProblem                     *logs_pb.WebsocketHandlerProblem
	WebsocketDeserializeError                   *logs_pb.WebsocketDeserializeError
	WebsocketExpiredRpcEndpointError            *logs_pb.WebsocketExpiredRpcEndpointError
	WebsocketQueueOverloadedWarning             *logs_pb.WebsocketQueueOverloadedWarning
	RpcFailedToNotifyWarning                    *logs_pb.RpcFailedToNotifyWarning
	ConfigSubscriptionFailedWarning             *logs_pb.ConfigSubscriptionFailedWarning
	ThreadPoolClampedWorkersWarning             *logs_pb.ThreadPoolClampedWorkersWarning
	StoppingHorusBagRecorderAlreadyStopped      *logs_pb.StoppingHorusBagRecorderAlreadyStopped
	RecorderConfigUpdateWhileRunning            *logs_pb.RecorderConfigUpdateWhileRunning
	ClampingDataWarning                         *logs_pb.ClampingDataWarning
	LidarIncompatibleValues                     *logs_pb.LidarIncompatibleValues
	CannotDetermineContainerIdError             *logs_pb.CannotDetermineContainerIdError
	StartedLidarDriver                          *logs_pb.StartedLidarDriver
	CannotStartLidarDriver                      *logs_pb.CannotStartLidarDriver
	StoppedLidarDriver                          *logs_pb.StoppedLidarDriver
	CannotStopLidarDriver                       *logs_pb.CannotStopLidarDriver
	RestartedLidarDriver                        *logs_pb.RestartedLidarDriver
	CannotRestartLidarDriver                    *logs_pb.CannotRestartLidarDriver
	RemovedUnusedLidarDriver                    *logs_pb.RemovedUnusedLidarDriver
	CannotRemoveUnusedLidarDriver               *logs_pb.CannotRemoveUnusedLidarDriver
	LidarDriverGcFailure                        *logs_pb.LidarDriverGcFailure
	IdSpaceExhausted                            *logs_pb.IdSpaceExhausted
	PreprocessingToPointAggregatorPointsSkipped *logs_pb.PreprocessingToPointAggregatorPointsSkipped
	MinMsgIntervalLessThanThreshold             *logs_pb.MinMsgIntervalLessThanThreshold
	FailedToCleanupRosWarning                   *logs_pb.FailedToCleanupRosWarning
	RpcDisconnectedWarning                      *logs_pb.RpcDisconnectedWarning
	RpcUnhandledError                           *logs_pb.RpcUnhandledError
	TimeDiffOutOfRangeWarning                   *logs_pb.TimeDiffOutOfRangeWarning
	TensorrtLog                                 *logs_pb.TensorrtLog
	BuildingTensorrtEngineInfo                  *logs_pb.BuildingTensorrtEngineInfo
	LoadingTensorrtEngineInfo                   *logs_pb.LoadingTensorrtEngineInfo
	CalibrationMapNotFound                      *logs_pb.CalibrationMapNotFound
	CalibrationMapNotValid                      *logs_pb.CalibrationMapNotValid
	CalibrationMapPathAlreadyExists             *logs_pb.CalibrationMapPathAlreadyExists
	FailedToSaveCalibrationMap                  *logs_pb.FailedToSaveCalibrationMap
	FailedToRemoveCalibrationMap                *logs_pb.FailedToRemoveCalibrationMap
	FailedToIterateInDirectory                  *logs_pb.FailedToIterateInDirectory
	MapBasedCalibrationWithoutMapLoading        *logs_pb.MapBasedCalibrationWithoutMapLoading
	MapBasedCalibrationAlreadyRunning           *logs_pb.MapBasedCalibrationAlreadyRunning
	CancelMapBasedCalibrationNotRunning         *logs_pb.CancelMapBasedCalibrationNotRunning
	BagStreamNotFound                           *logs_pb.BagStreamNotFound
	EvaluationBagStartedInfo                    *logs_pb.EvaluationBagStartedInfo
	EvaluationBagFinishedInfo                   *logs_pb.EvaluationBagFinishedInfo
	BagNotFound                                 *logs_pb.BagNotFound
	BuildingPipelineInfo                        *logs_pb.BuildingPipelineInfo
	BagIsNotEvaluation                          *logs_pb.BagIsNotEvaluation
	HorusBagRunning                             *logs_pb.HorusBagRunning
	AutoGroundCalibrationWarning                *logs_pb.AutoGroundCalibrationWarning
	AutoGroundCalibrationError                  *logs_pb.AutoGroundCalibrationError
	ObjectDetectorNotLoadedWarning              *logs_pb.ObjectDetectorNotLoadedWarning
	CalibrationIsRunningError                   *logs_pb.CalibrationIsRunningError
	ModelInitInProgressInfo                     *logs_pb.ModelInitInProgressInfo
	RpcTimeoutWithResolutionWarning             *logs_pb.RpcTimeoutWithResolutionWarning
	CalibrationWasCancelledInfo                 *logs_pb.CalibrationWasCancelledInfo
	CalibrationMapRecordingFailedToStart        *logs_pb.CalibrationMapRecordingFailedToStart
	DetectionPipelineRequestedResetInfo         *logs_pb.DetectionPipelineRequestedResetInfo
	PreprocessingServicePipelineUnavailable     *logs_pb.PreprocessingServicePipelineUnavailable
	CircularRecordingDisabledWarning            *logs_pb.CircularRecordingDisabledWarning
	SnapshotAlreadyRunningWarning               *logs_pb.SnapshotAlreadyRunningWarning
	ActiveProjectChangedInfo                    *logs_pb.ActiveProjectChangedInfo
	ProjectConfigUpdatedInfo                    *logs_pb.ProjectConfigUpdatedInfo
	InvalidLidarTimestamp                       *logs_pb.InvalidLidarTimestamp
	CalibrationAccumulatingPointsInfo           *logs_pb.CalibrationAccumulatingPointsInfo
	SparseNoiseFilterUsageNonRotationalLidars   *logs_pb.SparseNoiseFilterUsageNonRotationalLidars
	FileWriteWarning                            *logs_pb.FileWriteWarning
	LicenseForbiddenFeature                     *logs_pb.LicenseForbiddenFeature
	FailedToUpdateConfiguration                 *logs_pb.FailedToUpdateConfiguration
	ObstructionDetectorBadReferenceWarning      *logs_pb.ObstructionDetectorBadReferenceWarning
	ProjectFileInvalidPermissionsError          *logs_pb.ProjectFileInvalidPermissionsError
	PipelineSchedulerError                      *logs_pb.PipelineSchedulerError
	MultiLidarCalibrationWarning                *logs_pb.MultiLidarCalibrationWarning
	MultiLidarCalibrationError                  *logs_pb.MultiLidarCalibrationError
	OldBagWarning                               *logs_pb.OldBagWarning
	UpgradingBagInfo                            *logs_pb.UpgradingBagInfo
	BagCalibrationSaveFailed                    *logs_pb.BagCalibrationSaveFailed
	BagUpgradeFailed                            *logs_pb.BagUpgradeFailed
	UnknownLidarError                           *logs_pb.UnknownLidarError
	InvalidPointCloudWarning                    *logs_pb.InvalidPointCloudWarning
	LidarIsDroppingPackets                      *logs_pb.LidarIsDroppingPackets
	RemovedInvalidLidarsFromConfigWarning       *logs_pb.RemovedInvalidLidarsFromConfigWarning
	CalibrationMapRecordingFailed               *logs_pb.CalibrationMapRecordingFailed
	DetectionNodeNotFoundError                  *logs_pb.DetectionNodeNotFoundError
	CreatedVersionBackupInfo                    *logs_pb.CreatedVersionBackupInfo
	PlyFileLoadFailedError                      *logs_pb.PlyFileLoadFailedError
	HesaiDriverLifecycle                        *logs_pb.HesaiDriverLifecycle
	HesaiDriverError                            *logs_pb.HesaiDriverError
	HesaiPacketProcessingFailed                 *logs_pb.HesaiPacketProcessingFailed
	HesaiCorrectionFileError                    *logs_pb.HesaiCorrectionFileError
	HesaiPacketStatistics                       *logs_pb.HesaiPacketStatistics
	PlyFileWriteFailedError                     *logs_pb.PlyFileWriteFailedError
	ProjectSaveError                            *logs_pb.ProjectSaveError
	SaveStaticEnvironmentSuccess                *logs_pb.SaveStaticEnvironmentSuccess
	SaveStaticEnvironmentFailed                 *logs_pb.SaveStaticEnvironmentFailed
	LoadStaticEnvironmentSuccess                *logs_pb.LoadStaticEnvironmentSuccess
	LoadStaticEnvironmentFailed                 *logs_pb.LoadStaticEnvironmentFailed
	AttemptToInjectInvalidLidarIdWarning        *logs_pb.AttemptToInjectInvalidLidarIdWarning
	ResetBundledPacketDueToUnexpectedPacket     *logs_pb.ResetBundledPacketDueToUnexpectedPacket
	// -- end of xxx_hidden_Data
}

func (b0 LogData_builder) Build() *LogData {
	m0 := &LogData{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Generic != nil {
		x.xxx_hidden_Data = &logData_Generic{b.Generic}
	}
	if b.Oom != nil {
		x.xxx_hidden_Data = &logData_Oom{b.Oom}
	}
	if b.RpcConnectionError != nil {
		x.xxx_hidden_Data = &logData_RpcConnectionError{b.RpcConnectionError}
	}
	if b.InvalidProjectName != nil {
		x.xxx_hidden_Data = &logData_InvalidProjectName{b.InvalidProjectName}
	}
	if b.ProjectNotFound != nil {
		x.xxx_hidden_Data = &logData_ProjectNotFound{b.ProjectNotFound}
	}
	if b.ProjectAlreadyExists != nil {
		x.xxx_hidden_Data = &logData_ProjectAlreadyExists{b.ProjectAlreadyExists}
	}
	if b.InvalidConfiguration != nil {
		x.xxx_hidden_Data = &logData_InvalidConfiguration{b.InvalidConfiguration}
	}
	if b.EntityNotFound != nil {
		x.xxx_hidden_Data = &logData_EntityNotFound{b.EntityNotFound}
	}
	if b.ActiveProjectCannotBeDeleted != nil {
		x.xxx_hidden_Data = &logData_ActiveProjectCannotBeDeleted{b.ActiveProjectCannotBeDeleted}
	}
	if b.RpcDisconnectionError != nil {
		x.xxx_hidden_Data = &logData_RpcDisconnectionError{b.RpcDisconnectionError}
	}
	if b.DroppedLogs != nil {
		x.xxx_hidden_Data = &logData_DroppedLogs{b.DroppedLogs}
	}
	if b.OpenedProject != nil {
		x.xxx_hidden_Data = &logData_OpenedProject{b.OpenedProject}
	}
	if b.CreatedProject != nil {
		x.xxx_hidden_Data = &logData_CreatedProject{b.CreatedProject}
	}
	if b.ConfigUnavailable != nil {
		x.xxx_hidden_Data = &logData_ConfigUnavailable{b.ConfigUnavailable}
	}
	if b.InvalidRequest != nil {
		x.xxx_hidden_Data = &logData_InvalidRequest{b.InvalidRequest}
	}
	if b.SanityCheckError != nil {
		x.xxx_hidden_Data = &logData_SanityCheckError{b.SanityCheckError}
	}
	if b.BagFailedToOpen != nil {
		x.xxx_hidden_Data = &logData_BagFailedToOpen{b.BagFailedToOpen}
	}
	if b.BagFailedToClose != nil {
		x.xxx_hidden_Data = &logData_BagFailedToClose{b.BagFailedToClose}
	}
	if b.BagConversionFailed != nil {
		x.xxx_hidden_Data = &logData_BagConversionFailed{b.BagConversionFailed}
	}
	if b.BagFailedToWrite != nil {
		x.xxx_hidden_Data = &logData_BagFailedToWrite{b.BagFailedToWrite}
	}
	if b.CalibrationError != nil {
		x.xxx_hidden_Data = &logData_CalibrationError{b.CalibrationError}
	}
	if b.ProjectManagerFailedToStartRecording != nil {
		x.xxx_hidden_Data = &logData_ProjectManagerFailedToStartRecording{b.ProjectManagerFailedToStartRecording}
	}
	if b.ProjectManagerFailedToStopRecording != nil {
		x.xxx_hidden_Data = &logData_ProjectManagerFailedToStopRecording{b.ProjectManagerFailedToStopRecording}
	}
	if b.ServiceConnectionTimedOut != nil {
		x.xxx_hidden_Data = &logData_ServiceConnectionTimedOut{b.ServiceConnectionTimedOut}
	}
	if b.BagRecorderAlreadyRunning != nil {
		x.xxx_hidden_Data = &logData_BagRecorderAlreadyRunning{b.BagRecorderAlreadyRunning}
	}
	if b.LicenseServerConnectionError != nil {
		x.xxx_hidden_Data = &logData_LicenseServerConnectionError{b.LicenseServerConnectionError}
	}
	if b.LicenseError != nil {
		x.xxx_hidden_Data = &logData_LicenseError{b.LicenseError}
	}
	if b.LicenseNotFoundError != nil {
		x.xxx_hidden_Data = &logData_LicenseNotFoundError{b.LicenseNotFoundError}
	}
	if b.LicenseExpiredError != nil {
		x.xxx_hidden_Data = &logData_LicenseExpiredError{b.LicenseExpiredError}
	}
	if b.LicenseExceededError != nil {
		x.xxx_hidden_Data = &logData_LicenseExceededError{b.LicenseExceededError}
	}
	if b.LicenseHostMachineError != nil {
		x.xxx_hidden_Data = &logData_LicenseHostMachineError{b.LicenseHostMachineError}
	}
	if b.LicensePrivilegeError != nil {
		x.xxx_hidden_Data = &logData_LicensePrivilegeError{b.LicensePrivilegeError}
	}
	if b.LicenseActiveInfo != nil {
		x.xxx_hidden_Data = &logData_LicenseActiveInfo{b.LicenseActiveInfo}
	}
	if b.MultipleLicensesWarning != nil {
		x.xxx_hidden_Data = &logData_MultipleLicensesWarning{b.MultipleLicensesWarning}
	}
	if b.LicenseCurrentLicenseStatusInfo != nil {
		x.xxx_hidden_Data = &logData_LicenseCurrentLicenseStatusInfo{b.LicenseCurrentLicenseStatusInfo}
	}
	if b.BagRecordingStoppedInfo != nil {
		x.xxx_hidden_Data = &logData_BagRecordingStoppedInfo{b.BagRecordingStoppedInfo}
	}
	if b.BagRecordingFailedToStart != nil {
		x.xxx_hidden_Data = &logData_BagRecordingFailedToStart{b.BagRecordingFailedToStart}
	}
	if b.BagRecordingStartedInfo != nil {
		x.xxx_hidden_Data = &logData_BagRecordingStartedInfo{b.BagRecordingStartedInfo}
	}
	if b.ReplayRestartedInfo != nil {
		x.xxx_hidden_Data = &logData_ReplayRestartedInfo{b.ReplayRestartedInfo}
	}
	if b.InputSourceChangeRequestedInfo != nil {
		x.xxx_hidden_Data = &logData_InputSourceChangeRequestedInfo{b.InputSourceChangeRequestedInfo}
	}
	if b.InputSourceSwitchedInfo != nil {
		x.xxx_hidden_Data = &logData_InputSourceSwitchedInfo{b.InputSourceSwitchedInfo}
	}
	if b.RpcTimeoutWarning != nil {
		x.xxx_hidden_Data = &logData_RpcTimeoutWarning{b.RpcTimeoutWarning}
	}
	if b.CannotWriteLogFile != nil {
		x.xxx_hidden_Data = &logData_CannotWriteLogFile{b.CannotWriteLogFile}
	}
	if b.PointCloudParsingFailureWarning != nil {
		x.xxx_hidden_Data = &logData_PointCloudParsingFailureWarning{b.PointCloudParsingFailureWarning}
	}
	if b.LidarIsDead != nil {
		x.xxx_hidden_Data = &logData_LidarIsDead{b.LidarIsDead}
	}
	if b.LidarIsNotDeadAnymore != nil {
		x.xxx_hidden_Data = &logData_LidarIsNotDeadAnymore{b.LidarIsNotDeadAnymore}
	}
	if b.LidarIsObstructed != nil {
		x.xxx_hidden_Data = &logData_LidarIsObstructed{b.LidarIsObstructed}
	}
	if b.LidarIsNotObstructedAnymore != nil {
		x.xxx_hidden_Data = &logData_LidarIsNotObstructedAnymore{b.LidarIsNotObstructedAnymore}
	}
	if b.LidarIsTilted != nil {
		x.xxx_hidden_Data = &logData_LidarIsTilted{b.LidarIsTilted}
	}
	if b.LidarIsNotTiltedAnymore != nil {
		x.xxx_hidden_Data = &logData_LidarIsNotTiltedAnymore{b.LidarIsNotTiltedAnymore}
	}
	if b.LidarHasBeenAutomaticallyRecalibrated != nil {
		x.xxx_hidden_Data = &logData_LidarHasBeenAutomaticallyRecalibrated{b.LidarHasBeenAutomaticallyRecalibrated}
	}
	if b.ReceivedFirstDataForLidar != nil {
		x.xxx_hidden_Data = &logData_ReceivedFirstDataForLidar{b.ReceivedFirstDataForLidar}
	}
	if b.TerminationFailureError != nil {
		x.xxx_hidden_Data = &logData_TerminationFailureError{b.TerminationFailureError}
	}
	if b.FrameProcessingError != nil {
		x.xxx_hidden_Data = &logData_FrameProcessingError{b.FrameProcessingError}
	}
	if b.ThreadPoolUnavailableError != nil {
		x.xxx_hidden_Data = &logData_ThreadPoolUnavailableError{b.ThreadPoolUnavailableError}
	}
	if b.InvalidArgument != nil {
		x.xxx_hidden_Data = &logData_InvalidArgument{b.InvalidArgument}
	}
	if b.ComponentInitializationFailureFatal != nil {
		x.xxx_hidden_Data = &logData_ComponentInitializationFailureFatal{b.ComponentInitializationFailureFatal}
	}
	if b.UnhandledEnumCaseError != nil {
		x.xxx_hidden_Data = &logData_UnhandledEnumCaseError{b.UnhandledEnumCaseError}
	}
	if b.BagEmptyError != nil {
		x.xxx_hidden_Data = &logData_BagEmptyError{b.BagEmptyError}
	}
	if b.DiscardingDataError != nil {
		x.xxx_hidden_Data = &logData_DiscardingDataError{b.DiscardingDataError}
	}
	if b.DiscardingDataWarning != nil {
		x.xxx_hidden_Data = &logData_DiscardingDataWarning{b.DiscardingDataWarning}
	}
	if b.NothingToProcess != nil {
		x.xxx_hidden_Data = &logData_NothingToProcess{b.NothingToProcess}
	}
	if b.InvalidComponentConfiguration != nil {
		x.xxx_hidden_Data = &logData_InvalidComponentConfiguration{b.InvalidComponentConfiguration}
	}
	if b.ChannelReceiverNotFoundWarning != nil {
		x.xxx_hidden_Data = &logData_ChannelReceiverNotFoundWarning{b.ChannelReceiverNotFoundWarning}
	}
	if b.ModelLoadFailure != nil {
		x.xxx_hidden_Data = &logData_ModelLoadFailure{b.ModelLoadFailure}
	}
	if b.ModelExecutionFailureError != nil {
		x.xxx_hidden_Data = &logData_ModelExecutionFailureError{b.ModelExecutionFailureError}
	}
	if b.ServiceReadyInfo != nil {
		x.xxx_hidden_Data = &logData_ServiceReadyInfo{b.ServiceReadyInfo}
	}
	if b.ModelPreparingInfo != nil {
		x.xxx_hidden_Data = &logData_ModelPreparingInfo{b.ModelPreparingInfo}
	}
	if b.ModelInitializedInfo != nil {
		x.xxx_hidden_Data = &logData_ModelInitializedInfo{b.ModelInitializedInfo}
	}
	if b.ModelInitializationFailureWarning != nil {
		x.xxx_hidden_Data = &logData_ModelInitializationFailureWarning{b.ModelInitializationFailureWarning}
	}
	if b.RosSpinnerStoppedWarning != nil {
		x.xxx_hidden_Data = &logData_RosSpinnerStoppedWarning{b.RosSpinnerStoppedWarning}
	}
	if b.ActorSystemUnavailableError != nil {
		x.xxx_hidden_Data = &logData_ActorSystemUnavailableError{b.ActorSystemUnavailableError}
	}
	if b.ConfigNodeNotFoundError != nil {
		x.xxx_hidden_Data = &logData_ConfigNodeNotFoundError{b.ConfigNodeNotFoundError}
	}
	if b.BagTimestampOutOfOrderError != nil {
		x.xxx_hidden_Data = &logData_BagTimestampOutOfOrderError{b.BagTimestampOutOfOrderError}
	}
	if b.BagReplayUnexpectedTimestampError != nil {
		x.xxx_hidden_Data = &logData_BagReplayUnexpectedTimestampError{b.BagReplayUnexpectedTimestampError}
	}
	if b.WebsocketClosedInfo != nil {
		x.xxx_hidden_Data = &logData_WebsocketClosedInfo{b.WebsocketClosedInfo}
	}
	if b.WebsocketOpenedInfo != nil {
		x.xxx_hidden_Data = &logData_WebsocketOpenedInfo{b.WebsocketOpenedInfo}
	}
	if b.SubscriberDisconnectedInfo != nil {
		x.xxx_hidden_Data = &logData_SubscriberDisconnectedInfo{b.SubscriberDisconnectedInfo}
	}
	if b.ThreadPoolSlowingDownWarning != nil {
		x.xxx_hidden_Data = &logData_ThreadPoolSlowingDownWarning{b.ThreadPoolSlowingDownWarning}
	}
	if b.ThreadPoolNotRespondingWarning != nil {
		x.xxx_hidden_Data = &logData_ThreadPoolNotRespondingWarning{b.ThreadPoolNotRespondingWarning}
	}
	if b.ThreadPoolBrokenPromiseWarning != nil {
		x.xxx_hidden_Data = &logData_ThreadPoolBrokenPromiseWarning{b.ThreadPoolBrokenPromiseWarning}
	}
	if b.BoxFittingPointsBelowBaseWarning != nil {
		x.xxx_hidden_Data = &logData_BoxFittingPointsBelowBaseWarning{b.BoxFittingPointsBelowBaseWarning}
	}
	if b.FailedToRemoveStalePointsWarning != nil {
		x.xxx_hidden_Data = &logData_FailedToRemoveStalePointsWarning{b.FailedToRemoveStalePointsWarning}
	}
	if b.IrregularBroadcastingPeriodWarning != nil {
		x.xxx_hidden_Data = &logData_IrregularBroadcastingPeriodWarning{b.IrregularBroadcastingPeriodWarning}
	}
	if b.ClustererPointsOutOfRangeWarning != nil {
		x.xxx_hidden_Data = &logData_ClustererPointsOutOfRangeWarning{b.ClustererPointsOutOfRangeWarning}
	}
	if b.InternalError != nil {
		x.xxx_hidden_Data = &logData_InternalError{b.InternalError}
	}
	if b.InternalFatal != nil {
		x.xxx_hidden_Data = &logData_InternalFatal{b.InternalFatal}
	}
	if b.ServiceStartingInfo != nil {
		x.xxx_hidden_Data = &logData_ServiceStartingInfo{b.ServiceStartingInfo}
	}
	if b.ConfigNodeNotFoundFatal != nil {
		x.xxx_hidden_Data = &logData_ConfigNodeNotFoundFatal{b.ConfigNodeNotFoundFatal}
	}
	if b.ServiceSetupError != nil {
		x.xxx_hidden_Data = &logData_ServiceSetupError{b.ServiceSetupError}
	}
	if b.FilesystemError != nil {
		x.xxx_hidden_Data = &logData_FilesystemError{b.FilesystemError}
	}
	if b.InvalidPresetWarning != nil {
		x.xxx_hidden_Data = &logData_InvalidPresetWarning{b.InvalidPresetWarning}
	}
	if b.WebsocketFailedClearPendingError != nil {
		x.xxx_hidden_Data = &logData_WebsocketFailedClearPendingError{b.WebsocketFailedClearPendingError}
	}
	if b.WebsocketFailedToStopError != nil {
		x.xxx_hidden_Data = &logData_WebsocketFailedToStopError{b.WebsocketFailedToStopError}
	}
	if b.WebsocketFailedToCreateError != nil {
		x.xxx_hidden_Data = &logData_WebsocketFailedToCreateError{b.WebsocketFailedToCreateError}
	}
	if b.UnexpectedRpcError != nil {
		x.xxx_hidden_Data = &logData_UnexpectedRpcError{b.UnexpectedRpcError}
	}
	if b.LicensePollFailed != nil {
		x.xxx_hidden_Data = &logData_LicensePollFailed{b.LicensePollFailed}
	}
	if b.LicenseExpiredWarning != nil {
		x.xxx_hidden_Data = &logData_LicenseExpiredWarning{b.LicenseExpiredWarning}
	}
	if b.LicenseUsageExceededWarning != nil {
		x.xxx_hidden_Data = &logData_LicenseUsageExceededWarning{b.LicenseUsageExceededWarning}
	}
	if b.StaticThreadPoolSlowTaskWarning != nil {
		x.xxx_hidden_Data = &logData_StaticThreadPoolSlowTaskWarning{b.StaticThreadPoolSlowTaskWarning}
	}
	if b.RpcUnsupportedServiceWarning != nil {
		x.xxx_hidden_Data = &logData_RpcUnsupportedServiceWarning{b.RpcUnsupportedServiceWarning}
	}
	if b.WebsocketHandlerProblem != nil {
		x.xxx_hidden_Data = &logData_WebsocketHandlerProblem{b.WebsocketHandlerProblem}
	}
	if b.WebsocketDeserializeError != nil {
		x.xxx_hidden_Data = &logData_WebsocketDeserializeError{b.WebsocketDeserializeError}
	}
	if b.WebsocketExpiredRpcEndpointError != nil {
		x.xxx_hidden_Data = &logData_WebsocketExpiredRpcEndpointError{b.WebsocketExpiredRpcEndpointError}
	}
	if b.WebsocketQueueOverloadedWarning != nil {
		x.xxx_hidden_Data = &logData_WebsocketQueueOverloadedWarning{b.WebsocketQueueOverloadedWarning}
	}
	if b.RpcFailedToNotifyWarning != nil {
		x.xxx_hidden_Data = &logData_RpcFailedToNotifyWarning{b.RpcFailedToNotifyWarning}
	}
	if b.ConfigSubscriptionFailedWarning != nil {
		x.xxx_hidden_Data = &logData_ConfigSubscriptionFailedWarning{b.ConfigSubscriptionFailedWarning}
	}
	if b.ThreadPoolClampedWorkersWarning != nil {
		x.xxx_hidden_Data = &logData_ThreadPoolClampedWorkersWarning{b.ThreadPoolClampedWorkersWarning}
	}
	if b.StoppingHorusBagRecorderAlreadyStopped != nil {
		x.xxx_hidden_Data = &logData_StoppingHorusBagRecorderAlreadyStopped{b.StoppingHorusBagRecorderAlreadyStopped}
	}
	if b.RecorderConfigUpdateWhileRunning != nil {
		x.xxx_hidden_Data = &logData_RecorderConfigUpdateWhileRunning{b.RecorderConfigUpdateWhileRunning}
	}
	if b.ClampingDataWarning != nil {
		x.xxx_hidden_Data = &logData_ClampingDataWarning{b.ClampingDataWarning}
	}
	if b.LidarIncompatibleValues != nil {
		x.xxx_hidden_Data = &logData_LidarIncompatibleValues{b.LidarIncompatibleValues}
	}
	if b.CannotDetermineContainerIdError != nil {
		x.xxx_hidden_Data = &logData_CannotDetermineContainerIdError{b.CannotDetermineContainerIdError}
	}
	if b.StartedLidarDriver != nil {
		x.xxx_hidden_Data = &logData_StartedLidarDriver{b.StartedLidarDriver}
	}
	if b.CannotStartLidarDriver != nil {
		x.xxx_hidden_Data = &logData_CannotStartLidarDriver{b.CannotStartLidarDriver}
	}
	if b.StoppedLidarDriver != nil {
		x.xxx_hidden_Data = &logData_StoppedLidarDriver{b.StoppedLidarDriver}
	}
	if b.CannotStopLidarDriver != nil {
		x.xxx_hidden_Data = &logData_CannotStopLidarDriver{b.CannotStopLidarDriver}
	}
	if b.RestartedLidarDriver != nil {
		x.xxx_hidden_Data = &logData_RestartedLidarDriver{b.RestartedLidarDriver}
	}
	if b.CannotRestartLidarDriver != nil {
		x.xxx_hidden_Data = &logData_CannotRestartLidarDriver{b.CannotRestartLidarDriver}
	}
	if b.RemovedUnusedLidarDriver != nil {
		x.xxx_hidden_Data = &logData_RemovedUnusedLidarDriver{b.RemovedUnusedLidarDriver}
	}
	if b.CannotRemoveUnusedLidarDriver != nil {
		x.xxx_hidden_Data = &logData_CannotRemoveUnusedLidarDriver{b.CannotRemoveUnusedLidarDriver}
	}
	if b.LidarDriverGcFailure != nil {
		x.xxx_hidden_Data = &logData_LidarDriverGcFailure{b.LidarDriverGcFailure}
	}
	if b.IdSpaceExhausted != nil {
		x.xxx_hidden_Data = &logData_IdSpaceExhausted{b.IdSpaceExhausted}
	}
	if b.PreprocessingToPointAggregatorPointsSkipped != nil {
		x.xxx_hidden_Data = &logData_PreprocessingToPointAggregatorPointsSkipped{b.PreprocessingToPointAggregatorPointsSkipped}
	}
	if b.MinMsgIntervalLessThanThreshold != nil {
		x.xxx_hidden_Data = &logData_MinMsgIntervalLessThanThreshold{b.MinMsgIntervalLessThanThreshold}
	}
	if b.FailedToCleanupRosWarning != nil {
		x.xxx_hidden_Data = &logData_FailedToCleanupRosWarning{b.FailedToCleanupRosWarning}
	}
	if b.RpcDisconnectedWarning != nil {
		x.xxx_hidden_Data = &logData_RpcDisconnectedWarning{b.RpcDisconnectedWarning}
	}
	if b.RpcUnhandledError != nil {
		x.xxx_hidden_Data = &logData_RpcUnhandledError{b.RpcUnhandledError}
	}
	if b.TimeDiffOutOfRangeWarning != nil {
		x.xxx_hidden_Data = &logData_TimeDiffOutOfRangeWarning{b.TimeDiffOutOfRangeWarning}
	}
	if b.TensorrtLog != nil {
		x.xxx_hidden_Data = &logData_TensorrtLog{b.TensorrtLog}
	}
	if b.BuildingTensorrtEngineInfo != nil {
		x.xxx_hidden_Data = &logData_BuildingTensorrtEngineInfo{b.BuildingTensorrtEngineInfo}
	}
	if b.LoadingTensorrtEngineInfo != nil {
		x.xxx_hidden_Data = &logData_LoadingTensorrtEngineInfo{b.LoadingTensorrtEngineInfo}
	}
	if b.CalibrationMapNotFound != nil {
		x.xxx_hidden_Data = &logData_CalibrationMapNotFound{b.CalibrationMapNotFound}
	}
	if b.CalibrationMapNotValid != nil {
		x.xxx_hidden_Data = &logData_CalibrationMapNotValid{b.CalibrationMapNotValid}
	}
	if b.CalibrationMapPathAlreadyExists != nil {
		x.xxx_hidden_Data = &logData_CalibrationMapPathAlreadyExists{b.CalibrationMapPathAlreadyExists}
	}
	if b.FailedToSaveCalibrationMap != nil {
		x.xxx_hidden_Data = &logData_FailedToSaveCalibrationMap{b.FailedToSaveCalibrationMap}
	}
	if b.FailedToRemoveCalibrationMap != nil {
		x.xxx_hidden_Data = &logData_FailedToRemoveCalibrationMap{b.FailedToRemoveCalibrationMap}
	}
	if b.FailedToIterateInDirectory != nil {
		x.xxx_hidden_Data = &logData_FailedToIterateInDirectory{b.FailedToIterateInDirectory}
	}
	if b.MapBasedCalibrationWithoutMapLoading != nil {
		x.xxx_hidden_Data = &logData_MapBasedCalibrationWithoutMapLoading{b.MapBasedCalibrationWithoutMapLoading}
	}
	if b.MapBasedCalibrationAlreadyRunning != nil {
		x.xxx_hidden_Data = &logData_MapBasedCalibrationAlreadyRunning{b.MapBasedCalibrationAlreadyRunning}
	}
	if b.CancelMapBasedCalibrationNotRunning != nil {
		x.xxx_hidden_Data = &logData_CancelMapBasedCalibrationNotRunning{b.CancelMapBasedCalibrationNotRunning}
	}
	if b.BagStreamNotFound != nil {
		x.xxx_hidden_Data = &logData_BagStreamNotFound{b.BagStreamNotFound}
	}
	if b.EvaluationBagStartedInfo != nil {
		x.xxx_hidden_Data = &logData_EvaluationBagStartedInfo{b.EvaluationBagStartedInfo}
	}
	if b.EvaluationBagFinishedInfo != nil {
		x.xxx_hidden_Data = &logData_EvaluationBagFinishedInfo{b.EvaluationBagFinishedInfo}
	}
	if b.BagNotFound != nil {
		x.xxx_hidden_Data = &logData_BagNotFound{b.BagNotFound}
	}
	if b.BuildingPipelineInfo != nil {
		x.xxx_hidden_Data = &logData_BuildingPipelineInfo{b.BuildingPipelineInfo}
	}
	if b.BagIsNotEvaluation != nil {
		x.xxx_hidden_Data = &logData_BagIsNotEvaluation{b.BagIsNotEvaluation}
	}
	if b.HorusBagRunning != nil {
		x.xxx_hidden_Data = &logData_HorusBagRunning{b.HorusBagRunning}
	}
	if b.AutoGroundCalibrationWarning != nil {
		x.xxx_hidden_Data = &logData_AutoGroundCalibrationWarning{b.AutoGroundCalibrationWarning}
	}
	if b.AutoGroundCalibrationError != nil {
		x.xxx_hidden_Data = &logData_AutoGroundCalibrationError{b.AutoGroundCalibrationError}
	}
	if b.ObjectDetectorNotLoadedWarning != nil {
		x.xxx_hidden_Data = &logData_ObjectDetectorNotLoadedWarning{b.ObjectDetectorNotLoadedWarning}
	}
	if b.CalibrationIsRunningError != nil {
		x.xxx_hidden_Data = &logData_CalibrationIsRunningError{b.CalibrationIsRunningError}
	}
	if b.ModelInitInProgressInfo != nil {
		x.xxx_hidden_Data = &logData_ModelInitInProgressInfo{b.ModelInitInProgressInfo}
	}
	if b.RpcTimeoutWithResolutionWarning != nil {
		x.xxx_hidden_Data = &logData_RpcTimeoutWithResolutionWarning{b.RpcTimeoutWithResolutionWarning}
	}
	if b.CalibrationWasCancelledInfo != nil {
		x.xxx_hidden_Data = &logData_CalibrationWasCancelledInfo{b.CalibrationWasCancelledInfo}
	}
	if b.CalibrationMapRecordingFailedToStart != nil {
		x.xxx_hidden_Data = &logData_CalibrationMapRecordingFailedToStart{b.CalibrationMapRecordingFailedToStart}
	}
	if b.DetectionPipelineRequestedResetInfo != nil {
		x.xxx_hidden_Data = &logData_DetectionPipelineRequestedResetInfo{b.DetectionPipelineRequestedResetInfo}
	}
	if b.PreprocessingServicePipelineUnavailable != nil {
		x.xxx_hidden_Data = &logData_PreprocessingServicePipelineUnavailable{b.PreprocessingServicePipelineUnavailable}
	}
	if b.CircularRecordingDisabledWarning != nil {
		x.xxx_hidden_Data = &logData_CircularRecordingDisabledWarning{b.CircularRecordingDisabledWarning}
	}
	if b.SnapshotAlreadyRunningWarning != nil {
		x.xxx_hidden_Data = &logData_SnapshotAlreadyRunningWarning{b.SnapshotAlreadyRunningWarning}
	}
	if b.ActiveProjectChangedInfo != nil {
		x.xxx_hidden_Data = &logData_ActiveProjectChangedInfo{b.ActiveProjectChangedInfo}
	}
	if b.ProjectConfigUpdatedInfo != nil {
		x.xxx_hidden_Data = &logData_ProjectConfigUpdatedInfo{b.ProjectConfigUpdatedInfo}
	}
	if b.InvalidLidarTimestamp != nil {
		x.xxx_hidden_Data = &logData_InvalidLidarTimestamp{b.InvalidLidarTimestamp}
	}
	if b.CalibrationAccumulatingPointsInfo != nil {
		x.xxx_hidden_Data = &logData_CalibrationAccumulatingPointsInfo{b.CalibrationAccumulatingPointsInfo}
	}
	if b.SparseNoiseFilterUsageNonRotationalLidars != nil {
		x.xxx_hidden_Data = &logData_SparseNoiseFilterUsageNonRotationalLidars{b.SparseNoiseFilterUsageNonRotationalLidars}
	}
	if b.FileWriteWarning != nil {
		x.xxx_hidden_Data = &logData_FileWriteWarning{b.FileWriteWarning}
	}
	if b.LicenseForbiddenFeature != nil {
		x.xxx_hidden_Data = &logData_LicenseForbiddenFeature{b.LicenseForbiddenFeature}
	}
	if b.FailedToUpdateConfiguration != nil {
		x.xxx_hidden_Data = &logData_FailedToUpdateConfiguration{b.FailedToUpdateConfiguration}
	}
	if b.ObstructionDetectorBadReferenceWarning != nil {
		x.xxx_hidden_Data = &logData_ObstructionDetectorBadReferenceWarning{b.ObstructionDetectorBadReferenceWarning}
	}
	if b.ProjectFileInvalidPermissionsError != nil {
		x.xxx_hidden_Data = &logData_ProjectFileInvalidPermissionsError{b.ProjectFileInvalidPermissionsError}
	}
	if b.PipelineSchedulerError != nil {
		x.xxx_hidden_Data = &logData_PipelineSchedulerError{b.PipelineSchedulerError}
	}
	if b.MultiLidarCalibrationWarning != nil {
		x.xxx_hidden_Data = &logData_MultiLidarCalibrationWarning{b.MultiLidarCalibrationWarning}
	}
	if b.MultiLidarCalibrationError != nil {
		x.xxx_hidden_Data = &logData_MultiLidarCalibrationError{b.MultiLidarCalibrationError}
	}
	if b.OldBagWarning != nil {
		x.xxx_hidden_Data = &logData_OldBagWarning{b.OldBagWarning}
	}
	if b.UpgradingBagInfo != nil {
		x.xxx_hidden_Data = &logData_UpgradingBagInfo{b.UpgradingBagInfo}
	}
	if b.BagCalibrationSaveFailed != nil {
		x.xxx_hidden_Data = &logData_BagCalibrationSaveFailed{b.BagCalibrationSaveFailed}
	}
	if b.BagUpgradeFailed != nil {
		x.xxx_hidden_Data = &logData_BagUpgradeFailed{b.BagUpgradeFailed}
	}
	if b.UnknownLidarError != nil {
		x.xxx_hidden_Data = &logData_UnknownLidarError{b.UnknownLidarError}
	}
	if b.InvalidPointCloudWarning != nil {
		x.xxx_hidden_Data = &logData_InvalidPointCloudWarning{b.InvalidPointCloudWarning}
	}
	if b.LidarIsDroppingPackets != nil {
		x.xxx_hidden_Data = &logData_LidarIsDroppingPackets{b.LidarIsDroppingPackets}
	}
	if b.RemovedInvalidLidarsFromConfigWarning != nil {
		x.xxx_hidden_Data = &logData_RemovedInvalidLidarsFromConfigWarning{b.RemovedInvalidLidarsFromConfigWarning}
	}
	if b.CalibrationMapRecordingFailed != nil {
		x.xxx_hidden_Data = &logData_CalibrationMapRecordingFailed{b.CalibrationMapRecordingFailed}
	}
	if b.DetectionNodeNotFoundError != nil {
		x.xxx_hidden_Data = &logData_DetectionNodeNotFoundError{b.DetectionNodeNotFoundError}
	}
	if b.CreatedVersionBackupInfo != nil {
		x.xxx_hidden_Data = &logData_CreatedVersionBackupInfo{b.CreatedVersionBackupInfo}
	}
	if b.PlyFileLoadFailedError != nil {
		x.xxx_hidden_Data = &logData_PlyFileLoadFailedError{b.PlyFileLoadFailedError}
	}
	if b.HesaiDriverLifecycle != nil {
		x.xxx_hidden_Data = &logData_HesaiDriverLifecycle{b.HesaiDriverLifecycle}
	}
	if b.HesaiDriverError != nil {
		x.xxx_hidden_Data = &logData_HesaiDriverError{b.HesaiDriverError}
	}
	if b.HesaiPacketProcessingFailed != nil {
		x.xxx_hidden_Data = &logData_HesaiPacketProcessingFailed{b.HesaiPacketProcessingFailed}
	}
	if b.HesaiCorrectionFileError != nil {
		x.xxx_hidden_Data = &logData_HesaiCorrectionFileError{b.HesaiCorrectionFileError}
	}
	if b.HesaiPacketStatistics != nil {
		x.xxx_hidden_Data = &logData_HesaiPacketStatistics{b.HesaiPacketStatistics}
	}
	if b.PlyFileWriteFailedError != nil {
		x.xxx_hidden_Data = &logData_PlyFileWriteFailedError{b.PlyFileWriteFailedError}
	}
	if b.ProjectSaveError != nil {
		x.xxx_hidden_Data = &logData_ProjectSaveError{b.ProjectSaveError}
	}
	if b.SaveStaticEnvironmentSuccess != nil {
		x.xxx_hidden_Data = &logData_SaveStaticEnvironmentSuccess{b.SaveStaticEnvironmentSuccess}
	}
	if b.SaveStaticEnvironmentFailed != nil {
		x.xxx_hidden_Data = &logData_SaveStaticEnvironmentFailed{b.SaveStaticEnvironmentFailed}
	}
	if b.LoadStaticEnvironmentSuccess != nil {
		x.xxx_hidden_Data = &logData_LoadStaticEnvironmentSuccess{b.LoadStaticEnvironmentSuccess}
	}
	if b.LoadStaticEnvironmentFailed != nil {
		x.xxx_hidden_Data = &logData_LoadStaticEnvironmentFailed{b.LoadStaticEnvironmentFailed}
	}
	if b.AttemptToInjectInvalidLidarIdWarning != nil {
		x.xxx_hidden_Data = &logData_AttemptToInjectInvalidLidarIdWarning{b.AttemptToInjectInvalidLidarIdWarning}
	}
	if b.ResetBundledPacketDueToUnexpectedPacket != nil {
		x.xxx_hidden_Data = &logData_ResetBundledPacketDueToUnexpectedPacket{b.ResetBundledPacketDueToUnexpectedPacket}
	}
	return m0
}

type case_LogData_Data protoreflect.FieldNumber

func (x case_LogData_Data) String() string {
	md := file_horus_pb_logs_message_proto_msgTypes[1].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isLogData_Data interface {
	isLogData_Data()
}

type logData_Generic struct {
	Generic *logs_pb.Generic `protobuf:"bytes,1,opt,name=generic,proto3,oneof"`
}

type logData_Oom struct {
	Oom *logs_pb.Oom `protobuf:"bytes,2,opt,name=oom,proto3,oneof"`
}

type logData_RpcConnectionError struct {
	RpcConnectionError *logs_pb.RpcConnectionError `protobuf:"bytes,3,opt,name=rpc_connection_error,json=rpcConnectionError,proto3,oneof"`
}

type logData_InvalidProjectName struct {
	InvalidProjectName *logs_pb.InvalidProjectName `protobuf:"bytes,4,opt,name=invalid_project_name,json=invalidProjectName,proto3,oneof"`
}

type logData_ProjectNotFound struct {
	ProjectNotFound *logs_pb.ProjectNotFound `protobuf:"bytes,5,opt,name=project_not_found,json=projectNotFound,proto3,oneof"`
}

type logData_ProjectAlreadyExists struct {
	ProjectAlreadyExists *logs_pb.ProjectAlreadyExists `protobuf:"bytes,6,opt,name=project_already_exists,json=projectAlreadyExists,proto3,oneof"`
}

type logData_InvalidConfiguration struct {
	InvalidConfiguration *logs_pb.InvalidConfiguration `protobuf:"bytes,7,opt,name=invalid_configuration,json=invalidConfiguration,proto3,oneof"`
}

type logData_EntityNotFound struct {
	EntityNotFound *logs_pb.EntityNotFound `protobuf:"bytes,8,opt,name=entity_not_found,json=entityNotFound,proto3,oneof"`
}

type logData_ActiveProjectCannotBeDeleted struct {
	ActiveProjectCannotBeDeleted *logs_pb.ActiveProjectCannotBeDeleted `protobuf:"bytes,9,opt,name=active_project_cannot_be_deleted,json=activeProjectCannotBeDeleted,proto3,oneof"`
}

type logData_RpcDisconnectionError struct {
	RpcDisconnectionError *logs_pb.RpcDisconnectionError `protobuf:"bytes,10,opt,name=rpc_disconnection_error,json=rpcDisconnectionError,proto3,oneof"`
}

type logData_DroppedLogs struct {
	DroppedLogs *logs_pb.DroppedLogs `protobuf:"bytes,11,opt,name=dropped_logs,json=droppedLogs,proto3,oneof"`
}

type logData_OpenedProject struct {
	OpenedProject *logs_pb.OpenedProject `protobuf:"bytes,12,opt,name=opened_project,json=openedProject,proto3,oneof"`
}

type logData_CreatedProject struct {
	CreatedProject *logs_pb.CreatedProject `protobuf:"bytes,13,opt,name=created_project,json=createdProject,proto3,oneof"`
}

type logData_ConfigUnavailable struct {
	ConfigUnavailable *logs_pb.ConfigUnavailable `protobuf:"bytes,14,opt,name=config_unavailable,json=configUnavailable,proto3,oneof"`
}

type logData_InvalidRequest struct {
	InvalidRequest *logs_pb.InvalidRequest `protobuf:"bytes,15,opt,name=invalid_request,json=invalidRequest,proto3,oneof"`
}

type logData_SanityCheckError struct {
	SanityCheckError *logs_pb.SanityCheckError `protobuf:"bytes,16,opt,name=sanity_check_error,json=sanityCheckError,proto3,oneof"`
}

type logData_BagFailedToOpen struct {
	BagFailedToOpen *logs_pb.BagFailedToOpen `protobuf:"bytes,17,opt,name=bag_failed_to_open,json=bagFailedToOpen,proto3,oneof"`
}

type logData_BagFailedToClose struct {
	BagFailedToClose *logs_pb.BagFailedToClose `protobuf:"bytes,18,opt,name=bag_failed_to_close,json=bagFailedToClose,proto3,oneof"`
}

type logData_BagConversionFailed struct {
	BagConversionFailed *logs_pb.BagConversionFailed `protobuf:"bytes,19,opt,name=bag_conversion_failed,json=bagConversionFailed,proto3,oneof"`
}

type logData_BagFailedToWrite struct {
	BagFailedToWrite *logs_pb.BagFailedToWrite `protobuf:"bytes,20,opt,name=bag_failed_to_write,json=bagFailedToWrite,proto3,oneof"`
}

type logData_CalibrationError struct {
	CalibrationError *logs_pb.CalibrationError `protobuf:"bytes,21,opt,name=calibration_error,json=calibrationError,proto3,oneof"`
}

type logData_ProjectManagerFailedToStartRecording struct {
	ProjectManagerFailedToStartRecording *logs_pb.ProjectManagerFailedToStartRecording `protobuf:"bytes,22,opt,name=project_manager_failed_to_start_recording,json=projectManagerFailedToStartRecording,proto3,oneof"`
}

type logData_ProjectManagerFailedToStopRecording struct {
	ProjectManagerFailedToStopRecording *logs_pb.ProjectManagerFailedToStopRecording `protobuf:"bytes,23,opt,name=project_manager_failed_to_stop_recording,json=projectManagerFailedToStopRecording,proto3,oneof"`
}

type logData_ServiceConnectionTimedOut struct {
	ServiceConnectionTimedOut *logs_pb.ServiceConnectionTimedOut `protobuf:"bytes,24,opt,name=service_connection_timed_out,json=serviceConnectionTimedOut,proto3,oneof"`
}

type logData_BagRecorderAlreadyRunning struct {
	BagRecorderAlreadyRunning *logs_pb.BagRecorderAlreadyRunning `protobuf:"bytes,25,opt,name=bag_recorder_already_running,json=bagRecorderAlreadyRunning,proto3,oneof"`
}

type logData_LicenseServerConnectionError struct {
	LicenseServerConnectionError *logs_pb.LicenseServerConnectionError `protobuf:"bytes,26,opt,name=license_server_connection_error,json=licenseServerConnectionError,proto3,oneof"`
}

type logData_LicenseError struct {
	LicenseError *logs_pb.LicenseError `protobuf:"bytes,27,opt,name=license_error,json=licenseError,proto3,oneof"`
}

type logData_LicenseNotFoundError struct {
	LicenseNotFoundError *logs_pb.LicenseNotFoundError `protobuf:"bytes,145,opt,name=license_not_found_error,json=licenseNotFoundError,proto3,oneof"`
}

type logData_LicenseExpiredError struct {
	LicenseExpiredError *logs_pb.LicenseExpiredError `protobuf:"bytes,146,opt,name=license_expired_error,json=licenseExpiredError,proto3,oneof"`
}

type logData_LicenseExceededError struct {
	LicenseExceededError *logs_pb.LicenseExceededError `protobuf:"bytes,147,opt,name=license_exceeded_error,json=licenseExceededError,proto3,oneof"`
}

type logData_LicenseHostMachineError struct {
	LicenseHostMachineError *logs_pb.LicenseHostMachineError `protobuf:"bytes,28,opt,name=license_host_machine_error,json=licenseHostMachineError,proto3,oneof"`
}

type logData_LicensePrivilegeError struct {
	LicensePrivilegeError *logs_pb.LicensePrivilegeError `protobuf:"bytes,148,opt,name=license_privilege_error,json=licensePrivilegeError,proto3,oneof"`
}

type logData_LicenseActiveInfo struct {
	LicenseActiveInfo *logs_pb.LicenseActiveInfo `protobuf:"bytes,149,opt,name=license_active_info,json=licenseActiveInfo,proto3,oneof"`
}

type logData_MultipleLicensesWarning struct {
	MultipleLicensesWarning *logs_pb.MultipleLicensesWarning `protobuf:"bytes,150,opt,name=multiple_licenses_warning,json=multipleLicensesWarning,proto3,oneof"`
}

type logData_LicenseCurrentLicenseStatusInfo struct {
	LicenseCurrentLicenseStatusInfo *logs_pb.LicenseCurrentLicenseStatusInfo `protobuf:"bytes,29,opt,name=license_current_license_status_info,json=licenseCurrentLicenseStatusInfo,proto3,oneof"`
}

type logData_BagRecordingStoppedInfo struct {
	BagRecordingStoppedInfo *logs_pb.BagRecordingStoppedInfo `protobuf:"bytes,30,opt,name=bag_recording_stopped_info,json=bagRecordingStoppedInfo,proto3,oneof"`
}

type logData_BagRecordingFailedToStart struct {
	BagRecordingFailedToStart *logs_pb.BagRecordingFailedToStart `protobuf:"bytes,31,opt,name=bag_recording_failed_to_start,json=bagRecordingFailedToStart,proto3,oneof"`
}

type logData_BagRecordingStartedInfo struct {
	BagRecordingStartedInfo *logs_pb.BagRecordingStartedInfo `protobuf:"bytes,32,opt,name=bag_recording_started_info,json=bagRecordingStartedInfo,proto3,oneof"`
}

type logData_ReplayRestartedInfo struct {
	ReplayRestartedInfo *logs_pb.ReplayRestartedInfo `protobuf:"bytes,33,opt,name=replay_restarted_info,json=replayRestartedInfo,proto3,oneof"`
}

type logData_InputSourceChangeRequestedInfo struct {
	InputSourceChangeRequestedInfo *logs_pb.InputSourceChangeRequestedInfo `protobuf:"bytes,34,opt,name=input_source_change_requested_info,json=inputSourceChangeRequestedInfo,proto3,oneof"`
}

type logData_InputSourceSwitchedInfo struct {
	InputSourceSwitchedInfo *logs_pb.InputSourceSwitchedInfo `protobuf:"bytes,35,opt,name=input_source_switched_info,json=inputSourceSwitchedInfo,proto3,oneof"`
}

type logData_RpcTimeoutWarning struct {
	RpcTimeoutWarning *logs_pb.RpcTimeoutWarning `protobuf:"bytes,36,opt,name=rpc_timeout_warning,json=rpcTimeoutWarning,proto3,oneof"`
}

type logData_CannotWriteLogFile struct {
	CannotWriteLogFile *logs_pb.CannotWriteLogFile `protobuf:"bytes,37,opt,name=cannot_write_log_file,json=cannotWriteLogFile,proto3,oneof"`
}

type logData_PointCloudParsingFailureWarning struct {
	PointCloudParsingFailureWarning *logs_pb.PointCloudParsingFailureWarning `protobuf:"bytes,38,opt,name=point_cloud_parsing_failure_warning,json=pointCloudParsingFailureWarning,proto3,oneof"`
}

type logData_LidarIsDead struct {
	LidarIsDead *logs_pb.LidarIsDead `protobuf:"bytes,39,opt,name=lidar_is_dead,json=lidarIsDead,proto3,oneof"`
}

type logData_LidarIsNotDeadAnymore struct {
	LidarIsNotDeadAnymore *logs_pb.LidarIsNotDeadAnymore `protobuf:"bytes,40,opt,name=lidar_is_not_dead_anymore,json=lidarIsNotDeadAnymore,proto3,oneof"`
}

type logData_LidarIsObstructed struct {
	LidarIsObstructed *logs_pb.LidarIsObstructed `protobuf:"bytes,41,opt,name=lidar_is_obstructed,json=lidarIsObstructed,proto3,oneof"`
}

type logData_LidarIsNotObstructedAnymore struct {
	LidarIsNotObstructedAnymore *logs_pb.LidarIsNotObstructedAnymore `protobuf:"bytes,42,opt,name=lidar_is_not_obstructed_anymore,json=lidarIsNotObstructedAnymore,proto3,oneof"`
}

type logData_LidarIsTilted struct {
	LidarIsTilted *logs_pb.LidarIsTilted `protobuf:"bytes,43,opt,name=lidar_is_tilted,json=lidarIsTilted,proto3,oneof"`
}

type logData_LidarIsNotTiltedAnymore struct {
	LidarIsNotTiltedAnymore *logs_pb.LidarIsNotTiltedAnymore `protobuf:"bytes,44,opt,name=lidar_is_not_tilted_anymore,json=lidarIsNotTiltedAnymore,proto3,oneof"`
}

type logData_LidarHasBeenAutomaticallyRecalibrated struct {
	LidarHasBeenAutomaticallyRecalibrated *logs_pb.LidarHasBeenAutomaticallyRecalibrated `protobuf:"bytes,45,opt,name=lidar_has_been_automatically_recalibrated,json=lidarHasBeenAutomaticallyRecalibrated,proto3,oneof"`
}

type logData_ReceivedFirstDataForLidar struct {
	ReceivedFirstDataForLidar *logs_pb.ReceivedFirstDataForLidar `protobuf:"bytes,46,opt,name=received_first_data_for_lidar,json=receivedFirstDataForLidar,proto3,oneof"`
}

type logData_TerminationFailureError struct {
	TerminationFailureError *logs_pb.TerminationFailureError `protobuf:"bytes,47,opt,name=termination_failure_error,json=terminationFailureError,proto3,oneof"`
}

type logData_FrameProcessingError struct {
	FrameProcessingError *logs_pb.FrameProcessingError `protobuf:"bytes,48,opt,name=frame_processing_error,json=frameProcessingError,proto3,oneof"`
}

type logData_ThreadPoolUnavailableError struct {
	ThreadPoolUnavailableError *logs_pb.ThreadPoolUnavailableError `protobuf:"bytes,49,opt,name=thread_pool_unavailable_error,json=threadPoolUnavailableError,proto3,oneof"`
}

type logData_InvalidArgument struct {
	InvalidArgument *logs_pb.InvalidArgument `protobuf:"bytes,50,opt,name=invalid_argument,json=invalidArgument,proto3,oneof"`
}

type logData_ComponentInitializationFailureFatal struct {
	ComponentInitializationFailureFatal *logs_pb.ComponentInitializationFailureFatal `protobuf:"bytes,51,opt,name=component_initialization_failure_fatal,json=componentInitializationFailureFatal,proto3,oneof"`
}

type logData_UnhandledEnumCaseError struct {
	UnhandledEnumCaseError *logs_pb.UnhandledEnumCaseError `protobuf:"bytes,52,opt,name=unhandled_enum_case_error,json=unhandledEnumCaseError,proto3,oneof"`
}

type logData_BagEmptyError struct {
	BagEmptyError *logs_pb.BagEmptyError `protobuf:"bytes,53,opt,name=bag_empty_error,json=bagEmptyError,proto3,oneof"`
}

type logData_DiscardingDataError struct {
	DiscardingDataError *logs_pb.DiscardingDataError `protobuf:"bytes,54,opt,name=discarding_data_error,json=discardingDataError,proto3,oneof"`
}

type logData_DiscardingDataWarning struct {
	DiscardingDataWarning *logs_pb.DiscardingDataWarning `protobuf:"bytes,55,opt,name=discarding_data_warning,json=discardingDataWarning,proto3,oneof"`
}

type logData_NothingToProcess struct {
	NothingToProcess *logs_pb.NothingToProcess `protobuf:"bytes,56,opt,name=nothing_to_process,json=nothingToProcess,proto3,oneof"`
}

type logData_InvalidComponentConfiguration struct {
	InvalidComponentConfiguration *logs_pb.InvalidComponentConfiguration `protobuf:"bytes,57,opt,name=invalid_component_configuration,json=invalidComponentConfiguration,proto3,oneof"`
}

type logData_ChannelReceiverNotFoundWarning struct {
	ChannelReceiverNotFoundWarning *logs_pb.ChannelReceiverNotFoundWarning `protobuf:"bytes,58,opt,name=channel_receiver_not_found_warning,json=channelReceiverNotFoundWarning,proto3,oneof"`
}

type logData_ModelLoadFailure struct {
	ModelLoadFailure *logs_pb.ModelLoadFailure `protobuf:"bytes,59,opt,name=model_load_failure,json=modelLoadFailure,proto3,oneof"`
}

type logData_ModelExecutionFailureError struct {
	ModelExecutionFailureError *logs_pb.ModelExecutionFailureError `protobuf:"bytes,60,opt,name=model_execution_failure_error,json=modelExecutionFailureError,proto3,oneof"`
}

type logData_ServiceReadyInfo struct {
	ServiceReadyInfo *logs_pb.ServiceReadyInfo `protobuf:"bytes,61,opt,name=service_ready_info,json=serviceReadyInfo,proto3,oneof"`
}

type logData_ModelPreparingInfo struct {
	ModelPreparingInfo *logs_pb.ModelPreparingInfo `protobuf:"bytes,62,opt,name=model_preparing_info,json=modelPreparingInfo,proto3,oneof"`
}

type logData_ModelInitializedInfo struct {
	ModelInitializedInfo *logs_pb.ModelInitializedInfo `protobuf:"bytes,63,opt,name=model_initialized_info,json=modelInitializedInfo,proto3,oneof"`
}

type logData_ModelInitializationFailureWarning struct {
	ModelInitializationFailureWarning *logs_pb.ModelInitializationFailureWarning `protobuf:"bytes,64,opt,name=model_initialization_failure_warning,json=modelInitializationFailureWarning,proto3,oneof"`
}

type logData_RosSpinnerStoppedWarning struct {
	RosSpinnerStoppedWarning *logs_pb.RosSpinnerStoppedWarning `protobuf:"bytes,65,opt,name=ros_spinner_stopped_warning,json=rosSpinnerStoppedWarning,proto3,oneof"`
}

type logData_ActorSystemUnavailableError struct {
	ActorSystemUnavailableError *logs_pb.ActorSystemUnavailableError `protobuf:"bytes,66,opt,name=actor_system_unavailable_error,json=actorSystemUnavailableError,proto3,oneof"`
}

type logData_ConfigNodeNotFoundError struct {
	ConfigNodeNotFoundError *logs_pb.ConfigNodeNotFoundError `protobuf:"bytes,67,opt,name=config_node_not_found_error,json=configNodeNotFoundError,proto3,oneof"`
}

type logData_BagTimestampOutOfOrderError struct {
	BagTimestampOutOfOrderError *logs_pb.BagTimestampOutOfOrderError `protobuf:"bytes,68,opt,name=bag_timestamp_out_of_order_error,json=bagTimestampOutOfOrderError,proto3,oneof"`
}

type logData_BagReplayUnexpectedTimestampError struct {
	BagReplayUnexpectedTimestampError *logs_pb.BagReplayUnexpectedTimestampError `protobuf:"bytes,69,opt,name=bag_replay_unexpected_timestamp_error,json=bagReplayUnexpectedTimestampError,proto3,oneof"`
}

type logData_WebsocketClosedInfo struct {
	WebsocketClosedInfo *logs_pb.WebsocketClosedInfo `protobuf:"bytes,70,opt,name=websocket_closed_info,json=websocketClosedInfo,proto3,oneof"`
}

type logData_WebsocketOpenedInfo struct {
	WebsocketOpenedInfo *logs_pb.WebsocketOpenedInfo `protobuf:"bytes,71,opt,name=websocket_opened_info,json=websocketOpenedInfo,proto3,oneof"`
}

type logData_SubscriberDisconnectedInfo struct {
	SubscriberDisconnectedInfo *logs_pb.SubscriberDisconnectedInfo `protobuf:"bytes,72,opt,name=subscriber_disconnected_info,json=subscriberDisconnectedInfo,proto3,oneof"`
}

type logData_ThreadPoolSlowingDownWarning struct {
	ThreadPoolSlowingDownWarning *logs_pb.ThreadPoolSlowingDownWarning `protobuf:"bytes,73,opt,name=thread_pool_slowing_down_warning,json=threadPoolSlowingDownWarning,proto3,oneof"`
}

type logData_ThreadPoolNotRespondingWarning struct {
	ThreadPoolNotRespondingWarning *logs_pb.ThreadPoolNotRespondingWarning `protobuf:"bytes,74,opt,name=thread_pool_not_responding_warning,json=threadPoolNotRespondingWarning,proto3,oneof"`
}

type logData_ThreadPoolBrokenPromiseWarning struct {
	ThreadPoolBrokenPromiseWarning *logs_pb.ThreadPoolBrokenPromiseWarning `protobuf:"bytes,75,opt,name=thread_pool_broken_promise_warning,json=threadPoolBrokenPromiseWarning,proto3,oneof"`
}

type logData_BoxFittingPointsBelowBaseWarning struct {
	BoxFittingPointsBelowBaseWarning *logs_pb.BoxFittingPointsBelowBaseWarning `protobuf:"bytes,76,opt,name=box_fitting_points_below_base_warning,json=boxFittingPointsBelowBaseWarning,proto3,oneof"`
}

type logData_FailedToRemoveStalePointsWarning struct {
	FailedToRemoveStalePointsWarning *logs_pb.FailedToRemoveStalePointsWarning `protobuf:"bytes,77,opt,name=failed_to_remove_stale_points_warning,json=failedToRemoveStalePointsWarning,proto3,oneof"`
}

type logData_IrregularBroadcastingPeriodWarning struct {
	IrregularBroadcastingPeriodWarning *logs_pb.IrregularBroadcastingPeriodWarning `protobuf:"bytes,78,opt,name=irregular_broadcasting_period_warning,json=irregularBroadcastingPeriodWarning,proto3,oneof"`
}

type logData_ClustererPointsOutOfRangeWarning struct {
	ClustererPointsOutOfRangeWarning *logs_pb.ClustererPointsOutOfRangeWarning `protobuf:"bytes,79,opt,name=clusterer_points_out_of_range_warning,json=clustererPointsOutOfRangeWarning,proto3,oneof"`
}

type logData_InternalError struct {
	InternalError *logs_pb.InternalError `protobuf:"bytes,80,opt,name=internal_error,json=internalError,proto3,oneof"`
}

type logData_InternalFatal struct {
	InternalFatal *logs_pb.InternalFatal `protobuf:"bytes,81,opt,name=internal_fatal,json=internalFatal,proto3,oneof"`
}

type logData_ServiceStartingInfo struct {
	ServiceStartingInfo *logs_pb.ServiceStartingInfo `protobuf:"bytes,82,opt,name=service_starting_info,json=serviceStartingInfo,proto3,oneof"`
}

type logData_ConfigNodeNotFoundFatal struct {
	ConfigNodeNotFoundFatal *logs_pb.ConfigNodeNotFoundFatal `protobuf:"bytes,83,opt,name=config_node_not_found_fatal,json=configNodeNotFoundFatal,proto3,oneof"`
}

type logData_ServiceSetupError struct {
	ServiceSetupError *logs_pb.ServiceSetupError `protobuf:"bytes,84,opt,name=service_setup_error,json=serviceSetupError,proto3,oneof"`
}

type logData_FilesystemError struct {
	FilesystemError *logs_pb.FilesystemError `protobuf:"bytes,85,opt,name=filesystem_error,json=filesystemError,proto3,oneof"`
}

type logData_InvalidPresetWarning struct {
	InvalidPresetWarning *logs_pb.InvalidPresetWarning `protobuf:"bytes,86,opt,name=invalid_preset_warning,json=invalidPresetWarning,proto3,oneof"`
}

type logData_WebsocketFailedClearPendingError struct {
	WebsocketFailedClearPendingError *logs_pb.WebsocketFailedClearPendingError `protobuf:"bytes,87,opt,name=websocket_failed_clear_pending_error,json=websocketFailedClearPendingError,proto3,oneof"`
}

type logData_WebsocketFailedToStopError struct {
	WebsocketFailedToStopError *logs_pb.WebsocketFailedToStopError `protobuf:"bytes,88,opt,name=websocket_failed_to_stop_error,json=websocketFailedToStopError,proto3,oneof"`
}

type logData_WebsocketFailedToCreateError struct {
	WebsocketFailedToCreateError *logs_pb.WebsocketFailedToCreateError `protobuf:"bytes,89,opt,name=websocket_failed_to_create_error,json=websocketFailedToCreateError,proto3,oneof"`
}

type logData_UnexpectedRpcError struct {
	UnexpectedRpcError *logs_pb.UnexpectedRpcError `protobuf:"bytes,90,opt,name=unexpected_rpc_error,json=unexpectedRpcError,proto3,oneof"`
}

type logData_LicensePollFailed struct {
	LicensePollFailed *logs_pb.LicensePollFailed `protobuf:"bytes,91,opt,name=license_poll_failed,json=licensePollFailed,proto3,oneof"`
}

type logData_LicenseExpiredWarning struct {
	LicenseExpiredWarning *logs_pb.LicenseExpiredWarning `protobuf:"bytes,92,opt,name=license_expired_warning,json=licenseExpiredWarning,proto3,oneof"`
}

type logData_LicenseUsageExceededWarning struct {
	LicenseUsageExceededWarning *logs_pb.LicenseUsageExceededWarning `protobuf:"bytes,93,opt,name=license_usage_exceeded_warning,json=licenseUsageExceededWarning,proto3,oneof"`
}

type logData_StaticThreadPoolSlowTaskWarning struct {
	StaticThreadPoolSlowTaskWarning *logs_pb.StaticThreadPoolSlowTaskWarning `protobuf:"bytes,94,opt,name=static_thread_pool_slow_task_warning,json=staticThreadPoolSlowTaskWarning,proto3,oneof"`
}

type logData_RpcUnsupportedServiceWarning struct {
	RpcUnsupportedServiceWarning *logs_pb.RpcUnsupportedServiceWarning `protobuf:"bytes,95,opt,name=rpc_unsupported_service_warning,json=rpcUnsupportedServiceWarning,proto3,oneof"`
}

type logData_WebsocketHandlerProblem struct {
	WebsocketHandlerProblem *logs_pb.WebsocketHandlerProblem `protobuf:"bytes,96,opt,name=websocket_handler_problem,json=websocketHandlerProblem,proto3,oneof"`
}

type logData_WebsocketDeserializeError struct {
	WebsocketDeserializeError *logs_pb.WebsocketDeserializeError `protobuf:"bytes,97,opt,name=websocket_deserialize_error,json=websocketDeserializeError,proto3,oneof"`
}

type logData_WebsocketExpiredRpcEndpointError struct {
	WebsocketExpiredRpcEndpointError *logs_pb.WebsocketExpiredRpcEndpointError `protobuf:"bytes,98,opt,name=websocket_expired_rpc_endpoint_error,json=websocketExpiredRpcEndpointError,proto3,oneof"`
}

type logData_WebsocketQueueOverloadedWarning struct {
	WebsocketQueueOverloadedWarning *logs_pb.WebsocketQueueOverloadedWarning `protobuf:"bytes,99,opt,name=websocket_queue_overloaded_warning,json=websocketQueueOverloadedWarning,proto3,oneof"`
}

type logData_RpcFailedToNotifyWarning struct {
	RpcFailedToNotifyWarning *logs_pb.RpcFailedToNotifyWarning `protobuf:"bytes,100,opt,name=rpc_failed_to_notify_warning,json=rpcFailedToNotifyWarning,proto3,oneof"`
}

type logData_ConfigSubscriptionFailedWarning struct {
	ConfigSubscriptionFailedWarning *logs_pb.ConfigSubscriptionFailedWarning `protobuf:"bytes,101,opt,name=config_subscription_failed_warning,json=configSubscriptionFailedWarning,proto3,oneof"`
}

type logData_ThreadPoolClampedWorkersWarning struct {
	ThreadPoolClampedWorkersWarning *logs_pb.ThreadPoolClampedWorkersWarning `protobuf:"bytes,102,opt,name=thread_pool_clamped_workers_warning,json=threadPoolClampedWorkersWarning,proto3,oneof"`
}

type logData_StoppingHorusBagRecorderAlreadyStopped struct {
	StoppingHorusBagRecorderAlreadyStopped *logs_pb.StoppingHorusBagRecorderAlreadyStopped `protobuf:"bytes,103,opt,name=stopping_horus_bag_recorder_already_stopped,json=stoppingHorusBagRecorderAlreadyStopped,proto3,oneof"`
}

type logData_RecorderConfigUpdateWhileRunning struct {
	RecorderConfigUpdateWhileRunning *logs_pb.RecorderConfigUpdateWhileRunning `protobuf:"bytes,104,opt,name=recorder_config_update_while_running,json=recorderConfigUpdateWhileRunning,proto3,oneof"`
}

type logData_ClampingDataWarning struct {
	ClampingDataWarning *logs_pb.ClampingDataWarning `protobuf:"bytes,105,opt,name=clamping_data_warning,json=clampingDataWarning,proto3,oneof"`
}

type logData_LidarIncompatibleValues struct {
	LidarIncompatibleValues *logs_pb.LidarIncompatibleValues `protobuf:"bytes,106,opt,name=lidar_incompatible_values,json=lidarIncompatibleValues,proto3,oneof"`
}

type logData_CannotDetermineContainerIdError struct {
	CannotDetermineContainerIdError *logs_pb.CannotDetermineContainerIdError `protobuf:"bytes,107,opt,name=cannot_determine_container_id_error,json=cannotDetermineContainerIdError,proto3,oneof"`
}

type logData_StartedLidarDriver struct {
	StartedLidarDriver *logs_pb.StartedLidarDriver `protobuf:"bytes,108,opt,name=started_lidar_driver,json=startedLidarDriver,proto3,oneof"`
}

type logData_CannotStartLidarDriver struct {
	CannotStartLidarDriver *logs_pb.CannotStartLidarDriver `protobuf:"bytes,109,opt,name=cannot_start_lidar_driver,json=cannotStartLidarDriver,proto3,oneof"`
}

type logData_StoppedLidarDriver struct {
	StoppedLidarDriver *logs_pb.StoppedLidarDriver `protobuf:"bytes,110,opt,name=stopped_lidar_driver,json=stoppedLidarDriver,proto3,oneof"`
}

type logData_CannotStopLidarDriver struct {
	CannotStopLidarDriver *logs_pb.CannotStopLidarDriver `protobuf:"bytes,111,opt,name=cannot_stop_lidar_driver,json=cannotStopLidarDriver,proto3,oneof"`
}

type logData_RestartedLidarDriver struct {
	RestartedLidarDriver *logs_pb.RestartedLidarDriver `protobuf:"bytes,112,opt,name=restarted_lidar_driver,json=restartedLidarDriver,proto3,oneof"`
}

type logData_CannotRestartLidarDriver struct {
	CannotRestartLidarDriver *logs_pb.CannotRestartLidarDriver `protobuf:"bytes,113,opt,name=cannot_restart_lidar_driver,json=cannotRestartLidarDriver,proto3,oneof"`
}

type logData_RemovedUnusedLidarDriver struct {
	RemovedUnusedLidarDriver *logs_pb.RemovedUnusedLidarDriver `protobuf:"bytes,114,opt,name=removed_unused_lidar_driver,json=removedUnusedLidarDriver,proto3,oneof"`
}

type logData_CannotRemoveUnusedLidarDriver struct {
	CannotRemoveUnusedLidarDriver *logs_pb.CannotRemoveUnusedLidarDriver `protobuf:"bytes,115,opt,name=cannot_remove_unused_lidar_driver,json=cannotRemoveUnusedLidarDriver,proto3,oneof"`
}

type logData_LidarDriverGcFailure struct {
	LidarDriverGcFailure *logs_pb.LidarDriverGcFailure `protobuf:"bytes,116,opt,name=lidar_driver_gc_failure,json=lidarDriverGcFailure,proto3,oneof"`
}

type logData_IdSpaceExhausted struct {
	IdSpaceExhausted *logs_pb.IdSpaceExhausted `protobuf:"bytes,117,opt,name=id_space_exhausted,json=idSpaceExhausted,proto3,oneof"`
}

type logData_PreprocessingToPointAggregatorPointsSkipped struct {
	PreprocessingToPointAggregatorPointsSkipped *logs_pb.PreprocessingToPointAggregatorPointsSkipped `protobuf:"bytes,118,opt,name=preprocessing_to_point_aggregator_points_skipped,json=preprocessingToPointAggregatorPointsSkipped,proto3,oneof"`
}

type logData_MinMsgIntervalLessThanThreshold struct {
	MinMsgIntervalLessThanThreshold *logs_pb.MinMsgIntervalLessThanThreshold `protobuf:"bytes,119,opt,name=min_msg_interval_less_than_threshold,json=minMsgIntervalLessThanThreshold,proto3,oneof"`
}

type logData_FailedToCleanupRosWarning struct {
	FailedToCleanupRosWarning *logs_pb.FailedToCleanupRosWarning `protobuf:"bytes,120,opt,name=failed_to_cleanup_ros_warning,json=failedToCleanupRosWarning,proto3,oneof"`
}

type logData_RpcDisconnectedWarning struct {
	RpcDisconnectedWarning *logs_pb.RpcDisconnectedWarning `protobuf:"bytes,121,opt,name=rpc_disconnected_warning,json=rpcDisconnectedWarning,proto3,oneof"`
}

type logData_RpcUnhandledError struct {
	RpcUnhandledError *logs_pb.RpcUnhandledError `protobuf:"bytes,122,opt,name=rpc_unhandled_error,json=rpcUnhandledError,proto3,oneof"`
}

type logData_TimeDiffOutOfRangeWarning struct {
	TimeDiffOutOfRangeWarning *logs_pb.TimeDiffOutOfRangeWarning `protobuf:"bytes,123,opt,name=time_diff_out_of_range_warning,json=timeDiffOutOfRangeWarning,proto3,oneof"`
}

type logData_TensorrtLog struct {
	TensorrtLog *logs_pb.TensorrtLog `protobuf:"bytes,124,opt,name=tensorrt_log,json=tensorrtLog,proto3,oneof"`
}

type logData_BuildingTensorrtEngineInfo struct {
	BuildingTensorrtEngineInfo *logs_pb.BuildingTensorrtEngineInfo `protobuf:"bytes,125,opt,name=building_tensorrt_engine_info,json=buildingTensorrtEngineInfo,proto3,oneof"`
}

type logData_LoadingTensorrtEngineInfo struct {
	LoadingTensorrtEngineInfo *logs_pb.LoadingTensorrtEngineInfo `protobuf:"bytes,126,opt,name=loading_tensorrt_engine_info,json=loadingTensorrtEngineInfo,proto3,oneof"`
}

type logData_CalibrationMapNotFound struct {
	CalibrationMapNotFound *logs_pb.CalibrationMapNotFound `protobuf:"bytes,127,opt,name=calibration_map_not_found,json=calibrationMapNotFound,proto3,oneof"`
}

type logData_CalibrationMapNotValid struct {
	CalibrationMapNotValid *logs_pb.CalibrationMapNotValid `protobuf:"bytes,128,opt,name=calibration_map_not_valid,json=calibrationMapNotValid,proto3,oneof"`
}

type logData_CalibrationMapPathAlreadyExists struct {
	CalibrationMapPathAlreadyExists *logs_pb.CalibrationMapPathAlreadyExists `protobuf:"bytes,129,opt,name=calibration_map_path_already_exists,json=calibrationMapPathAlreadyExists,proto3,oneof"`
}

type logData_FailedToSaveCalibrationMap struct {
	FailedToSaveCalibrationMap *logs_pb.FailedToSaveCalibrationMap `protobuf:"bytes,130,opt,name=failed_to_save_calibration_map,json=failedToSaveCalibrationMap,proto3,oneof"`
}

type logData_FailedToRemoveCalibrationMap struct {
	FailedToRemoveCalibrationMap *logs_pb.FailedToRemoveCalibrationMap `protobuf:"bytes,131,opt,name=failed_to_remove_calibration_map,json=failedToRemoveCalibrationMap,proto3,oneof"`
}

type logData_FailedToIterateInDirectory struct {
	FailedToIterateInDirectory *logs_pb.FailedToIterateInDirectory `protobuf:"bytes,132,opt,name=failed_to_iterate_in_directory,json=failedToIterateInDirectory,proto3,oneof"`
}

type logData_MapBasedCalibrationWithoutMapLoading struct {
	MapBasedCalibrationWithoutMapLoading *logs_pb.MapBasedCalibrationWithoutMapLoading `protobuf:"bytes,133,opt,name=map_based_calibration_without_map_loading,json=mapBasedCalibrationWithoutMapLoading,proto3,oneof"`
}

type logData_MapBasedCalibrationAlreadyRunning struct {
	MapBasedCalibrationAlreadyRunning *logs_pb.MapBasedCalibrationAlreadyRunning `protobuf:"bytes,134,opt,name=map_based_calibration_already_running,json=mapBasedCalibrationAlreadyRunning,proto3,oneof"`
}

type logData_CancelMapBasedCalibrationNotRunning struct {
	CancelMapBasedCalibrationNotRunning *logs_pb.CancelMapBasedCalibrationNotRunning `protobuf:"bytes,135,opt,name=cancel_map_based_calibration_not_running,json=cancelMapBasedCalibrationNotRunning,proto3,oneof"`
}

type logData_BagStreamNotFound struct {
	BagStreamNotFound *logs_pb.BagStreamNotFound `protobuf:"bytes,136,opt,name=bag_stream_not_found,json=bagStreamNotFound,proto3,oneof"`
}

type logData_EvaluationBagStartedInfo struct {
	EvaluationBagStartedInfo *logs_pb.EvaluationBagStartedInfo `protobuf:"bytes,137,opt,name=evaluation_bag_started_info,json=evaluationBagStartedInfo,proto3,oneof"`
}

type logData_EvaluationBagFinishedInfo struct {
	EvaluationBagFinishedInfo *logs_pb.EvaluationBagFinishedInfo `protobuf:"bytes,138,opt,name=evaluation_bag_finished_info,json=evaluationBagFinishedInfo,proto3,oneof"`
}

type logData_BagNotFound struct {
	BagNotFound *logs_pb.BagNotFound `protobuf:"bytes,139,opt,name=bag_not_found,json=bagNotFound,proto3,oneof"`
}

type logData_BuildingPipelineInfo struct {
	BuildingPipelineInfo *logs_pb.BuildingPipelineInfo `protobuf:"bytes,140,opt,name=building_pipeline_info,json=buildingPipelineInfo,proto3,oneof"`
}

type logData_BagIsNotEvaluation struct {
	BagIsNotEvaluation *logs_pb.BagIsNotEvaluation `protobuf:"bytes,141,opt,name=bag_is_not_evaluation,json=bagIsNotEvaluation,proto3,oneof"`
}

type logData_HorusBagRunning struct {
	HorusBagRunning *logs_pb.HorusBagRunning `protobuf:"bytes,142,opt,name=horus_bag_running,json=horusBagRunning,proto3,oneof"`
}

type logData_AutoGroundCalibrationWarning struct {
	AutoGroundCalibrationWarning *logs_pb.AutoGroundCalibrationWarning `protobuf:"bytes,143,opt,name=auto_ground_calibration_warning,json=autoGroundCalibrationWarning,proto3,oneof"`
}

type logData_AutoGroundCalibrationError struct {
	AutoGroundCalibrationError *logs_pb.AutoGroundCalibrationError `protobuf:"bytes,144,opt,name=auto_ground_calibration_error,json=autoGroundCalibrationError,proto3,oneof"`
}

type logData_ObjectDetectorNotLoadedWarning struct {
	ObjectDetectorNotLoadedWarning *logs_pb.ObjectDetectorNotLoadedWarning `protobuf:"bytes,151,opt,name=object_detector_not_loaded_warning,json=objectDetectorNotLoadedWarning,proto3,oneof"`
}

type logData_CalibrationIsRunningError struct {
	CalibrationIsRunningError *logs_pb.CalibrationIsRunningError `protobuf:"bytes,152,opt,name=calibration_is_running_error,json=calibrationIsRunningError,proto3,oneof"`
}

type logData_ModelInitInProgressInfo struct {
	ModelInitInProgressInfo *logs_pb.ModelInitInProgressInfo `protobuf:"bytes,153,opt,name=model_init_in_progress_info,json=modelInitInProgressInfo,proto3,oneof"`
}

type logData_RpcTimeoutWithResolutionWarning struct {
	RpcTimeoutWithResolutionWarning *logs_pb.RpcTimeoutWithResolutionWarning `protobuf:"bytes,154,opt,name=rpc_timeout_with_resolution_warning,json=rpcTimeoutWithResolutionWarning,proto3,oneof"`
}

type logData_CalibrationWasCancelledInfo struct {
	CalibrationWasCancelledInfo *logs_pb.CalibrationWasCancelledInfo `protobuf:"bytes,155,opt,name=calibration_was_cancelled_info,json=calibrationWasCancelledInfo,proto3,oneof"`
}

type logData_CalibrationMapRecordingFailedToStart struct {
	CalibrationMapRecordingFailedToStart *logs_pb.CalibrationMapRecordingFailedToStart `protobuf:"bytes,156,opt,name=calibration_map_recording_failed_to_start,json=calibrationMapRecordingFailedToStart,proto3,oneof"`
}

type logData_DetectionPipelineRequestedResetInfo struct {
	DetectionPipelineRequestedResetInfo *logs_pb.DetectionPipelineRequestedResetInfo `protobuf:"bytes,157,opt,name=detection_pipeline_requested_reset_info,json=detectionPipelineRequestedResetInfo,proto3,oneof"`
}

type logData_PreprocessingServicePipelineUnavailable struct {
	PreprocessingServicePipelineUnavailable *logs_pb.PreprocessingServicePipelineUnavailable `protobuf:"bytes,158,opt,name=preprocessing_service_pipeline_unavailable,json=preprocessingServicePipelineUnavailable,proto3,oneof"`
}

type logData_CircularRecordingDisabledWarning struct {
	CircularRecordingDisabledWarning *logs_pb.CircularRecordingDisabledWarning `protobuf:"bytes,159,opt,name=circular_recording_disabled_warning,json=circularRecordingDisabledWarning,proto3,oneof"`
}

type logData_SnapshotAlreadyRunningWarning struct {
	SnapshotAlreadyRunningWarning *logs_pb.SnapshotAlreadyRunningWarning `protobuf:"bytes,160,opt,name=snapshot_already_running_warning,json=snapshotAlreadyRunningWarning,proto3,oneof"`
}

type logData_ActiveProjectChangedInfo struct {
	ActiveProjectChangedInfo *logs_pb.ActiveProjectChangedInfo `protobuf:"bytes,161,opt,name=active_project_changed_info,json=activeProjectChangedInfo,proto3,oneof"`
}

type logData_ProjectConfigUpdatedInfo struct {
	ProjectConfigUpdatedInfo *logs_pb.ProjectConfigUpdatedInfo `protobuf:"bytes,162,opt,name=project_config_updated_info,json=projectConfigUpdatedInfo,proto3,oneof"`
}

type logData_InvalidLidarTimestamp struct {
	InvalidLidarTimestamp *logs_pb.InvalidLidarTimestamp `protobuf:"bytes,163,opt,name=invalid_lidar_timestamp,json=invalidLidarTimestamp,proto3,oneof"`
}

type logData_CalibrationAccumulatingPointsInfo struct {
	CalibrationAccumulatingPointsInfo *logs_pb.CalibrationAccumulatingPointsInfo `protobuf:"bytes,164,opt,name=calibration_accumulating_points_info,json=calibrationAccumulatingPointsInfo,proto3,oneof"`
}

type logData_SparseNoiseFilterUsageNonRotationalLidars struct {
	SparseNoiseFilterUsageNonRotationalLidars *logs_pb.SparseNoiseFilterUsageNonRotationalLidars `protobuf:"bytes,165,opt,name=sparse_noise_filter_usage_non_rotational_lidars,json=sparseNoiseFilterUsageNonRotationalLidars,proto3,oneof"`
}

type logData_FileWriteWarning struct {
	FileWriteWarning *logs_pb.FileWriteWarning `protobuf:"bytes,166,opt,name=file_write_warning,json=fileWriteWarning,proto3,oneof"`
}

type logData_LicenseForbiddenFeature struct {
	LicenseForbiddenFeature *logs_pb.LicenseForbiddenFeature `protobuf:"bytes,167,opt,name=license_forbidden_feature,json=licenseForbiddenFeature,proto3,oneof"`
}

type logData_FailedToUpdateConfiguration struct {
	FailedToUpdateConfiguration *logs_pb.FailedToUpdateConfiguration `protobuf:"bytes,168,opt,name=failed_to_update_configuration,json=failedToUpdateConfiguration,proto3,oneof"`
}

type logData_ObstructionDetectorBadReferenceWarning struct {
	ObstructionDetectorBadReferenceWarning *logs_pb.ObstructionDetectorBadReferenceWarning `protobuf:"bytes,169,opt,name=obstruction_detector_bad_reference_warning,json=obstructionDetectorBadReferenceWarning,proto3,oneof"`
}

type logData_ProjectFileInvalidPermissionsError struct {
	ProjectFileInvalidPermissionsError *logs_pb.ProjectFileInvalidPermissionsError `protobuf:"bytes,170,opt,name=project_file_invalid_permissions_error,json=projectFileInvalidPermissionsError,proto3,oneof"`
}

type logData_PipelineSchedulerError struct {
	PipelineSchedulerError *logs_pb.PipelineSchedulerError `protobuf:"bytes,171,opt,name=pipeline_scheduler_error,json=pipelineSchedulerError,proto3,oneof"`
}

type logData_MultiLidarCalibrationWarning struct {
	MultiLidarCalibrationWarning *logs_pb.MultiLidarCalibrationWarning `protobuf:"bytes,172,opt,name=multi_lidar_calibration_warning,json=multiLidarCalibrationWarning,proto3,oneof"`
}

type logData_MultiLidarCalibrationError struct {
	MultiLidarCalibrationError *logs_pb.MultiLidarCalibrationError `protobuf:"bytes,173,opt,name=multi_lidar_calibration_error,json=multiLidarCalibrationError,proto3,oneof"`
}

type logData_OldBagWarning struct {
	OldBagWarning *logs_pb.OldBagWarning `protobuf:"bytes,174,opt,name=old_bag_warning,json=oldBagWarning,proto3,oneof"`
}

type logData_UpgradingBagInfo struct {
	UpgradingBagInfo *logs_pb.UpgradingBagInfo `protobuf:"bytes,175,opt,name=upgrading_bag_info,json=upgradingBagInfo,proto3,oneof"`
}

type logData_BagCalibrationSaveFailed struct {
	BagCalibrationSaveFailed *logs_pb.BagCalibrationSaveFailed `protobuf:"bytes,176,opt,name=bag_calibration_save_failed,json=bagCalibrationSaveFailed,proto3,oneof"`
}

type logData_BagUpgradeFailed struct {
	BagUpgradeFailed *logs_pb.BagUpgradeFailed `protobuf:"bytes,177,opt,name=bag_upgrade_failed,json=bagUpgradeFailed,proto3,oneof"`
}

type logData_UnknownLidarError struct {
	UnknownLidarError *logs_pb.UnknownLidarError `protobuf:"bytes,178,opt,name=unknown_lidar_error,json=unknownLidarError,proto3,oneof"`
}

type logData_InvalidPointCloudWarning struct {
	InvalidPointCloudWarning *logs_pb.InvalidPointCloudWarning `protobuf:"bytes,179,opt,name=invalid_point_cloud_warning,json=invalidPointCloudWarning,proto3,oneof"`
}

type logData_LidarIsDroppingPackets struct {
	LidarIsDroppingPackets *logs_pb.LidarIsDroppingPackets `protobuf:"bytes,180,opt,name=lidar_is_dropping_packets,json=lidarIsDroppingPackets,proto3,oneof"`
}

type logData_RemovedInvalidLidarsFromConfigWarning struct {
	RemovedInvalidLidarsFromConfigWarning *logs_pb.RemovedInvalidLidarsFromConfigWarning `protobuf:"bytes,181,opt,name=removed_invalid_lidars_from_config_warning,json=removedInvalidLidarsFromConfigWarning,proto3,oneof"`
}

type logData_CalibrationMapRecordingFailed struct {
	CalibrationMapRecordingFailed *logs_pb.CalibrationMapRecordingFailed `protobuf:"bytes,182,opt,name=calibration_map_recording_failed,json=calibrationMapRecordingFailed,proto3,oneof"`
}

type logData_DetectionNodeNotFoundError struct {
	DetectionNodeNotFoundError *logs_pb.DetectionNodeNotFoundError `protobuf:"bytes,183,opt,name=detection_node_not_found_error,json=detectionNodeNotFoundError,proto3,oneof"`
}

type logData_CreatedVersionBackupInfo struct {
	CreatedVersionBackupInfo *logs_pb.CreatedVersionBackupInfo `protobuf:"bytes,184,opt,name=created_version_backup_info,json=createdVersionBackupInfo,proto3,oneof"`
}

type logData_PlyFileLoadFailedError struct {
	PlyFileLoadFailedError *logs_pb.PlyFileLoadFailedError `protobuf:"bytes,185,opt,name=ply_file_load_failed_error,json=plyFileLoadFailedError,proto3,oneof"`
}

type logData_HesaiDriverLifecycle struct {
	HesaiDriverLifecycle *logs_pb.HesaiDriverLifecycle `protobuf:"bytes,186,opt,name=hesai_driver_lifecycle,json=hesaiDriverLifecycle,proto3,oneof"`
}

type logData_HesaiDriverError struct {
	HesaiDriverError *logs_pb.HesaiDriverError `protobuf:"bytes,187,opt,name=hesai_driver_error,json=hesaiDriverError,proto3,oneof"`
}

type logData_HesaiPacketProcessingFailed struct {
	HesaiPacketProcessingFailed *logs_pb.HesaiPacketProcessingFailed `protobuf:"bytes,188,opt,name=hesai_packet_processing_failed,json=hesaiPacketProcessingFailed,proto3,oneof"`
}

type logData_HesaiCorrectionFileError struct {
	HesaiCorrectionFileError *logs_pb.HesaiCorrectionFileError `protobuf:"bytes,189,opt,name=hesai_correction_file_error,json=hesaiCorrectionFileError,proto3,oneof"`
}

type logData_HesaiPacketStatistics struct {
	HesaiPacketStatistics *logs_pb.HesaiPacketStatistics `protobuf:"bytes,190,opt,name=hesai_packet_statistics,json=hesaiPacketStatistics,proto3,oneof"`
}

type logData_PlyFileWriteFailedError struct {
	PlyFileWriteFailedError *logs_pb.PlyFileWriteFailedError `protobuf:"bytes,191,opt,name=ply_file_write_failed_error,json=plyFileWriteFailedError,proto3,oneof"`
}

type logData_ProjectSaveError struct {
	ProjectSaveError *logs_pb.ProjectSaveError `protobuf:"bytes,192,opt,name=project_save_error,json=projectSaveError,proto3,oneof"`
}

type logData_SaveStaticEnvironmentSuccess struct {
	SaveStaticEnvironmentSuccess *logs_pb.SaveStaticEnvironmentSuccess `protobuf:"bytes,193,opt,name=save_static_environment_success,json=saveStaticEnvironmentSuccess,proto3,oneof"`
}

type logData_SaveStaticEnvironmentFailed struct {
	SaveStaticEnvironmentFailed *logs_pb.SaveStaticEnvironmentFailed `protobuf:"bytes,194,opt,name=save_static_environment_failed,json=saveStaticEnvironmentFailed,proto3,oneof"`
}

type logData_LoadStaticEnvironmentSuccess struct {
	LoadStaticEnvironmentSuccess *logs_pb.LoadStaticEnvironmentSuccess `protobuf:"bytes,195,opt,name=load_static_environment_success,json=loadStaticEnvironmentSuccess,proto3,oneof"`
}

type logData_LoadStaticEnvironmentFailed struct {
	LoadStaticEnvironmentFailed *logs_pb.LoadStaticEnvironmentFailed `protobuf:"bytes,196,opt,name=load_static_environment_failed,json=loadStaticEnvironmentFailed,proto3,oneof"`
}

type logData_AttemptToInjectInvalidLidarIdWarning struct {
	AttemptToInjectInvalidLidarIdWarning *logs_pb.AttemptToInjectInvalidLidarIdWarning `protobuf:"bytes,197,opt,name=attempt_to_inject_invalid_lidar_id_warning,json=attemptToInjectInvalidLidarIdWarning,proto3,oneof"`
}

type logData_ResetBundledPacketDueToUnexpectedPacket struct {
	ResetBundledPacketDueToUnexpectedPacket *logs_pb.ResetBundledPacketDueToUnexpectedPacket `protobuf:"bytes,198,opt,name=reset_bundled_packet_due_to_unexpected_packet,json=resetBundledPacketDueToUnexpectedPacket,proto3,oneof"`
}

func (*logData_Generic) isLogData_Data() {}

func (*logData_Oom) isLogData_Data() {}

func (*logData_RpcConnectionError) isLogData_Data() {}

func (*logData_InvalidProjectName) isLogData_Data() {}

func (*logData_ProjectNotFound) isLogData_Data() {}

func (*logData_ProjectAlreadyExists) isLogData_Data() {}

func (*logData_InvalidConfiguration) isLogData_Data() {}

func (*logData_EntityNotFound) isLogData_Data() {}

func (*logData_ActiveProjectCannotBeDeleted) isLogData_Data() {}

func (*logData_RpcDisconnectionError) isLogData_Data() {}

func (*logData_DroppedLogs) isLogData_Data() {}

func (*logData_OpenedProject) isLogData_Data() {}

func (*logData_CreatedProject) isLogData_Data() {}

func (*logData_ConfigUnavailable) isLogData_Data() {}

func (*logData_InvalidRequest) isLogData_Data() {}

func (*logData_SanityCheckError) isLogData_Data() {}

func (*logData_BagFailedToOpen) isLogData_Data() {}

func (*logData_BagFailedToClose) isLogData_Data() {}

func (*logData_BagConversionFailed) isLogData_Data() {}

func (*logData_BagFailedToWrite) isLogData_Data() {}

func (*logData_CalibrationError) isLogData_Data() {}

func (*logData_ProjectManagerFailedToStartRecording) isLogData_Data() {}

func (*logData_ProjectManagerFailedToStopRecording) isLogData_Data() {}

func (*logData_ServiceConnectionTimedOut) isLogData_Data() {}

func (*logData_BagRecorderAlreadyRunning) isLogData_Data() {}

func (*logData_LicenseServerConnectionError) isLogData_Data() {}

func (*logData_LicenseError) isLogData_Data() {}

func (*logData_LicenseNotFoundError) isLogData_Data() {}

func (*logData_LicenseExpiredError) isLogData_Data() {}

func (*logData_LicenseExceededError) isLogData_Data() {}

func (*logData_LicenseHostMachineError) isLogData_Data() {}

func (*logData_LicensePrivilegeError) isLogData_Data() {}

func (*logData_LicenseActiveInfo) isLogData_Data() {}

func (*logData_MultipleLicensesWarning) isLogData_Data() {}

func (*logData_LicenseCurrentLicenseStatusInfo) isLogData_Data() {}

func (*logData_BagRecordingStoppedInfo) isLogData_Data() {}

func (*logData_BagRecordingFailedToStart) isLogData_Data() {}

func (*logData_BagRecordingStartedInfo) isLogData_Data() {}

func (*logData_ReplayRestartedInfo) isLogData_Data() {}

func (*logData_InputSourceChangeRequestedInfo) isLogData_Data() {}

func (*logData_InputSourceSwitchedInfo) isLogData_Data() {}

func (*logData_RpcTimeoutWarning) isLogData_Data() {}

func (*logData_CannotWriteLogFile) isLogData_Data() {}

func (*logData_PointCloudParsingFailureWarning) isLogData_Data() {}

func (*logData_LidarIsDead) isLogData_Data() {}

func (*logData_LidarIsNotDeadAnymore) isLogData_Data() {}

func (*logData_LidarIsObstructed) isLogData_Data() {}

func (*logData_LidarIsNotObstructedAnymore) isLogData_Data() {}

func (*logData_LidarIsTilted) isLogData_Data() {}

func (*logData_LidarIsNotTiltedAnymore) isLogData_Data() {}

func (*logData_LidarHasBeenAutomaticallyRecalibrated) isLogData_Data() {}

func (*logData_ReceivedFirstDataForLidar) isLogData_Data() {}

func (*logData_TerminationFailureError) isLogData_Data() {}

func (*logData_FrameProcessingError) isLogData_Data() {}

func (*logData_ThreadPoolUnavailableError) isLogData_Data() {}

func (*logData_InvalidArgument) isLogData_Data() {}

func (*logData_ComponentInitializationFailureFatal) isLogData_Data() {}

func (*logData_UnhandledEnumCaseError) isLogData_Data() {}

func (*logData_BagEmptyError) isLogData_Data() {}

func (*logData_DiscardingDataError) isLogData_Data() {}

func (*logData_DiscardingDataWarning) isLogData_Data() {}

func (*logData_NothingToProcess) isLogData_Data() {}

func (*logData_InvalidComponentConfiguration) isLogData_Data() {}

func (*logData_ChannelReceiverNotFoundWarning) isLogData_Data() {}

func (*logData_ModelLoadFailure) isLogData_Data() {}

func (*logData_ModelExecutionFailureError) isLogData_Data() {}

func (*logData_ServiceReadyInfo) isLogData_Data() {}

func (*logData_ModelPreparingInfo) isLogData_Data() {}

func (*logData_ModelInitializedInfo) isLogData_Data() {}

func (*logData_ModelInitializationFailureWarning) isLogData_Data() {}

func (*logData_RosSpinnerStoppedWarning) isLogData_Data() {}

func (*logData_ActorSystemUnavailableError) isLogData_Data() {}

func (*logData_ConfigNodeNotFoundError) isLogData_Data() {}

func (*logData_BagTimestampOutOfOrderError) isLogData_Data() {}

func (*logData_BagReplayUnexpectedTimestampError) isLogData_Data() {}

func (*logData_WebsocketClosedInfo) isLogData_Data() {}

func (*logData_WebsocketOpenedInfo) isLogData_Data() {}

func (*logData_SubscriberDisconnectedInfo) isLogData_Data() {}

func (*logData_ThreadPoolSlowingDownWarning) isLogData_Data() {}

func (*logData_ThreadPoolNotRespondingWarning) isLogData_Data() {}

func (*logData_ThreadPoolBrokenPromiseWarning) isLogData_Data() {}

func (*logData_BoxFittingPointsBelowBaseWarning) isLogData_Data() {}

func (*logData_FailedToRemoveStalePointsWarning) isLogData_Data() {}

func (*logData_IrregularBroadcastingPeriodWarning) isLogData_Data() {}

func (*logData_ClustererPointsOutOfRangeWarning) isLogData_Data() {}

func (*logData_InternalError) isLogData_Data() {}

func (*logData_InternalFatal) isLogData_Data() {}

func (*logData_ServiceStartingInfo) isLogData_Data() {}

func (*logData_ConfigNodeNotFoundFatal) isLogData_Data() {}

func (*logData_ServiceSetupError) isLogData_Data() {}

func (*logData_FilesystemError) isLogData_Data() {}

func (*logData_InvalidPresetWarning) isLogData_Data() {}

func (*logData_WebsocketFailedClearPendingError) isLogData_Data() {}

func (*logData_WebsocketFailedToStopError) isLogData_Data() {}

func (*logData_WebsocketFailedToCreateError) isLogData_Data() {}

func (*logData_UnexpectedRpcError) isLogData_Data() {}

func (*logData_LicensePollFailed) isLogData_Data() {}

func (*logData_LicenseExpiredWarning) isLogData_Data() {}

func (*logData_LicenseUsageExceededWarning) isLogData_Data() {}

func (*logData_StaticThreadPoolSlowTaskWarning) isLogData_Data() {}

func (*logData_RpcUnsupportedServiceWarning) isLogData_Data() {}

func (*logData_WebsocketHandlerProblem) isLogData_Data() {}

func (*logData_WebsocketDeserializeError) isLogData_Data() {}

func (*logData_WebsocketExpiredRpcEndpointError) isLogData_Data() {}

func (*logData_WebsocketQueueOverloadedWarning) isLogData_Data() {}

func (*logData_RpcFailedToNotifyWarning) isLogData_Data() {}

func (*logData_ConfigSubscriptionFailedWarning) isLogData_Data() {}

func (*logData_ThreadPoolClampedWorkersWarning) isLogData_Data() {}

func (*logData_StoppingHorusBagRecorderAlreadyStopped) isLogData_Data() {}

func (*logData_RecorderConfigUpdateWhileRunning) isLogData_Data() {}

func (*logData_ClampingDataWarning) isLogData_Data() {}

func (*logData_LidarIncompatibleValues) isLogData_Data() {}

func (*logData_CannotDetermineContainerIdError) isLogData_Data() {}

func (*logData_StartedLidarDriver) isLogData_Data() {}

func (*logData_CannotStartLidarDriver) isLogData_Data() {}

func (*logData_StoppedLidarDriver) isLogData_Data() {}

func (*logData_CannotStopLidarDriver) isLogData_Data() {}

func (*logData_RestartedLidarDriver) isLogData_Data() {}

func (*logData_CannotRestartLidarDriver) isLogData_Data() {}

func (*logData_RemovedUnusedLidarDriver) isLogData_Data() {}

func (*logData_CannotRemoveUnusedLidarDriver) isLogData_Data() {}

func (*logData_LidarDriverGcFailure) isLogData_Data() {}

func (*logData_IdSpaceExhausted) isLogData_Data() {}

func (*logData_PreprocessingToPointAggregatorPointsSkipped) isLogData_Data() {}

func (*logData_MinMsgIntervalLessThanThreshold) isLogData_Data() {}

func (*logData_FailedToCleanupRosWarning) isLogData_Data() {}

func (*logData_RpcDisconnectedWarning) isLogData_Data() {}

func (*logData_RpcUnhandledError) isLogData_Data() {}

func (*logData_TimeDiffOutOfRangeWarning) isLogData_Data() {}

func (*logData_TensorrtLog) isLogData_Data() {}

func (*logData_BuildingTensorrtEngineInfo) isLogData_Data() {}

func (*logData_LoadingTensorrtEngineInfo) isLogData_Data() {}

func (*logData_CalibrationMapNotFound) isLogData_Data() {}

func (*logData_CalibrationMapNotValid) isLogData_Data() {}

func (*logData_CalibrationMapPathAlreadyExists) isLogData_Data() {}

func (*logData_FailedToSaveCalibrationMap) isLogData_Data() {}

func (*logData_FailedToRemoveCalibrationMap) isLogData_Data() {}

func (*logData_FailedToIterateInDirectory) isLogData_Data() {}

func (*logData_MapBasedCalibrationWithoutMapLoading) isLogData_Data() {}

func (*logData_MapBasedCalibrationAlreadyRunning) isLogData_Data() {}

func (*logData_CancelMapBasedCalibrationNotRunning) isLogData_Data() {}

func (*logData_BagStreamNotFound) isLogData_Data() {}

func (*logData_EvaluationBagStartedInfo) isLogData_Data() {}

func (*logData_EvaluationBagFinishedInfo) isLogData_Data() {}

func (*logData_BagNotFound) isLogData_Data() {}

func (*logData_BuildingPipelineInfo) isLogData_Data() {}

func (*logData_BagIsNotEvaluation) isLogData_Data() {}

func (*logData_HorusBagRunning) isLogData_Data() {}

func (*logData_AutoGroundCalibrationWarning) isLogData_Data() {}

func (*logData_AutoGroundCalibrationError) isLogData_Data() {}

func (*logData_ObjectDetectorNotLoadedWarning) isLogData_Data() {}

func (*logData_CalibrationIsRunningError) isLogData_Data() {}

func (*logData_ModelInitInProgressInfo) isLogData_Data() {}

func (*logData_RpcTimeoutWithResolutionWarning) isLogData_Data() {}

func (*logData_CalibrationWasCancelledInfo) isLogData_Data() {}

func (*logData_CalibrationMapRecordingFailedToStart) isLogData_Data() {}

func (*logData_DetectionPipelineRequestedResetInfo) isLogData_Data() {}

func (*logData_PreprocessingServicePipelineUnavailable) isLogData_Data() {}

func (*logData_CircularRecordingDisabledWarning) isLogData_Data() {}

func (*logData_SnapshotAlreadyRunningWarning) isLogData_Data() {}

func (*logData_ActiveProjectChangedInfo) isLogData_Data() {}

func (*logData_ProjectConfigUpdatedInfo) isLogData_Data() {}

func (*logData_InvalidLidarTimestamp) isLogData_Data() {}

func (*logData_CalibrationAccumulatingPointsInfo) isLogData_Data() {}

func (*logData_SparseNoiseFilterUsageNonRotationalLidars) isLogData_Data() {}

func (*logData_FileWriteWarning) isLogData_Data() {}

func (*logData_LicenseForbiddenFeature) isLogData_Data() {}

func (*logData_FailedToUpdateConfiguration) isLogData_Data() {}

func (*logData_ObstructionDetectorBadReferenceWarning) isLogData_Data() {}

func (*logData_ProjectFileInvalidPermissionsError) isLogData_Data() {}

func (*logData_PipelineSchedulerError) isLogData_Data() {}

func (*logData_MultiLidarCalibrationWarning) isLogData_Data() {}

func (*logData_MultiLidarCalibrationError) isLogData_Data() {}

func (*logData_OldBagWarning) isLogData_Data() {}

func (*logData_UpgradingBagInfo) isLogData_Data() {}

func (*logData_BagCalibrationSaveFailed) isLogData_Data() {}

func (*logData_BagUpgradeFailed) isLogData_Data() {}

func (*logData_UnknownLidarError) isLogData_Data() {}

func (*logData_InvalidPointCloudWarning) isLogData_Data() {}

func (*logData_LidarIsDroppingPackets) isLogData_Data() {}

func (*logData_RemovedInvalidLidarsFromConfigWarning) isLogData_Data() {}

func (*logData_CalibrationMapRecordingFailed) isLogData_Data() {}

func (*logData_DetectionNodeNotFoundError) isLogData_Data() {}

func (*logData_CreatedVersionBackupInfo) isLogData_Data() {}

func (*logData_PlyFileLoadFailedError) isLogData_Data() {}

func (*logData_HesaiDriverLifecycle) isLogData_Data() {}

func (*logData_HesaiDriverError) isLogData_Data() {}

func (*logData_HesaiPacketProcessingFailed) isLogData_Data() {}

func (*logData_HesaiCorrectionFileError) isLogData_Data() {}

func (*logData_HesaiPacketStatistics) isLogData_Data() {}

func (*logData_PlyFileWriteFailedError) isLogData_Data() {}

func (*logData_ProjectSaveError) isLogData_Data() {}

func (*logData_SaveStaticEnvironmentSuccess) isLogData_Data() {}

func (*logData_SaveStaticEnvironmentFailed) isLogData_Data() {}

func (*logData_LoadStaticEnvironmentSuccess) isLogData_Data() {}

func (*logData_LoadStaticEnvironmentFailed) isLogData_Data() {}

func (*logData_AttemptToInjectInvalidLidarIdWarning) isLogData_Data() {}

func (*logData_ResetBundledPacketDueToUnexpectedPacket) isLogData_Data() {}

var File_horus_pb_logs_message_proto protoreflect.FileDescriptor

var file_horus_pb_logs_message_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x1a, 0x18, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70,
	0x62, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6c, 0x6f, 0x67, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x66, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbd, 0xa3, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x03, 0x6f, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4f, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x6f, 0x6d,
	0x12, 0x55, 0x0a, 0x14, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52,
	0x70, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x12, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x15, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x75, 0x0a, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x42, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x42, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x17, 0x72, 0x70, 0x63, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x15, 0x72, 0x70, 0x63, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x48, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x51, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x62, 0x61, 0x67, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x4f,
	0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x62, 0x61, 0x67, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x62, 0x61, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x62, 0x61, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x62,
	0x61, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x62, 0x61, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x42, 0x61, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x62, 0x61, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x29, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x28, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x23,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x12, 0x6b, 0x0a, 0x1c, 0x62, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x19, 0x62, 0x61, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a,
	0x1f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x17, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x15, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x5c, 0x0a, 0x16, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x93, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x65, 0x0a, 0x1a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x17, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x17, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x15, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x95,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x19,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x7e, 0x0a, 0x23, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x1f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x1a, 0x62, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x17, 0x62, 0x61, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c, 0x0a, 0x1d, 0x62, 0x61,
	0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x42, 0x61, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x19, 0x62,
	0x61, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x65, 0x0a, 0x1a, 0x62, 0x61, 0x67, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x62, 0x61, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x58, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7b, 0x0a, 0x22, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x1a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a,
	0x13, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11,
	0x72, 0x70, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x56, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x7e, 0x0a, 0x23, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x69, 0x64,
	0x61, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x49, 0x73, 0x44, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x6c, 0x69, 0x64, 0x61, 0x72, 0x49, 0x73, 0x44, 0x65, 0x61, 0x64, 0x12, 0x60, 0x0a, 0x19, 0x6c,
	0x69, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x5f, 0x61, 0x6e, 0x79, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c,
	0x69, 0x64, 0x61, 0x72, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x79,
	0x6d, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x15, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x49, 0x73, 0x4e,
	0x6f, 0x74, 0x44, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x79, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x52, 0x0a,
	0x13, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x64, 0x61, 0x72,
	0x49, 0x73, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11,
	0x6c, 0x69, 0x64, 0x61, 0x72, 0x49, 0x73, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x72, 0x0a, 0x1f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x79,
	0x6d, 0x6f, 0x72, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x64, 0x61, 0x72,
	0x49, 0x73, 0x4e, 0x6f, 0x74, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64, 0x41,
	0x6e, 0x79, 0x6d, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x49,
	0x73, 0x4e, 0x6f, 0x74, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6e,
	0x79, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x69,
	0x73, 0x5f, 0x74, 0x69, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c,
	0x69, 0x64, 0x61, 0x72, 0x49, 0x73, 0x54, 0x69, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d,
	0x6c, 0x69, 0x64, 0x61, 0x72, 0x49, 0x73, 0x54, 0x69, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x66, 0x0a,
	0x1b, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x74, 0x69,
	0x6c, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x79, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x54, 0x69, 0x6c,
	0x74, 0x65, 0x64, 0x41, 0x6e, 0x79, 0x6d, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x69,
	0x64, 0x61, 0x72, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x54, 0x69, 0x6c, 0x74, 0x65, 0x64, 0x41, 0x6e,
	0x79, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x29, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x48,
	0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x25, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x12, 0x64, 0x0a, 0x19, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x17, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x16,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6e, 0x0a, 0x1d, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1a, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x10, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x74, 0x61,
	0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x23, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x46, 0x61, 0x74,
	0x61, 0x6c, 0x12, 0x62, 0x0a, 0x19, 0x75, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x43, 0x61, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x16,
	0x75, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x62, 0x61, 0x67, 0x5f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x42, 0x61, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0d, 0x62, 0x61, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x58,
	0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x76, 0x0a, 0x1f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7b, 0x0a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4f,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x6e, 0x0a, 0x1d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x4f, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x55, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x21, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x68, 0x0a, 0x1b, 0x72, 0x6f,
	0x73, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x52, 0x6f, 0x73, 0x53, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x18, 0x72, 0x6f, 0x73, 0x53,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x71, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x73, 0x0a, 0x20, 0x62, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x61, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x25, 0x62, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x6e,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x21, 0x62, 0x61, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x15, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x13, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x15, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x6d, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x75,
	0x0a, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x7b, 0x0a, 0x22, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x1e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x7b, 0x0a, 0x22, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x1e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x82, 0x01, 0x0a, 0x25, 0x62, 0x6f, 0x78, 0x5f, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x42, 0x6f, 0x78, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x42, 0x65, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x20, 0x62, 0x6f, 0x78, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54,
	0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x25, 0x69, 0x72,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x22,
	0x69, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x74, 0x61, 0x6c,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46,
	0x61, 0x74, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x46, 0x61, 0x74, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x66, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x10, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x24, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x57,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x20, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x1e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x58, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1a,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54,
	0x6f, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x20, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x59,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x1c, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x55, 0x0a, 0x14, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x70, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x17,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x15, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x71, 0x0a, 0x1e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x5d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x1b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x7f, 0x0a, 0x24, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x74, 0x0a, 0x1f, 0x72, 0x70, 0x63, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x55, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x70, 0x63, 0x55, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x19, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x17, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x6a, 0x0a, 0x1b,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x24, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72,
	0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x20, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x70, 0x63, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x7d, 0x0a, 0x22,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1f, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x1c, 0x72,
	0x70, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x18, 0x72, 0x70,
	0x63, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x7d, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x7e, 0x0a, 0x23, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6c, 0x61,
	0x6d, 0x70, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x1f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x43, 0x6c, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x2b, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x72, 0x75, 0x73, 0x42, 0x61, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x26, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x6f,
	0x72, 0x75, 0x73, 0x42, 0x61, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x81, 0x01, 0x0a,
	0x24, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x68, 0x69, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x58, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x19, 0x6c, 0x69,
	0x64, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69,
	0x64, 0x61, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x7e, 0x0a, 0x23, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x1f, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x55, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x64, 0x61,
	0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x64, 0x61,
	0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x19, 0x63, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x14, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x5f, 0x0a, 0x18, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x6f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x4c,
	0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x15, 0x63, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x64,
	0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x68, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x18, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x1b, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x64,
	0x61, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x64,
	0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x78, 0x0a, 0x21, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x64,
	0x61, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x1d, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x5c,
	0x0a, 0x17, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x67,
	0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x47, 0x63, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x47, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x12,
	0x69, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x69, 0x64, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0xa3, 0x01,
	0x0a, 0x30, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x48, 0x00, 0x52, 0x2b, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x7f, 0x0a, 0x24, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x77, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x48, 0x00, 0x52, 0x1f, 0x6d, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6c, 0x0a, 0x1d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x73, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x6f, 0x73, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x19, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54,
	0x6f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x6f, 0x73, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x61, 0x0a, 0x18, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x79,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x16, 0x72,
	0x70, 0x63, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x13, 0x72, 0x70, 0x63, 0x5f, 0x75, 0x6e, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x7a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x72, 0x70, 0x63, 0x55, 0x6e, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6d, 0x0a, 0x1e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x7b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x19, 0x74,
	0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x6e, 0x0a, 0x1d, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x72, 0x74, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x72,
	0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x72, 0x74, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x1c, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x72, 0x74, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x72, 0x74, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x72, 0x74, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x62, 0x0a, 0x19, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x16, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x63, 0x0a, 0x19, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x00, 0x52, 0x16, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x7f, 0x0a, 0x23, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x1f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x50,
	0x61, 0x74, 0x68, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x70, 0x0a, 0x1e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x61,
	0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f,
	0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x76, 0x0a, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x70, 0x0a, 0x1e, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x1a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x8f, 0x01, 0x0a,
	0x29, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x4c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x24, 0x6d, 0x61, 0x70, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x85,
	0x01, 0x0a, 0x25, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x4d, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x21, 0x6d, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x8c, 0x01, 0x0a, 0x28, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x23, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x14, 0x62, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x88, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x69, 0x0a, 0x1b, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c, 0x0a, 0x1c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x62, 0x61, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x67, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x16, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x14, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x15, 0x62, 0x61, 0x67, 0x5f, 0x69, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8d,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x62, 0x61, 0x67, 0x49,
	0x73, 0x4e, 0x6f, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x11, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x48, 0x6f, 0x72, 0x75, 0x73,
	0x42, 0x61, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x42, 0x61, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x75, 0x0a,
	0x1f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6f, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x7c, 0x0a, 0x22, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x1e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x6c, 0x0a, 0x1c, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x67, 0x0a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x69,
	0x74, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x17, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7f, 0x0a, 0x23, 0x72, 0x70,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1f, 0x72, 0x70, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x72, 0x0a, 0x1e, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x9b, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x1b, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x61, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x8f, 0x01, 0x0a, 0x29, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x9c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x24, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x8b, 0x01, 0x0a, 0x27, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x9d, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x23, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x96, 0x01, 0x0a, 0x2a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x9e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x27, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x20, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x78, 0x0a, 0x20,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x69, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x17,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c,
	0x69, 0x64, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x84, 0x01,
	0x0a, 0x24, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x21, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x9f, 0x01, 0x0a, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x73, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x6e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x73, 0x48, 0x00, 0x52, 0x29, 0x73, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x6e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x69, 0x64, 0x61, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xa6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x19, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x72, 0x0a, 0x1e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x94, 0x01, 0x0a, 0x2a, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x26, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x26, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x22, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x18, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x16, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x1f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xac, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x1c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x6f, 0x0a, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69,
	0x64, 0x61, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x64, 0x61,
	0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x47, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4f, 0x6c, 0x64, 0x42,
	0x61, 0x67, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6c, 0x64,
	0x42, 0x61, 0x67, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x12, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a, 0x1b,
	0x62, 0x61, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0xb0, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x62,
	0x61, 0x67, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x62, 0x61, 0x67, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0xb1, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x42, 0x61, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x62, 0x61, 0x67, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x13, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c,
	0x69, 0x64, 0x61, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x69,
	0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xb3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x18, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x19, 0x6c, 0x69, 0x64,
	0x61, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69,
	0x64, 0x61, 0x72, 0x49, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x49, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x92,
	0x01, 0x0a, 0x2a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xb5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x25, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x64, 0x61,
	0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x78, 0x0a, 0x20, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1d,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x70, 0x0a,
	0x1e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x69, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x1a, 0x70, 0x6c,
	0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x50, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x16, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x5c, 0x0a, 0x16, 0x68, 0x65, 0x73, 0x61, 0x69, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x48, 0x65, 0x73, 0x61, 0x69, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x14, 0x68, 0x65, 0x73, 0x61, 0x69, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x50,
	0x0a, 0x12, 0x68, 0x65, 0x73, 0x61, 0x69, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x48, 0x65, 0x73, 0x61,
	0x69, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10,
	0x68, 0x65, 0x73, 0x61, 0x69, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x72, 0x0a, 0x1e, 0x68, 0x65, 0x73, 0x61, 0x69, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x48, 0x65, 0x73, 0x61, 0x69, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x68, 0x65, 0x73, 0x61, 0x69, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x1b, 0x68, 0x65, 0x73, 0x61, 0x69, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x48, 0x65, 0x73, 0x61, 0x69,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x18, 0x68, 0x65, 0x73, 0x61, 0x69, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x5f, 0x0a, 0x17, 0x68, 0x65, 0x73, 0x61, 0x69, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x48, 0x65, 0x73, 0x61, 0x69, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x15, 0x68, 0x65, 0x73, 0x61, 0x69,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x67, 0x0a, 0x1b, 0x70, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x17, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x61, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x1f, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0xc1,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x72, 0x0a, 0x1e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x61, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x75, 0x0a, 0x1f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x1c, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x72, 0x0a,
	0x1e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x90, 0x01, 0x0a, 0x2a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54,
	0x6f, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69,
	0x64, 0x61, 0x72, 0x49, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x24,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x49, 0x64, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x99, 0x01, 0x0a, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x75,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x75, 0x65, 0x54, 0x6f, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x27, 0x72, 0x65, 0x73, 0x65, 0x74, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x75, 0x65, 0x54, 0x6f,
	0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_horus_pb_logs_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_horus_pb_logs_message_proto_goTypes = []any{
	(*LogMessage)(nil),                                          // 0: horus.pb.LogMessage
	(*LogData)(nil),                                             // 1: horus.pb.LogData
	(*metadata_pb.LogMetadata)(nil),                             // 2: horus.pb.LogMetadata
	(*logs_pb.Generic)(nil),                                     // 3: horus.pb.logs.Generic
	(*logs_pb.Oom)(nil),                                         // 4: horus.pb.logs.Oom
	(*logs_pb.RpcConnectionError)(nil),                          // 5: horus.pb.logs.RpcConnectionError
	(*logs_pb.InvalidProjectName)(nil),                          // 6: horus.pb.logs.InvalidProjectName
	(*logs_pb.ProjectNotFound)(nil),                             // 7: horus.pb.logs.ProjectNotFound
	(*logs_pb.ProjectAlreadyExists)(nil),                        // 8: horus.pb.logs.ProjectAlreadyExists
	(*logs_pb.InvalidConfiguration)(nil),                        // 9: horus.pb.logs.InvalidConfiguration
	(*logs_pb.EntityNotFound)(nil),                              // 10: horus.pb.logs.EntityNotFound
	(*logs_pb.ActiveProjectCannotBeDeleted)(nil),                // 11: horus.pb.logs.ActiveProjectCannotBeDeleted
	(*logs_pb.RpcDisconnectionError)(nil),                       // 12: horus.pb.logs.RpcDisconnectionError
	(*logs_pb.DroppedLogs)(nil),                                 // 13: horus.pb.logs.DroppedLogs
	(*logs_pb.OpenedProject)(nil),                               // 14: horus.pb.logs.OpenedProject
	(*logs_pb.CreatedProject)(nil),                              // 15: horus.pb.logs.CreatedProject
	(*logs_pb.ConfigUnavailable)(nil),                           // 16: horus.pb.logs.ConfigUnavailable
	(*logs_pb.InvalidRequest)(nil),                              // 17: horus.pb.logs.InvalidRequest
	(*logs_pb.SanityCheckError)(nil),                            // 18: horus.pb.logs.SanityCheckError
	(*logs_pb.BagFailedToOpen)(nil),                             // 19: horus.pb.logs.BagFailedToOpen
	(*logs_pb.BagFailedToClose)(nil),                            // 20: horus.pb.logs.BagFailedToClose
	(*logs_pb.BagConversionFailed)(nil),                         // 21: horus.pb.logs.BagConversionFailed
	(*logs_pb.BagFailedToWrite)(nil),                            // 22: horus.pb.logs.BagFailedToWrite
	(*logs_pb.CalibrationError)(nil),                            // 23: horus.pb.logs.CalibrationError
	(*logs_pb.ProjectManagerFailedToStartRecording)(nil),        // 24: horus.pb.logs.ProjectManagerFailedToStartRecording
	(*logs_pb.ProjectManagerFailedToStopRecording)(nil),         // 25: horus.pb.logs.ProjectManagerFailedToStopRecording
	(*logs_pb.ServiceConnectionTimedOut)(nil),                   // 26: horus.pb.logs.ServiceConnectionTimedOut
	(*logs_pb.BagRecorderAlreadyRunning)(nil),                   // 27: horus.pb.logs.BagRecorderAlreadyRunning
	(*logs_pb.LicenseServerConnectionError)(nil),                // 28: horus.pb.logs.LicenseServerConnectionError
	(*logs_pb.LicenseError)(nil),                                // 29: horus.pb.logs.LicenseError
	(*logs_pb.LicenseNotFoundError)(nil),                        // 30: horus.pb.logs.LicenseNotFoundError
	(*logs_pb.LicenseExpiredError)(nil),                         // 31: horus.pb.logs.LicenseExpiredError
	(*logs_pb.LicenseExceededError)(nil),                        // 32: horus.pb.logs.LicenseExceededError
	(*logs_pb.LicenseHostMachineError)(nil),                     // 33: horus.pb.logs.LicenseHostMachineError
	(*logs_pb.LicensePrivilegeError)(nil),                       // 34: horus.pb.logs.LicensePrivilegeError
	(*logs_pb.LicenseActiveInfo)(nil),                           // 35: horus.pb.logs.LicenseActiveInfo
	(*logs_pb.MultipleLicensesWarning)(nil),                     // 36: horus.pb.logs.MultipleLicensesWarning
	(*logs_pb.LicenseCurrentLicenseStatusInfo)(nil),             // 37: horus.pb.logs.LicenseCurrentLicenseStatusInfo
	(*logs_pb.BagRecordingStoppedInfo)(nil),                     // 38: horus.pb.logs.BagRecordingStoppedInfo
	(*logs_pb.BagRecordingFailedToStart)(nil),                   // 39: horus.pb.logs.BagRecordingFailedToStart
	(*logs_pb.BagRecordingStartedInfo)(nil),                     // 40: horus.pb.logs.BagRecordingStartedInfo
	(*logs_pb.ReplayRestartedInfo)(nil),                         // 41: horus.pb.logs.ReplayRestartedInfo
	(*logs_pb.InputSourceChangeRequestedInfo)(nil),              // 42: horus.pb.logs.InputSourceChangeRequestedInfo
	(*logs_pb.InputSourceSwitchedInfo)(nil),                     // 43: horus.pb.logs.InputSourceSwitchedInfo
	(*logs_pb.RpcTimeoutWarning)(nil),                           // 44: horus.pb.logs.RpcTimeoutWarning
	(*logs_pb.CannotWriteLogFile)(nil),                          // 45: horus.pb.logs.CannotWriteLogFile
	(*logs_pb.PointCloudParsingFailureWarning)(nil),             // 46: horus.pb.logs.PointCloudParsingFailureWarning
	(*logs_pb.LidarIsDead)(nil),                                 // 47: horus.pb.logs.LidarIsDead
	(*logs_pb.LidarIsNotDeadAnymore)(nil),                       // 48: horus.pb.logs.LidarIsNotDeadAnymore
	(*logs_pb.LidarIsObstructed)(nil),                           // 49: horus.pb.logs.LidarIsObstructed
	(*logs_pb.LidarIsNotObstructedAnymore)(nil),                 // 50: horus.pb.logs.LidarIsNotObstructedAnymore
	(*logs_pb.LidarIsTilted)(nil),                               // 51: horus.pb.logs.LidarIsTilted
	(*logs_pb.LidarIsNotTiltedAnymore)(nil),                     // 52: horus.pb.logs.LidarIsNotTiltedAnymore
	(*logs_pb.LidarHasBeenAutomaticallyRecalibrated)(nil),       // 53: horus.pb.logs.LidarHasBeenAutomaticallyRecalibrated
	(*logs_pb.ReceivedFirstDataForLidar)(nil),                   // 54: horus.pb.logs.ReceivedFirstDataForLidar
	(*logs_pb.TerminationFailureError)(nil),                     // 55: horus.pb.logs.TerminationFailureError
	(*logs_pb.FrameProcessingError)(nil),                        // 56: horus.pb.logs.FrameProcessingError
	(*logs_pb.ThreadPoolUnavailableError)(nil),                  // 57: horus.pb.logs.ThreadPoolUnavailableError
	(*logs_pb.InvalidArgument)(nil),                             // 58: horus.pb.logs.InvalidArgument
	(*logs_pb.ComponentInitializationFailureFatal)(nil),         // 59: horus.pb.logs.ComponentInitializationFailureFatal
	(*logs_pb.UnhandledEnumCaseError)(nil),                      // 60: horus.pb.logs.UnhandledEnumCaseError
	(*logs_pb.BagEmptyError)(nil),                               // 61: horus.pb.logs.BagEmptyError
	(*logs_pb.DiscardingDataError)(nil),                         // 62: horus.pb.logs.DiscardingDataError
	(*logs_pb.DiscardingDataWarning)(nil),                       // 63: horus.pb.logs.DiscardingDataWarning
	(*logs_pb.NothingToProcess)(nil),                            // 64: horus.pb.logs.NothingToProcess
	(*logs_pb.InvalidComponentConfiguration)(nil),               // 65: horus.pb.logs.InvalidComponentConfiguration
	(*logs_pb.ChannelReceiverNotFoundWarning)(nil),              // 66: horus.pb.logs.ChannelReceiverNotFoundWarning
	(*logs_pb.ModelLoadFailure)(nil),                            // 67: horus.pb.logs.ModelLoadFailure
	(*logs_pb.ModelExecutionFailureError)(nil),                  // 68: horus.pb.logs.ModelExecutionFailureError
	(*logs_pb.ServiceReadyInfo)(nil),                            // 69: horus.pb.logs.ServiceReadyInfo
	(*logs_pb.ModelPreparingInfo)(nil),                          // 70: horus.pb.logs.ModelPreparingInfo
	(*logs_pb.ModelInitializedInfo)(nil),                        // 71: horus.pb.logs.ModelInitializedInfo
	(*logs_pb.ModelInitializationFailureWarning)(nil),           // 72: horus.pb.logs.ModelInitializationFailureWarning
	(*logs_pb.RosSpinnerStoppedWarning)(nil),                    // 73: horus.pb.logs.RosSpinnerStoppedWarning
	(*logs_pb.ActorSystemUnavailableError)(nil),                 // 74: horus.pb.logs.ActorSystemUnavailableError
	(*logs_pb.ConfigNodeNotFoundError)(nil),                     // 75: horus.pb.logs.ConfigNodeNotFoundError
	(*logs_pb.BagTimestampOutOfOrderError)(nil),                 // 76: horus.pb.logs.BagTimestampOutOfOrderError
	(*logs_pb.BagReplayUnexpectedTimestampError)(nil),           // 77: horus.pb.logs.BagReplayUnexpectedTimestampError
	(*logs_pb.WebsocketClosedInfo)(nil),                         // 78: horus.pb.logs.WebsocketClosedInfo
	(*logs_pb.WebsocketOpenedInfo)(nil),                         // 79: horus.pb.logs.WebsocketOpenedInfo
	(*logs_pb.SubscriberDisconnectedInfo)(nil),                  // 80: horus.pb.logs.SubscriberDisconnectedInfo
	(*logs_pb.ThreadPoolSlowingDownWarning)(nil),                // 81: horus.pb.logs.ThreadPoolSlowingDownWarning
	(*logs_pb.ThreadPoolNotRespondingWarning)(nil),              // 82: horus.pb.logs.ThreadPoolNotRespondingWarning
	(*logs_pb.ThreadPoolBrokenPromiseWarning)(nil),              // 83: horus.pb.logs.ThreadPoolBrokenPromiseWarning
	(*logs_pb.BoxFittingPointsBelowBaseWarning)(nil),            // 84: horus.pb.logs.BoxFittingPointsBelowBaseWarning
	(*logs_pb.FailedToRemoveStalePointsWarning)(nil),            // 85: horus.pb.logs.FailedToRemoveStalePointsWarning
	(*logs_pb.IrregularBroadcastingPeriodWarning)(nil),          // 86: horus.pb.logs.IrregularBroadcastingPeriodWarning
	(*logs_pb.ClustererPointsOutOfRangeWarning)(nil),            // 87: horus.pb.logs.ClustererPointsOutOfRangeWarning
	(*logs_pb.InternalError)(nil),                               // 88: horus.pb.logs.InternalError
	(*logs_pb.InternalFatal)(nil),                               // 89: horus.pb.logs.InternalFatal
	(*logs_pb.ServiceStartingInfo)(nil),                         // 90: horus.pb.logs.ServiceStartingInfo
	(*logs_pb.ConfigNodeNotFoundFatal)(nil),                     // 91: horus.pb.logs.ConfigNodeNotFoundFatal
	(*logs_pb.ServiceSetupError)(nil),                           // 92: horus.pb.logs.ServiceSetupError
	(*logs_pb.FilesystemError)(nil),                             // 93: horus.pb.logs.FilesystemError
	(*logs_pb.InvalidPresetWarning)(nil),                        // 94: horus.pb.logs.InvalidPresetWarning
	(*logs_pb.WebsocketFailedClearPendingError)(nil),            // 95: horus.pb.logs.WebsocketFailedClearPendingError
	(*logs_pb.WebsocketFailedToStopError)(nil),                  // 96: horus.pb.logs.WebsocketFailedToStopError
	(*logs_pb.WebsocketFailedToCreateError)(nil),                // 97: horus.pb.logs.WebsocketFailedToCreateError
	(*logs_pb.UnexpectedRpcError)(nil),                          // 98: horus.pb.logs.UnexpectedRpcError
	(*logs_pb.LicensePollFailed)(nil),                           // 99: horus.pb.logs.LicensePollFailed
	(*logs_pb.LicenseExpiredWarning)(nil),                       // 100: horus.pb.logs.LicenseExpiredWarning
	(*logs_pb.LicenseUsageExceededWarning)(nil),                 // 101: horus.pb.logs.LicenseUsageExceededWarning
	(*logs_pb.StaticThreadPoolSlowTaskWarning)(nil),             // 102: horus.pb.logs.StaticThreadPoolSlowTaskWarning
	(*logs_pb.RpcUnsupportedServiceWarning)(nil),                // 103: horus.pb.logs.RpcUnsupportedServiceWarning
	(*logs_pb.WebsocketHandlerProblem)(nil),                     // 104: horus.pb.logs.WebsocketHandlerProblem
	(*logs_pb.WebsocketDeserializeError)(nil),                   // 105: horus.pb.logs.WebsocketDeserializeError
	(*logs_pb.WebsocketExpiredRpcEndpointError)(nil),            // 106: horus.pb.logs.WebsocketExpiredRpcEndpointError
	(*logs_pb.WebsocketQueueOverloadedWarning)(nil),             // 107: horus.pb.logs.WebsocketQueueOverloadedWarning
	(*logs_pb.RpcFailedToNotifyWarning)(nil),                    // 108: horus.pb.logs.RpcFailedToNotifyWarning
	(*logs_pb.ConfigSubscriptionFailedWarning)(nil),             // 109: horus.pb.logs.ConfigSubscriptionFailedWarning
	(*logs_pb.ThreadPoolClampedWorkersWarning)(nil),             // 110: horus.pb.logs.ThreadPoolClampedWorkersWarning
	(*logs_pb.StoppingHorusBagRecorderAlreadyStopped)(nil),      // 111: horus.pb.logs.StoppingHorusBagRecorderAlreadyStopped
	(*logs_pb.RecorderConfigUpdateWhileRunning)(nil),            // 112: horus.pb.logs.RecorderConfigUpdateWhileRunning
	(*logs_pb.ClampingDataWarning)(nil),                         // 113: horus.pb.logs.ClampingDataWarning
	(*logs_pb.LidarIncompatibleValues)(nil),                     // 114: horus.pb.logs.LidarIncompatibleValues
	(*logs_pb.CannotDetermineContainerIdError)(nil),             // 115: horus.pb.logs.CannotDetermineContainerIdError
	(*logs_pb.StartedLidarDriver)(nil),                          // 116: horus.pb.logs.StartedLidarDriver
	(*logs_pb.CannotStartLidarDriver)(nil),                      // 117: horus.pb.logs.CannotStartLidarDriver
	(*logs_pb.StoppedLidarDriver)(nil),                          // 118: horus.pb.logs.StoppedLidarDriver
	(*logs_pb.CannotStopLidarDriver)(nil),                       // 119: horus.pb.logs.CannotStopLidarDriver
	(*logs_pb.RestartedLidarDriver)(nil),                        // 120: horus.pb.logs.RestartedLidarDriver
	(*logs_pb.CannotRestartLidarDriver)(nil),                    // 121: horus.pb.logs.CannotRestartLidarDriver
	(*logs_pb.RemovedUnusedLidarDriver)(nil),                    // 122: horus.pb.logs.RemovedUnusedLidarDriver
	(*logs_pb.CannotRemoveUnusedLidarDriver)(nil),               // 123: horus.pb.logs.CannotRemoveUnusedLidarDriver
	(*logs_pb.LidarDriverGcFailure)(nil),                        // 124: horus.pb.logs.LidarDriverGcFailure
	(*logs_pb.IdSpaceExhausted)(nil),                            // 125: horus.pb.logs.IdSpaceExhausted
	(*logs_pb.PreprocessingToPointAggregatorPointsSkipped)(nil), // 126: horus.pb.logs.PreprocessingToPointAggregatorPointsSkipped
	(*logs_pb.MinMsgIntervalLessThanThreshold)(nil),             // 127: horus.pb.logs.MinMsgIntervalLessThanThreshold
	(*logs_pb.FailedToCleanupRosWarning)(nil),                   // 128: horus.pb.logs.FailedToCleanupRosWarning
	(*logs_pb.RpcDisconnectedWarning)(nil),                      // 129: horus.pb.logs.RpcDisconnectedWarning
	(*logs_pb.RpcUnhandledError)(nil),                           // 130: horus.pb.logs.RpcUnhandledError
	(*logs_pb.TimeDiffOutOfRangeWarning)(nil),                   // 131: horus.pb.logs.TimeDiffOutOfRangeWarning
	(*logs_pb.TensorrtLog)(nil),                                 // 132: horus.pb.logs.TensorrtLog
	(*logs_pb.BuildingTensorrtEngineInfo)(nil),                  // 133: horus.pb.logs.BuildingTensorrtEngineInfo
	(*logs_pb.LoadingTensorrtEngineInfo)(nil),                   // 134: horus.pb.logs.LoadingTensorrtEngineInfo
	(*logs_pb.CalibrationMapNotFound)(nil),                      // 135: horus.pb.logs.CalibrationMapNotFound
	(*logs_pb.CalibrationMapNotValid)(nil),                      // 136: horus.pb.logs.CalibrationMapNotValid
	(*logs_pb.CalibrationMapPathAlreadyExists)(nil),             // 137: horus.pb.logs.CalibrationMapPathAlreadyExists
	(*logs_pb.FailedToSaveCalibrationMap)(nil),                  // 138: horus.pb.logs.FailedToSaveCalibrationMap
	(*logs_pb.FailedToRemoveCalibrationMap)(nil),                // 139: horus.pb.logs.FailedToRemoveCalibrationMap
	(*logs_pb.FailedToIterateInDirectory)(nil),                  // 140: horus.pb.logs.FailedToIterateInDirectory
	(*logs_pb.MapBasedCalibrationWithoutMapLoading)(nil),        // 141: horus.pb.logs.MapBasedCalibrationWithoutMapLoading
	(*logs_pb.MapBasedCalibrationAlreadyRunning)(nil),           // 142: horus.pb.logs.MapBasedCalibrationAlreadyRunning
	(*logs_pb.CancelMapBasedCalibrationNotRunning)(nil),         // 143: horus.pb.logs.CancelMapBasedCalibrationNotRunning
	(*logs_pb.BagStreamNotFound)(nil),                           // 144: horus.pb.logs.BagStreamNotFound
	(*logs_pb.EvaluationBagStartedInfo)(nil),                    // 145: horus.pb.logs.EvaluationBagStartedInfo
	(*logs_pb.EvaluationBagFinishedInfo)(nil),                   // 146: horus.pb.logs.EvaluationBagFinishedInfo
	(*logs_pb.BagNotFound)(nil),                                 // 147: horus.pb.logs.BagNotFound
	(*logs_pb.BuildingPipelineInfo)(nil),                        // 148: horus.pb.logs.BuildingPipelineInfo
	(*logs_pb.BagIsNotEvaluation)(nil),                          // 149: horus.pb.logs.BagIsNotEvaluation
	(*logs_pb.HorusBagRunning)(nil),                             // 150: horus.pb.logs.HorusBagRunning
	(*logs_pb.AutoGroundCalibrationWarning)(nil),                // 151: horus.pb.logs.AutoGroundCalibrationWarning
	(*logs_pb.AutoGroundCalibrationError)(nil),                  // 152: horus.pb.logs.AutoGroundCalibrationError
	(*logs_pb.ObjectDetectorNotLoadedWarning)(nil),              // 153: horus.pb.logs.ObjectDetectorNotLoadedWarning
	(*logs_pb.CalibrationIsRunningError)(nil),                   // 154: horus.pb.logs.CalibrationIsRunningError
	(*logs_pb.ModelInitInProgressInfo)(nil),                     // 155: horus.pb.logs.ModelInitInProgressInfo
	(*logs_pb.RpcTimeoutWithResolutionWarning)(nil),             // 156: horus.pb.logs.RpcTimeoutWithResolutionWarning
	(*logs_pb.CalibrationWasCancelledInfo)(nil),                 // 157: horus.pb.logs.CalibrationWasCancelledInfo
	(*logs_pb.CalibrationMapRecordingFailedToStart)(nil),        // 158: horus.pb.logs.CalibrationMapRecordingFailedToStart
	(*logs_pb.DetectionPipelineRequestedResetInfo)(nil),         // 159: horus.pb.logs.DetectionPipelineRequestedResetInfo
	(*logs_pb.PreprocessingServicePipelineUnavailable)(nil),     // 160: horus.pb.logs.PreprocessingServicePipelineUnavailable
	(*logs_pb.CircularRecordingDisabledWarning)(nil),            // 161: horus.pb.logs.CircularRecordingDisabledWarning
	(*logs_pb.SnapshotAlreadyRunningWarning)(nil),               // 162: horus.pb.logs.SnapshotAlreadyRunningWarning
	(*logs_pb.ActiveProjectChangedInfo)(nil),                    // 163: horus.pb.logs.ActiveProjectChangedInfo
	(*logs_pb.ProjectConfigUpdatedInfo)(nil),                    // 164: horus.pb.logs.ProjectConfigUpdatedInfo
	(*logs_pb.InvalidLidarTimestamp)(nil),                       // 165: horus.pb.logs.InvalidLidarTimestamp
	(*logs_pb.CalibrationAccumulatingPointsInfo)(nil),           // 166: horus.pb.logs.CalibrationAccumulatingPointsInfo
	(*logs_pb.SparseNoiseFilterUsageNonRotationalLidars)(nil),   // 167: horus.pb.logs.SparseNoiseFilterUsageNonRotationalLidars
	(*logs_pb.FileWriteWarning)(nil),                            // 168: horus.pb.logs.FileWriteWarning
	(*logs_pb.LicenseForbiddenFeature)(nil),                     // 169: horus.pb.logs.LicenseForbiddenFeature
	(*logs_pb.FailedToUpdateConfiguration)(nil),                 // 170: horus.pb.logs.FailedToUpdateConfiguration
	(*logs_pb.ObstructionDetectorBadReferenceWarning)(nil),      // 171: horus.pb.logs.ObstructionDetectorBadReferenceWarning
	(*logs_pb.ProjectFileInvalidPermissionsError)(nil),          // 172: horus.pb.logs.ProjectFileInvalidPermissionsError
	(*logs_pb.PipelineSchedulerError)(nil),                      // 173: horus.pb.logs.PipelineSchedulerError
	(*logs_pb.MultiLidarCalibrationWarning)(nil),                // 174: horus.pb.logs.MultiLidarCalibrationWarning
	(*logs_pb.MultiLidarCalibrationError)(nil),                  // 175: horus.pb.logs.MultiLidarCalibrationError
	(*logs_pb.OldBagWarning)(nil),                               // 176: horus.pb.logs.OldBagWarning
	(*logs_pb.UpgradingBagInfo)(nil),                            // 177: horus.pb.logs.UpgradingBagInfo
	(*logs_pb.BagCalibrationSaveFailed)(nil),                    // 178: horus.pb.logs.BagCalibrationSaveFailed
	(*logs_pb.BagUpgradeFailed)(nil),                            // 179: horus.pb.logs.BagUpgradeFailed
	(*logs_pb.UnknownLidarError)(nil),                           // 180: horus.pb.logs.UnknownLidarError
	(*logs_pb.InvalidPointCloudWarning)(nil),                    // 181: horus.pb.logs.InvalidPointCloudWarning
	(*logs_pb.LidarIsDroppingPackets)(nil),                      // 182: horus.pb.logs.LidarIsDroppingPackets
	(*logs_pb.RemovedInvalidLidarsFromConfigWarning)(nil),       // 183: horus.pb.logs.RemovedInvalidLidarsFromConfigWarning
	(*logs_pb.CalibrationMapRecordingFailed)(nil),               // 184: horus.pb.logs.CalibrationMapRecordingFailed
	(*logs_pb.DetectionNodeNotFoundError)(nil),                  // 185: horus.pb.logs.DetectionNodeNotFoundError
	(*logs_pb.CreatedVersionBackupInfo)(nil),                    // 186: horus.pb.logs.CreatedVersionBackupInfo
	(*logs_pb.PlyFileLoadFailedError)(nil),                      // 187: horus.pb.logs.PlyFileLoadFailedError
	(*logs_pb.HesaiDriverLifecycle)(nil),                        // 188: horus.pb.logs.HesaiDriverLifecycle
	(*logs_pb.HesaiDriverError)(nil),                            // 189: horus.pb.logs.HesaiDriverError
	(*logs_pb.HesaiPacketProcessingFailed)(nil),                 // 190: horus.pb.logs.HesaiPacketProcessingFailed
	(*logs_pb.HesaiCorrectionFileError)(nil),                    // 191: horus.pb.logs.HesaiCorrectionFileError
	(*logs_pb.HesaiPacketStatistics)(nil),                       // 192: horus.pb.logs.HesaiPacketStatistics
	(*logs_pb.PlyFileWriteFailedError)(nil),                     // 193: horus.pb.logs.PlyFileWriteFailedError
	(*logs_pb.ProjectSaveError)(nil),                            // 194: horus.pb.logs.ProjectSaveError
	(*logs_pb.SaveStaticEnvironmentSuccess)(nil),                // 195: horus.pb.logs.SaveStaticEnvironmentSuccess
	(*logs_pb.SaveStaticEnvironmentFailed)(nil),                 // 196: horus.pb.logs.SaveStaticEnvironmentFailed
	(*logs_pb.LoadStaticEnvironmentSuccess)(nil),                // 197: horus.pb.logs.LoadStaticEnvironmentSuccess
	(*logs_pb.LoadStaticEnvironmentFailed)(nil),                 // 198: horus.pb.logs.LoadStaticEnvironmentFailed
	(*logs_pb.AttemptToInjectInvalidLidarIdWarning)(nil),        // 199: horus.pb.logs.AttemptToInjectInvalidLidarIdWarning
	(*logs_pb.ResetBundledPacketDueToUnexpectedPacket)(nil),     // 200: horus.pb.logs.ResetBundledPacketDueToUnexpectedPacket
}
var file_horus_pb_logs_message_proto_depIdxs = []int32{
	2,   // 0: horus.pb.LogMessage.metadata:type_name -> horus.pb.LogMetadata
	1,   // 1: horus.pb.LogMessage.data:type_name -> horus.pb.LogData
	3,   // 2: horus.pb.LogData.generic:type_name -> horus.pb.logs.Generic
	4,   // 3: horus.pb.LogData.oom:type_name -> horus.pb.logs.Oom
	5,   // 4: horus.pb.LogData.rpc_connection_error:type_name -> horus.pb.logs.RpcConnectionError
	6,   // 5: horus.pb.LogData.invalid_project_name:type_name -> horus.pb.logs.InvalidProjectName
	7,   // 6: horus.pb.LogData.project_not_found:type_name -> horus.pb.logs.ProjectNotFound
	8,   // 7: horus.pb.LogData.project_already_exists:type_name -> horus.pb.logs.ProjectAlreadyExists
	9,   // 8: horus.pb.LogData.invalid_configuration:type_name -> horus.pb.logs.InvalidConfiguration
	10,  // 9: horus.pb.LogData.entity_not_found:type_name -> horus.pb.logs.EntityNotFound
	11,  // 10: horus.pb.LogData.active_project_cannot_be_deleted:type_name -> horus.pb.logs.ActiveProjectCannotBeDeleted
	12,  // 11: horus.pb.LogData.rpc_disconnection_error:type_name -> horus.pb.logs.RpcDisconnectionError
	13,  // 12: horus.pb.LogData.dropped_logs:type_name -> horus.pb.logs.DroppedLogs
	14,  // 13: horus.pb.LogData.opened_project:type_name -> horus.pb.logs.OpenedProject
	15,  // 14: horus.pb.LogData.created_project:type_name -> horus.pb.logs.CreatedProject
	16,  // 15: horus.pb.LogData.config_unavailable:type_name -> horus.pb.logs.ConfigUnavailable
	17,  // 16: horus.pb.LogData.invalid_request:type_name -> horus.pb.logs.InvalidRequest
	18,  // 17: horus.pb.LogData.sanity_check_error:type_name -> horus.pb.logs.SanityCheckError
	19,  // 18: horus.pb.LogData.bag_failed_to_open:type_name -> horus.pb.logs.BagFailedToOpen
	20,  // 19: horus.pb.LogData.bag_failed_to_close:type_name -> horus.pb.logs.BagFailedToClose
	21,  // 20: horus.pb.LogData.bag_conversion_failed:type_name -> horus.pb.logs.BagConversionFailed
	22,  // 21: horus.pb.LogData.bag_failed_to_write:type_name -> horus.pb.logs.BagFailedToWrite
	23,  // 22: horus.pb.LogData.calibration_error:type_name -> horus.pb.logs.CalibrationError
	24,  // 23: horus.pb.LogData.project_manager_failed_to_start_recording:type_name -> horus.pb.logs.ProjectManagerFailedToStartRecording
	25,  // 24: horus.pb.LogData.project_manager_failed_to_stop_recording:type_name -> horus.pb.logs.ProjectManagerFailedToStopRecording
	26,  // 25: horus.pb.LogData.service_connection_timed_out:type_name -> horus.pb.logs.ServiceConnectionTimedOut
	27,  // 26: horus.pb.LogData.bag_recorder_already_running:type_name -> horus.pb.logs.BagRecorderAlreadyRunning
	28,  // 27: horus.pb.LogData.license_server_connection_error:type_name -> horus.pb.logs.LicenseServerConnectionError
	29,  // 28: horus.pb.LogData.license_error:type_name -> horus.pb.logs.LicenseError
	30,  // 29: horus.pb.LogData.license_not_found_error:type_name -> horus.pb.logs.LicenseNotFoundError
	31,  // 30: horus.pb.LogData.license_expired_error:type_name -> horus.pb.logs.LicenseExpiredError
	32,  // 31: horus.pb.LogData.license_exceeded_error:type_name -> horus.pb.logs.LicenseExceededError
	33,  // 32: horus.pb.LogData.license_host_machine_error:type_name -> horus.pb.logs.LicenseHostMachineError
	34,  // 33: horus.pb.LogData.license_privilege_error:type_name -> horus.pb.logs.LicensePrivilegeError
	35,  // 34: horus.pb.LogData.license_active_info:type_name -> horus.pb.logs.LicenseActiveInfo
	36,  // 35: horus.pb.LogData.multiple_licenses_warning:type_name -> horus.pb.logs.MultipleLicensesWarning
	37,  // 36: horus.pb.LogData.license_current_license_status_info:type_name -> horus.pb.logs.LicenseCurrentLicenseStatusInfo
	38,  // 37: horus.pb.LogData.bag_recording_stopped_info:type_name -> horus.pb.logs.BagRecordingStoppedInfo
	39,  // 38: horus.pb.LogData.bag_recording_failed_to_start:type_name -> horus.pb.logs.BagRecordingFailedToStart
	40,  // 39: horus.pb.LogData.bag_recording_started_info:type_name -> horus.pb.logs.BagRecordingStartedInfo
	41,  // 40: horus.pb.LogData.replay_restarted_info:type_name -> horus.pb.logs.ReplayRestartedInfo
	42,  // 41: horus.pb.LogData.input_source_change_requested_info:type_name -> horus.pb.logs.InputSourceChangeRequestedInfo
	43,  // 42: horus.pb.LogData.input_source_switched_info:type_name -> horus.pb.logs.InputSourceSwitchedInfo
	44,  // 43: horus.pb.LogData.rpc_timeout_warning:type_name -> horus.pb.logs.RpcTimeoutWarning
	45,  // 44: horus.pb.LogData.cannot_write_log_file:type_name -> horus.pb.logs.CannotWriteLogFile
	46,  // 45: horus.pb.LogData.point_cloud_parsing_failure_warning:type_name -> horus.pb.logs.PointCloudParsingFailureWarning
	47,  // 46: horus.pb.LogData.lidar_is_dead:type_name -> horus.pb.logs.LidarIsDead
	48,  // 47: horus.pb.LogData.lidar_is_not_dead_anymore:type_name -> horus.pb.logs.LidarIsNotDeadAnymore
	49,  // 48: horus.pb.LogData.lidar_is_obstructed:type_name -> horus.pb.logs.LidarIsObstructed
	50,  // 49: horus.pb.LogData.lidar_is_not_obstructed_anymore:type_name -> horus.pb.logs.LidarIsNotObstructedAnymore
	51,  // 50: horus.pb.LogData.lidar_is_tilted:type_name -> horus.pb.logs.LidarIsTilted
	52,  // 51: horus.pb.LogData.lidar_is_not_tilted_anymore:type_name -> horus.pb.logs.LidarIsNotTiltedAnymore
	53,  // 52: horus.pb.LogData.lidar_has_been_automatically_recalibrated:type_name -> horus.pb.logs.LidarHasBeenAutomaticallyRecalibrated
	54,  // 53: horus.pb.LogData.received_first_data_for_lidar:type_name -> horus.pb.logs.ReceivedFirstDataForLidar
	55,  // 54: horus.pb.LogData.termination_failure_error:type_name -> horus.pb.logs.TerminationFailureError
	56,  // 55: horus.pb.LogData.frame_processing_error:type_name -> horus.pb.logs.FrameProcessingError
	57,  // 56: horus.pb.LogData.thread_pool_unavailable_error:type_name -> horus.pb.logs.ThreadPoolUnavailableError
	58,  // 57: horus.pb.LogData.invalid_argument:type_name -> horus.pb.logs.InvalidArgument
	59,  // 58: horus.pb.LogData.component_initialization_failure_fatal:type_name -> horus.pb.logs.ComponentInitializationFailureFatal
	60,  // 59: horus.pb.LogData.unhandled_enum_case_error:type_name -> horus.pb.logs.UnhandledEnumCaseError
	61,  // 60: horus.pb.LogData.bag_empty_error:type_name -> horus.pb.logs.BagEmptyError
	62,  // 61: horus.pb.LogData.discarding_data_error:type_name -> horus.pb.logs.DiscardingDataError
	63,  // 62: horus.pb.LogData.discarding_data_warning:type_name -> horus.pb.logs.DiscardingDataWarning
	64,  // 63: horus.pb.LogData.nothing_to_process:type_name -> horus.pb.logs.NothingToProcess
	65,  // 64: horus.pb.LogData.invalid_component_configuration:type_name -> horus.pb.logs.InvalidComponentConfiguration
	66,  // 65: horus.pb.LogData.channel_receiver_not_found_warning:type_name -> horus.pb.logs.ChannelReceiverNotFoundWarning
	67,  // 66: horus.pb.LogData.model_load_failure:type_name -> horus.pb.logs.ModelLoadFailure
	68,  // 67: horus.pb.LogData.model_execution_failure_error:type_name -> horus.pb.logs.ModelExecutionFailureError
	69,  // 68: horus.pb.LogData.service_ready_info:type_name -> horus.pb.logs.ServiceReadyInfo
	70,  // 69: horus.pb.LogData.model_preparing_info:type_name -> horus.pb.logs.ModelPreparingInfo
	71,  // 70: horus.pb.LogData.model_initialized_info:type_name -> horus.pb.logs.ModelInitializedInfo
	72,  // 71: horus.pb.LogData.model_initialization_failure_warning:type_name -> horus.pb.logs.ModelInitializationFailureWarning
	73,  // 72: horus.pb.LogData.ros_spinner_stopped_warning:type_name -> horus.pb.logs.RosSpinnerStoppedWarning
	74,  // 73: horus.pb.LogData.actor_system_unavailable_error:type_name -> horus.pb.logs.ActorSystemUnavailableError
	75,  // 74: horus.pb.LogData.config_node_not_found_error:type_name -> horus.pb.logs.ConfigNodeNotFoundError
	76,  // 75: horus.pb.LogData.bag_timestamp_out_of_order_error:type_name -> horus.pb.logs.BagTimestampOutOfOrderError
	77,  // 76: horus.pb.LogData.bag_replay_unexpected_timestamp_error:type_name -> horus.pb.logs.BagReplayUnexpectedTimestampError
	78,  // 77: horus.pb.LogData.websocket_closed_info:type_name -> horus.pb.logs.WebsocketClosedInfo
	79,  // 78: horus.pb.LogData.websocket_opened_info:type_name -> horus.pb.logs.WebsocketOpenedInfo
	80,  // 79: horus.pb.LogData.subscriber_disconnected_info:type_name -> horus.pb.logs.SubscriberDisconnectedInfo
	81,  // 80: horus.pb.LogData.thread_pool_slowing_down_warning:type_name -> horus.pb.logs.ThreadPoolSlowingDownWarning
	82,  // 81: horus.pb.LogData.thread_pool_not_responding_warning:type_name -> horus.pb.logs.ThreadPoolNotRespondingWarning
	83,  // 82: horus.pb.LogData.thread_pool_broken_promise_warning:type_name -> horus.pb.logs.ThreadPoolBrokenPromiseWarning
	84,  // 83: horus.pb.LogData.box_fitting_points_below_base_warning:type_name -> horus.pb.logs.BoxFittingPointsBelowBaseWarning
	85,  // 84: horus.pb.LogData.failed_to_remove_stale_points_warning:type_name -> horus.pb.logs.FailedToRemoveStalePointsWarning
	86,  // 85: horus.pb.LogData.irregular_broadcasting_period_warning:type_name -> horus.pb.logs.IrregularBroadcastingPeriodWarning
	87,  // 86: horus.pb.LogData.clusterer_points_out_of_range_warning:type_name -> horus.pb.logs.ClustererPointsOutOfRangeWarning
	88,  // 87: horus.pb.LogData.internal_error:type_name -> horus.pb.logs.InternalError
	89,  // 88: horus.pb.LogData.internal_fatal:type_name -> horus.pb.logs.InternalFatal
	90,  // 89: horus.pb.LogData.service_starting_info:type_name -> horus.pb.logs.ServiceStartingInfo
	91,  // 90: horus.pb.LogData.config_node_not_found_fatal:type_name -> horus.pb.logs.ConfigNodeNotFoundFatal
	92,  // 91: horus.pb.LogData.service_setup_error:type_name -> horus.pb.logs.ServiceSetupError
	93,  // 92: horus.pb.LogData.filesystem_error:type_name -> horus.pb.logs.FilesystemError
	94,  // 93: horus.pb.LogData.invalid_preset_warning:type_name -> horus.pb.logs.InvalidPresetWarning
	95,  // 94: horus.pb.LogData.websocket_failed_clear_pending_error:type_name -> horus.pb.logs.WebsocketFailedClearPendingError
	96,  // 95: horus.pb.LogData.websocket_failed_to_stop_error:type_name -> horus.pb.logs.WebsocketFailedToStopError
	97,  // 96: horus.pb.LogData.websocket_failed_to_create_error:type_name -> horus.pb.logs.WebsocketFailedToCreateError
	98,  // 97: horus.pb.LogData.unexpected_rpc_error:type_name -> horus.pb.logs.UnexpectedRpcError
	99,  // 98: horus.pb.LogData.license_poll_failed:type_name -> horus.pb.logs.LicensePollFailed
	100, // 99: horus.pb.LogData.license_expired_warning:type_name -> horus.pb.logs.LicenseExpiredWarning
	101, // 100: horus.pb.LogData.license_usage_exceeded_warning:type_name -> horus.pb.logs.LicenseUsageExceededWarning
	102, // 101: horus.pb.LogData.static_thread_pool_slow_task_warning:type_name -> horus.pb.logs.StaticThreadPoolSlowTaskWarning
	103, // 102: horus.pb.LogData.rpc_unsupported_service_warning:type_name -> horus.pb.logs.RpcUnsupportedServiceWarning
	104, // 103: horus.pb.LogData.websocket_handler_problem:type_name -> horus.pb.logs.WebsocketHandlerProblem
	105, // 104: horus.pb.LogData.websocket_deserialize_error:type_name -> horus.pb.logs.WebsocketDeserializeError
	106, // 105: horus.pb.LogData.websocket_expired_rpc_endpoint_error:type_name -> horus.pb.logs.WebsocketExpiredRpcEndpointError
	107, // 106: horus.pb.LogData.websocket_queue_overloaded_warning:type_name -> horus.pb.logs.WebsocketQueueOverloadedWarning
	108, // 107: horus.pb.LogData.rpc_failed_to_notify_warning:type_name -> horus.pb.logs.RpcFailedToNotifyWarning
	109, // 108: horus.pb.LogData.config_subscription_failed_warning:type_name -> horus.pb.logs.ConfigSubscriptionFailedWarning
	110, // 109: horus.pb.LogData.thread_pool_clamped_workers_warning:type_name -> horus.pb.logs.ThreadPoolClampedWorkersWarning
	111, // 110: horus.pb.LogData.stopping_horus_bag_recorder_already_stopped:type_name -> horus.pb.logs.StoppingHorusBagRecorderAlreadyStopped
	112, // 111: horus.pb.LogData.recorder_config_update_while_running:type_name -> horus.pb.logs.RecorderConfigUpdateWhileRunning
	113, // 112: horus.pb.LogData.clamping_data_warning:type_name -> horus.pb.logs.ClampingDataWarning
	114, // 113: horus.pb.LogData.lidar_incompatible_values:type_name -> horus.pb.logs.LidarIncompatibleValues
	115, // 114: horus.pb.LogData.cannot_determine_container_id_error:type_name -> horus.pb.logs.CannotDetermineContainerIdError
	116, // 115: horus.pb.LogData.started_lidar_driver:type_name -> horus.pb.logs.StartedLidarDriver
	117, // 116: horus.pb.LogData.cannot_start_lidar_driver:type_name -> horus.pb.logs.CannotStartLidarDriver
	118, // 117: horus.pb.LogData.stopped_lidar_driver:type_name -> horus.pb.logs.StoppedLidarDriver
	119, // 118: horus.pb.LogData.cannot_stop_lidar_driver:type_name -> horus.pb.logs.CannotStopLidarDriver
	120, // 119: horus.pb.LogData.restarted_lidar_driver:type_name -> horus.pb.logs.RestartedLidarDriver
	121, // 120: horus.pb.LogData.cannot_restart_lidar_driver:type_name -> horus.pb.logs.CannotRestartLidarDriver
	122, // 121: horus.pb.LogData.removed_unused_lidar_driver:type_name -> horus.pb.logs.RemovedUnusedLidarDriver
	123, // 122: horus.pb.LogData.cannot_remove_unused_lidar_driver:type_name -> horus.pb.logs.CannotRemoveUnusedLidarDriver
	124, // 123: horus.pb.LogData.lidar_driver_gc_failure:type_name -> horus.pb.logs.LidarDriverGcFailure
	125, // 124: horus.pb.LogData.id_space_exhausted:type_name -> horus.pb.logs.IdSpaceExhausted
	126, // 125: horus.pb.LogData.preprocessing_to_point_aggregator_points_skipped:type_name -> horus.pb.logs.PreprocessingToPointAggregatorPointsSkipped
	127, // 126: horus.pb.LogData.min_msg_interval_less_than_threshold:type_name -> horus.pb.logs.MinMsgIntervalLessThanThreshold
	128, // 127: horus.pb.LogData.failed_to_cleanup_ros_warning:type_name -> horus.pb.logs.FailedToCleanupRosWarning
	129, // 128: horus.pb.LogData.rpc_disconnected_warning:type_name -> horus.pb.logs.RpcDisconnectedWarning
	130, // 129: horus.pb.LogData.rpc_unhandled_error:type_name -> horus.pb.logs.RpcUnhandledError
	131, // 130: horus.pb.LogData.time_diff_out_of_range_warning:type_name -> horus.pb.logs.TimeDiffOutOfRangeWarning
	132, // 131: horus.pb.LogData.tensorrt_log:type_name -> horus.pb.logs.TensorrtLog
	133, // 132: horus.pb.LogData.building_tensorrt_engine_info:type_name -> horus.pb.logs.BuildingTensorrtEngineInfo
	134, // 133: horus.pb.LogData.loading_tensorrt_engine_info:type_name -> horus.pb.logs.LoadingTensorrtEngineInfo
	135, // 134: horus.pb.LogData.calibration_map_not_found:type_name -> horus.pb.logs.CalibrationMapNotFound
	136, // 135: horus.pb.LogData.calibration_map_not_valid:type_name -> horus.pb.logs.CalibrationMapNotValid
	137, // 136: horus.pb.LogData.calibration_map_path_already_exists:type_name -> horus.pb.logs.CalibrationMapPathAlreadyExists
	138, // 137: horus.pb.LogData.failed_to_save_calibration_map:type_name -> horus.pb.logs.FailedToSaveCalibrationMap
	139, // 138: horus.pb.LogData.failed_to_remove_calibration_map:type_name -> horus.pb.logs.FailedToRemoveCalibrationMap
	140, // 139: horus.pb.LogData.failed_to_iterate_in_directory:type_name -> horus.pb.logs.FailedToIterateInDirectory
	141, // 140: horus.pb.LogData.map_based_calibration_without_map_loading:type_name -> horus.pb.logs.MapBasedCalibrationWithoutMapLoading
	142, // 141: horus.pb.LogData.map_based_calibration_already_running:type_name -> horus.pb.logs.MapBasedCalibrationAlreadyRunning
	143, // 142: horus.pb.LogData.cancel_map_based_calibration_not_running:type_name -> horus.pb.logs.CancelMapBasedCalibrationNotRunning
	144, // 143: horus.pb.LogData.bag_stream_not_found:type_name -> horus.pb.logs.BagStreamNotFound
	145, // 144: horus.pb.LogData.evaluation_bag_started_info:type_name -> horus.pb.logs.EvaluationBagStartedInfo
	146, // 145: horus.pb.LogData.evaluation_bag_finished_info:type_name -> horus.pb.logs.EvaluationBagFinishedInfo
	147, // 146: horus.pb.LogData.bag_not_found:type_name -> horus.pb.logs.BagNotFound
	148, // 147: horus.pb.LogData.building_pipeline_info:type_name -> horus.pb.logs.BuildingPipelineInfo
	149, // 148: horus.pb.LogData.bag_is_not_evaluation:type_name -> horus.pb.logs.BagIsNotEvaluation
	150, // 149: horus.pb.LogData.horus_bag_running:type_name -> horus.pb.logs.HorusBagRunning
	151, // 150: horus.pb.LogData.auto_ground_calibration_warning:type_name -> horus.pb.logs.AutoGroundCalibrationWarning
	152, // 151: horus.pb.LogData.auto_ground_calibration_error:type_name -> horus.pb.logs.AutoGroundCalibrationError
	153, // 152: horus.pb.LogData.object_detector_not_loaded_warning:type_name -> horus.pb.logs.ObjectDetectorNotLoadedWarning
	154, // 153: horus.pb.LogData.calibration_is_running_error:type_name -> horus.pb.logs.CalibrationIsRunningError
	155, // 154: horus.pb.LogData.model_init_in_progress_info:type_name -> horus.pb.logs.ModelInitInProgressInfo
	156, // 155: horus.pb.LogData.rpc_timeout_with_resolution_warning:type_name -> horus.pb.logs.RpcTimeoutWithResolutionWarning
	157, // 156: horus.pb.LogData.calibration_was_cancelled_info:type_name -> horus.pb.logs.CalibrationWasCancelledInfo
	158, // 157: horus.pb.LogData.calibration_map_recording_failed_to_start:type_name -> horus.pb.logs.CalibrationMapRecordingFailedToStart
	159, // 158: horus.pb.LogData.detection_pipeline_requested_reset_info:type_name -> horus.pb.logs.DetectionPipelineRequestedResetInfo
	160, // 159: horus.pb.LogData.preprocessing_service_pipeline_unavailable:type_name -> horus.pb.logs.PreprocessingServicePipelineUnavailable
	161, // 160: horus.pb.LogData.circular_recording_disabled_warning:type_name -> horus.pb.logs.CircularRecordingDisabledWarning
	162, // 161: horus.pb.LogData.snapshot_already_running_warning:type_name -> horus.pb.logs.SnapshotAlreadyRunningWarning
	163, // 162: horus.pb.LogData.active_project_changed_info:type_name -> horus.pb.logs.ActiveProjectChangedInfo
	164, // 163: horus.pb.LogData.project_config_updated_info:type_name -> horus.pb.logs.ProjectConfigUpdatedInfo
	165, // 164: horus.pb.LogData.invalid_lidar_timestamp:type_name -> horus.pb.logs.InvalidLidarTimestamp
	166, // 165: horus.pb.LogData.calibration_accumulating_points_info:type_name -> horus.pb.logs.CalibrationAccumulatingPointsInfo
	167, // 166: horus.pb.LogData.sparse_noise_filter_usage_non_rotational_lidars:type_name -> horus.pb.logs.SparseNoiseFilterUsageNonRotationalLidars
	168, // 167: horus.pb.LogData.file_write_warning:type_name -> horus.pb.logs.FileWriteWarning
	169, // 168: horus.pb.LogData.license_forbidden_feature:type_name -> horus.pb.logs.LicenseForbiddenFeature
	170, // 169: horus.pb.LogData.failed_to_update_configuration:type_name -> horus.pb.logs.FailedToUpdateConfiguration
	171, // 170: horus.pb.LogData.obstruction_detector_bad_reference_warning:type_name -> horus.pb.logs.ObstructionDetectorBadReferenceWarning
	172, // 171: horus.pb.LogData.project_file_invalid_permissions_error:type_name -> horus.pb.logs.ProjectFileInvalidPermissionsError
	173, // 172: horus.pb.LogData.pipeline_scheduler_error:type_name -> horus.pb.logs.PipelineSchedulerError
	174, // 173: horus.pb.LogData.multi_lidar_calibration_warning:type_name -> horus.pb.logs.MultiLidarCalibrationWarning
	175, // 174: horus.pb.LogData.multi_lidar_calibration_error:type_name -> horus.pb.logs.MultiLidarCalibrationError
	176, // 175: horus.pb.LogData.old_bag_warning:type_name -> horus.pb.logs.OldBagWarning
	177, // 176: horus.pb.LogData.upgrading_bag_info:type_name -> horus.pb.logs.UpgradingBagInfo
	178, // 177: horus.pb.LogData.bag_calibration_save_failed:type_name -> horus.pb.logs.BagCalibrationSaveFailed
	179, // 178: horus.pb.LogData.bag_upgrade_failed:type_name -> horus.pb.logs.BagUpgradeFailed
	180, // 179: horus.pb.LogData.unknown_lidar_error:type_name -> horus.pb.logs.UnknownLidarError
	181, // 180: horus.pb.LogData.invalid_point_cloud_warning:type_name -> horus.pb.logs.InvalidPointCloudWarning
	182, // 181: horus.pb.LogData.lidar_is_dropping_packets:type_name -> horus.pb.logs.LidarIsDroppingPackets
	183, // 182: horus.pb.LogData.removed_invalid_lidars_from_config_warning:type_name -> horus.pb.logs.RemovedInvalidLidarsFromConfigWarning
	184, // 183: horus.pb.LogData.calibration_map_recording_failed:type_name -> horus.pb.logs.CalibrationMapRecordingFailed
	185, // 184: horus.pb.LogData.detection_node_not_found_error:type_name -> horus.pb.logs.DetectionNodeNotFoundError
	186, // 185: horus.pb.LogData.created_version_backup_info:type_name -> horus.pb.logs.CreatedVersionBackupInfo
	187, // 186: horus.pb.LogData.ply_file_load_failed_error:type_name -> horus.pb.logs.PlyFileLoadFailedError
	188, // 187: horus.pb.LogData.hesai_driver_lifecycle:type_name -> horus.pb.logs.HesaiDriverLifecycle
	189, // 188: horus.pb.LogData.hesai_driver_error:type_name -> horus.pb.logs.HesaiDriverError
	190, // 189: horus.pb.LogData.hesai_packet_processing_failed:type_name -> horus.pb.logs.HesaiPacketProcessingFailed
	191, // 190: horus.pb.LogData.hesai_correction_file_error:type_name -> horus.pb.logs.HesaiCorrectionFileError
	192, // 191: horus.pb.LogData.hesai_packet_statistics:type_name -> horus.pb.logs.HesaiPacketStatistics
	193, // 192: horus.pb.LogData.ply_file_write_failed_error:type_name -> horus.pb.logs.PlyFileWriteFailedError
	194, // 193: horus.pb.LogData.project_save_error:type_name -> horus.pb.logs.ProjectSaveError
	195, // 194: horus.pb.LogData.save_static_environment_success:type_name -> horus.pb.logs.SaveStaticEnvironmentSuccess
	196, // 195: horus.pb.LogData.save_static_environment_failed:type_name -> horus.pb.logs.SaveStaticEnvironmentFailed
	197, // 196: horus.pb.LogData.load_static_environment_success:type_name -> horus.pb.logs.LoadStaticEnvironmentSuccess
	198, // 197: horus.pb.LogData.load_static_environment_failed:type_name -> horus.pb.logs.LoadStaticEnvironmentFailed
	199, // 198: horus.pb.LogData.attempt_to_inject_invalid_lidar_id_warning:type_name -> horus.pb.logs.AttemptToInjectInvalidLidarIdWarning
	200, // 199: horus.pb.LogData.reset_bundled_packet_due_to_unexpected_packet:type_name -> horus.pb.logs.ResetBundledPacketDueToUnexpectedPacket
	200, // [200:200] is the sub-list for method output_type
	200, // [200:200] is the sub-list for method input_type
	200, // [200:200] is the sub-list for extension type_name
	200, // [200:200] is the sub-list for extension extendee
	0,   // [0:200] is the sub-list for field type_name
}

func init() { file_horus_pb_logs_message_proto_init() }
func file_horus_pb_logs_message_proto_init() {
	if File_horus_pb_logs_message_proto != nil {
		return
	}
	file_horus_pb_logs_message_proto_msgTypes[1].OneofWrappers = []any{
		(*logData_Generic)(nil),
		(*logData_Oom)(nil),
		(*logData_RpcConnectionError)(nil),
		(*logData_InvalidProjectName)(nil),
		(*logData_ProjectNotFound)(nil),
		(*logData_ProjectAlreadyExists)(nil),
		(*logData_InvalidConfiguration)(nil),
		(*logData_EntityNotFound)(nil),
		(*logData_ActiveProjectCannotBeDeleted)(nil),
		(*logData_RpcDisconnectionError)(nil),
		(*logData_DroppedLogs)(nil),
		(*logData_OpenedProject)(nil),
		(*logData_CreatedProject)(nil),
		(*logData_ConfigUnavailable)(nil),
		(*logData_InvalidRequest)(nil),
		(*logData_SanityCheckError)(nil),
		(*logData_BagFailedToOpen)(nil),
		(*logData_BagFailedToClose)(nil),
		(*logData_BagConversionFailed)(nil),
		(*logData_BagFailedToWrite)(nil),
		(*logData_CalibrationError)(nil),
		(*logData_ProjectManagerFailedToStartRecording)(nil),
		(*logData_ProjectManagerFailedToStopRecording)(nil),
		(*logData_ServiceConnectionTimedOut)(nil),
		(*logData_BagRecorderAlreadyRunning)(nil),
		(*logData_LicenseServerConnectionError)(nil),
		(*logData_LicenseError)(nil),
		(*logData_LicenseNotFoundError)(nil),
		(*logData_LicenseExpiredError)(nil),
		(*logData_LicenseExceededError)(nil),
		(*logData_LicenseHostMachineError)(nil),
		(*logData_LicensePrivilegeError)(nil),
		(*logData_LicenseActiveInfo)(nil),
		(*logData_MultipleLicensesWarning)(nil),
		(*logData_LicenseCurrentLicenseStatusInfo)(nil),
		(*logData_BagRecordingStoppedInfo)(nil),
		(*logData_BagRecordingFailedToStart)(nil),
		(*logData_BagRecordingStartedInfo)(nil),
		(*logData_ReplayRestartedInfo)(nil),
		(*logData_InputSourceChangeRequestedInfo)(nil),
		(*logData_InputSourceSwitchedInfo)(nil),
		(*logData_RpcTimeoutWarning)(nil),
		(*logData_CannotWriteLogFile)(nil),
		(*logData_PointCloudParsingFailureWarning)(nil),
		(*logData_LidarIsDead)(nil),
		(*logData_LidarIsNotDeadAnymore)(nil),
		(*logData_LidarIsObstructed)(nil),
		(*logData_LidarIsNotObstructedAnymore)(nil),
		(*logData_LidarIsTilted)(nil),
		(*logData_LidarIsNotTiltedAnymore)(nil),
		(*logData_LidarHasBeenAutomaticallyRecalibrated)(nil),
		(*logData_ReceivedFirstDataForLidar)(nil),
		(*logData_TerminationFailureError)(nil),
		(*logData_FrameProcessingError)(nil),
		(*logData_ThreadPoolUnavailableError)(nil),
		(*logData_InvalidArgument)(nil),
		(*logData_ComponentInitializationFailureFatal)(nil),
		(*logData_UnhandledEnumCaseError)(nil),
		(*logData_BagEmptyError)(nil),
		(*logData_DiscardingDataError)(nil),
		(*logData_DiscardingDataWarning)(nil),
		(*logData_NothingToProcess)(nil),
		(*logData_InvalidComponentConfiguration)(nil),
		(*logData_ChannelReceiverNotFoundWarning)(nil),
		(*logData_ModelLoadFailure)(nil),
		(*logData_ModelExecutionFailureError)(nil),
		(*logData_ServiceReadyInfo)(nil),
		(*logData_ModelPreparingInfo)(nil),
		(*logData_ModelInitializedInfo)(nil),
		(*logData_ModelInitializationFailureWarning)(nil),
		(*logData_RosSpinnerStoppedWarning)(nil),
		(*logData_ActorSystemUnavailableError)(nil),
		(*logData_ConfigNodeNotFoundError)(nil),
		(*logData_BagTimestampOutOfOrderError)(nil),
		(*logData_BagReplayUnexpectedTimestampError)(nil),
		(*logData_WebsocketClosedInfo)(nil),
		(*logData_WebsocketOpenedInfo)(nil),
		(*logData_SubscriberDisconnectedInfo)(nil),
		(*logData_ThreadPoolSlowingDownWarning)(nil),
		(*logData_ThreadPoolNotRespondingWarning)(nil),
		(*logData_ThreadPoolBrokenPromiseWarning)(nil),
		(*logData_BoxFittingPointsBelowBaseWarning)(nil),
		(*logData_FailedToRemoveStalePointsWarning)(nil),
		(*logData_IrregularBroadcastingPeriodWarning)(nil),
		(*logData_ClustererPointsOutOfRangeWarning)(nil),
		(*logData_InternalError)(nil),
		(*logData_InternalFatal)(nil),
		(*logData_ServiceStartingInfo)(nil),
		(*logData_ConfigNodeNotFoundFatal)(nil),
		(*logData_ServiceSetupError)(nil),
		(*logData_FilesystemError)(nil),
		(*logData_InvalidPresetWarning)(nil),
		(*logData_WebsocketFailedClearPendingError)(nil),
		(*logData_WebsocketFailedToStopError)(nil),
		(*logData_WebsocketFailedToCreateError)(nil),
		(*logData_UnexpectedRpcError)(nil),
		(*logData_LicensePollFailed)(nil),
		(*logData_LicenseExpiredWarning)(nil),
		(*logData_LicenseUsageExceededWarning)(nil),
		(*logData_StaticThreadPoolSlowTaskWarning)(nil),
		(*logData_RpcUnsupportedServiceWarning)(nil),
		(*logData_WebsocketHandlerProblem)(nil),
		(*logData_WebsocketDeserializeError)(nil),
		(*logData_WebsocketExpiredRpcEndpointError)(nil),
		(*logData_WebsocketQueueOverloadedWarning)(nil),
		(*logData_RpcFailedToNotifyWarning)(nil),
		(*logData_ConfigSubscriptionFailedWarning)(nil),
		(*logData_ThreadPoolClampedWorkersWarning)(nil),
		(*logData_StoppingHorusBagRecorderAlreadyStopped)(nil),
		(*logData_RecorderConfigUpdateWhileRunning)(nil),
		(*logData_ClampingDataWarning)(nil),
		(*logData_LidarIncompatibleValues)(nil),
		(*logData_CannotDetermineContainerIdError)(nil),
		(*logData_StartedLidarDriver)(nil),
		(*logData_CannotStartLidarDriver)(nil),
		(*logData_StoppedLidarDriver)(nil),
		(*logData_CannotStopLidarDriver)(nil),
		(*logData_RestartedLidarDriver)(nil),
		(*logData_CannotRestartLidarDriver)(nil),
		(*logData_RemovedUnusedLidarDriver)(nil),
		(*logData_CannotRemoveUnusedLidarDriver)(nil),
		(*logData_LidarDriverGcFailure)(nil),
		(*logData_IdSpaceExhausted)(nil),
		(*logData_PreprocessingToPointAggregatorPointsSkipped)(nil),
		(*logData_MinMsgIntervalLessThanThreshold)(nil),
		(*logData_FailedToCleanupRosWarning)(nil),
		(*logData_RpcDisconnectedWarning)(nil),
		(*logData_RpcUnhandledError)(nil),
		(*logData_TimeDiffOutOfRangeWarning)(nil),
		(*logData_TensorrtLog)(nil),
		(*logData_BuildingTensorrtEngineInfo)(nil),
		(*logData_LoadingTensorrtEngineInfo)(nil),
		(*logData_CalibrationMapNotFound)(nil),
		(*logData_CalibrationMapNotValid)(nil),
		(*logData_CalibrationMapPathAlreadyExists)(nil),
		(*logData_FailedToSaveCalibrationMap)(nil),
		(*logData_FailedToRemoveCalibrationMap)(nil),
		(*logData_FailedToIterateInDirectory)(nil),
		(*logData_MapBasedCalibrationWithoutMapLoading)(nil),
		(*logData_MapBasedCalibrationAlreadyRunning)(nil),
		(*logData_CancelMapBasedCalibrationNotRunning)(nil),
		(*logData_BagStreamNotFound)(nil),
		(*logData_EvaluationBagStartedInfo)(nil),
		(*logData_EvaluationBagFinishedInfo)(nil),
		(*logData_BagNotFound)(nil),
		(*logData_BuildingPipelineInfo)(nil),
		(*logData_BagIsNotEvaluation)(nil),
		(*logData_HorusBagRunning)(nil),
		(*logData_AutoGroundCalibrationWarning)(nil),
		(*logData_AutoGroundCalibrationError)(nil),
		(*logData_ObjectDetectorNotLoadedWarning)(nil),
		(*logData_CalibrationIsRunningError)(nil),
		(*logData_ModelInitInProgressInfo)(nil),
		(*logData_RpcTimeoutWithResolutionWarning)(nil),
		(*logData_CalibrationWasCancelledInfo)(nil),
		(*logData_CalibrationMapRecordingFailedToStart)(nil),
		(*logData_DetectionPipelineRequestedResetInfo)(nil),
		(*logData_PreprocessingServicePipelineUnavailable)(nil),
		(*logData_CircularRecordingDisabledWarning)(nil),
		(*logData_SnapshotAlreadyRunningWarning)(nil),
		(*logData_ActiveProjectChangedInfo)(nil),
		(*logData_ProjectConfigUpdatedInfo)(nil),
		(*logData_InvalidLidarTimestamp)(nil),
		(*logData_CalibrationAccumulatingPointsInfo)(nil),
		(*logData_SparseNoiseFilterUsageNonRotationalLidars)(nil),
		(*logData_FileWriteWarning)(nil),
		(*logData_LicenseForbiddenFeature)(nil),
		(*logData_FailedToUpdateConfiguration)(nil),
		(*logData_ObstructionDetectorBadReferenceWarning)(nil),
		(*logData_ProjectFileInvalidPermissionsError)(nil),
		(*logData_PipelineSchedulerError)(nil),
		(*logData_MultiLidarCalibrationWarning)(nil),
		(*logData_MultiLidarCalibrationError)(nil),
		(*logData_OldBagWarning)(nil),
		(*logData_UpgradingBagInfo)(nil),
		(*logData_BagCalibrationSaveFailed)(nil),
		(*logData_BagUpgradeFailed)(nil),
		(*logData_UnknownLidarError)(nil),
		(*logData_InvalidPointCloudWarning)(nil),
		(*logData_LidarIsDroppingPackets)(nil),
		(*logData_RemovedInvalidLidarsFromConfigWarning)(nil),
		(*logData_CalibrationMapRecordingFailed)(nil),
		(*logData_DetectionNodeNotFoundError)(nil),
		(*logData_CreatedVersionBackupInfo)(nil),
		(*logData_PlyFileLoadFailedError)(nil),
		(*logData_HesaiDriverLifecycle)(nil),
		(*logData_HesaiDriverError)(nil),
		(*logData_HesaiPacketProcessingFailed)(nil),
		(*logData_HesaiCorrectionFileError)(nil),
		(*logData_HesaiPacketStatistics)(nil),
		(*logData_PlyFileWriteFailedError)(nil),
		(*logData_ProjectSaveError)(nil),
		(*logData_SaveStaticEnvironmentSuccess)(nil),
		(*logData_SaveStaticEnvironmentFailed)(nil),
		(*logData_LoadStaticEnvironmentSuccess)(nil),
		(*logData_LoadStaticEnvironmentFailed)(nil),
		(*logData_AttemptToInjectInvalidLidarIdWarning)(nil),
		(*logData_ResetBundledPacketDueToUnexpectedPacket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_horus_pb_logs_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_horus_pb_logs_message_proto_goTypes,
		DependencyIndexes: file_horus_pb_logs_message_proto_depIdxs,
		MessageInfos:      file_horus_pb_logs_message_proto_msgTypes,
	}.Build()
	File_horus_pb_logs_message_proto = out.File
	file_horus_pb_logs_message_proto_rawDesc = nil
	file_horus_pb_logs_message_proto_goTypes = nil
	file_horus_pb_logs_message_proto_depIdxs = nil
}
