// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.3
// source: horus/pb/notification_service/service.proto

package service_pb

import (
	message_pb "github.com/seoulrobotics/horus-sdk/go/proto/logs/message_pb"
	messages_pb "github.com/seoulrobotics/horus-sdk/go/proto/preprocessing/messages_pb"
	profiling_pb "github.com/seoulrobotics/horus-sdk/go/proto/profiling_pb"
	rpc_pb "github.com/seoulrobotics/horus-sdk/go/proto/rpc_pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogMessageRequest struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LogMessage *message_pb.LogMessage `protobuf:"bytes,1,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *LogMessageRequest) Reset() {
	*x = LogMessageRequest{}
	mi := &file_horus_pb_notification_service_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessageRequest) ProtoMessage() {}

func (x *LogMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_notification_service_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LogMessageRequest) GetLogMessage() *message_pb.LogMessage {
	if x != nil {
		return x.xxx_hidden_LogMessage
	}
	return nil
}

func (x *LogMessageRequest) SetLogMessage(v *message_pb.LogMessage) {
	x.xxx_hidden_LogMessage = v
}

func (x *LogMessageRequest) HasLogMessage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LogMessage != nil
}

func (x *LogMessageRequest) ClearLogMessage() {
	x.xxx_hidden_LogMessage = nil
}

type LogMessageRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The message to log.
	LogMessage *message_pb.LogMessage
}

func (b0 LogMessageRequest_builder) Build() *LogMessageRequest {
	m0 := &LogMessageRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LogMessage = b.LogMessage
	return m0
}

type LogMessageEvent struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LogMessage *message_pb.LogMessage `protobuf:"bytes,1,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *LogMessageEvent) Reset() {
	*x = LogMessageEvent{}
	mi := &file_horus_pb_notification_service_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessageEvent) ProtoMessage() {}

func (x *LogMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_notification_service_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LogMessageEvent) GetLogMessage() *message_pb.LogMessage {
	if x != nil {
		return x.xxx_hidden_LogMessage
	}
	return nil
}

func (x *LogMessageEvent) SetLogMessage(v *message_pb.LogMessage) {
	x.xxx_hidden_LogMessage = v
}

func (x *LogMessageEvent) HasLogMessage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LogMessage != nil
}

func (x *LogMessageEvent) ClearLogMessage() {
	x.xxx_hidden_LogMessage = nil
}

type LogMessageEvent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The logged message.
	LogMessage *message_pb.LogMessage
}

func (b0 LogMessageEvent_builder) Build() *LogMessageEvent {
	m0 := &LogMessageEvent{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LogMessage = b.LogMessage
	return m0
}

type ProfilingInfoEvent struct {
	state                    protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_ProfilingInfo *profiling_pb.ProfilingInfo `protobuf:"bytes,1,opt,name=profiling_info,json=profilingInfo,proto3" json:"profiling_info,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ProfilingInfoEvent) Reset() {
	*x = ProfilingInfoEvent{}
	mi := &file_horus_pb_notification_service_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfilingInfoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilingInfoEvent) ProtoMessage() {}

func (x *ProfilingInfoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_notification_service_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProfilingInfoEvent) GetProfilingInfo() *profiling_pb.ProfilingInfo {
	if x != nil {
		return x.xxx_hidden_ProfilingInfo
	}
	return nil
}

func (x *ProfilingInfoEvent) SetProfilingInfo(v *profiling_pb.ProfilingInfo) {
	x.xxx_hidden_ProfilingInfo = v
}

func (x *ProfilingInfoEvent) HasProfilingInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ProfilingInfo != nil
}

func (x *ProfilingInfoEvent) ClearProfilingInfo() {
	x.xxx_hidden_ProfilingInfo = nil
}

type ProfilingInfoEvent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ProfilingInfo *profiling_pb.ProfilingInfo
}

func (b0 ProfilingInfoEvent_builder) Build() *ProfilingInfoEvent {
	m0 := &ProfilingInfoEvent{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ProfilingInfo = b.ProfilingInfo
	return m0
}

type SensorInfoEvent struct {
	state                 protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_SensorInfo *[]*messages_pb.SensorInfo `protobuf:"bytes,1,rep,name=sensor_info,json=sensorInfo,proto3" json:"sensor_info,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SensorInfoEvent) Reset() {
	*x = SensorInfoEvent{}
	mi := &file_horus_pb_notification_service_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorInfoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorInfoEvent) ProtoMessage() {}

func (x *SensorInfoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_notification_service_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SensorInfoEvent) GetSensorInfo() []*messages_pb.SensorInfo {
	if x != nil {
		if x.xxx_hidden_SensorInfo != nil {
			return *x.xxx_hidden_SensorInfo
		}
	}
	return nil
}

func (x *SensorInfoEvent) SetSensorInfo(v []*messages_pb.SensorInfo) {
	x.xxx_hidden_SensorInfo = &v
}

type SensorInfoEvent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SensorInfo []*messages_pb.SensorInfo
}

func (b0 SensorInfoEvent_builder) Build() *SensorInfoEvent {
	m0 := &SensorInfoEvent{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_SensorInfo = &b.SensorInfo
	return m0
}

var File_horus_pb_notification_service_service_proto protoreflect.FileDescriptor

var file_horus_pb_notification_service_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x1a, 0x1b, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70,
	0x62, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x11, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x54, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x32,
	0xd8, 0x04, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0xc2, 0xab, 0xb1, 0x2e, 0x42,
	0x08, 0x01, 0x12, 0x3e, 0x4c, 0x6f, 0x67, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2c, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x73, 0x2e, 0x12, 0xa7, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x21, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0xc2, 0xab, 0xb1, 0x2e, 0x4e, 0x08, 0x03,
	0x12, 0x2b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x1a, 0x1d, 0x0a,
	0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb0, 0x01, 0x0a,
	0x0b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x23, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xc2, 0xab, 0xb1, 0x2e, 0x51, 0x08, 0x04,
	0x12, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x20, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74,
	0x6f, 0x20, 0x60, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x28, 0x29, 0x60, 0x2e,
	0x22, 0x1d, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x59, 0xc2, 0xab, 0xb1, 0x2e, 0x54, 0x08, 0x02, 0x12, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x2e, 0x32, 0xc2, 0x04, 0x0a, 0x1b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4e, 0xc2, 0xab, 0xb1, 0x2e, 0x49, 0x08, 0x01, 0x12, 0x45, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x60, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x60, 0x2e,
	0x12, 0x9c, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0xc2, 0xab,
	0xb1, 0x2e, 0x4c, 0x08, 0x02, 0x12, 0x48, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x60, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x60, 0x2e, 0x12,
	0x93, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x14, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0xc2, 0xab, 0xb1, 0x2e, 0x49, 0x08, 0x03, 0x12, 0x45,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x60,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x60, 0x2e, 0x1a, 0x58, 0xc2, 0xab, 0xb1, 0x2e, 0x53, 0x08, 0x0a, 0x12, 0x4f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x60, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x60, 0x2e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_horus_pb_notification_service_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_horus_pb_notification_service_service_proto_goTypes = []any{
	(*LogMessageRequest)(nil),                 // 0: horus.pb.LogMessageRequest
	(*LogMessageEvent)(nil),                   // 1: horus.pb.LogMessageEvent
	(*ProfilingInfoEvent)(nil),                // 2: horus.pb.ProfilingInfoEvent
	(*SensorInfoEvent)(nil),                   // 3: horus.pb.SensorInfoEvent
	(*message_pb.LogMessage)(nil),             // 4: horus.pb.LogMessage
	(*profiling_pb.ProfilingInfo)(nil),        // 5: horus.pb.ProfilingInfo
	(*messages_pb.SensorInfo)(nil),            // 6: horus.pb.SensorInfo
	(*rpc_pb.DefaultSubscribeRequest)(nil),    // 7: horus.pb.DefaultSubscribeRequest
	(*rpc_pb.DefaultUnsubscribeRequest)(nil),  // 8: horus.pb.DefaultUnsubscribeRequest
	(*rpc_pb.NoResponse)(nil),                 // 9: horus.pb.NoResponse
	(*rpc_pb.DefaultSubscribeResponse)(nil),   // 10: horus.pb.DefaultSubscribeResponse
	(*rpc_pb.DefaultUnsubscribeResponse)(nil), // 11: horus.pb.DefaultUnsubscribeResponse
}
var file_horus_pb_notification_service_service_proto_depIdxs = []int32{
	4,  // 0: horus.pb.LogMessageRequest.log_message:type_name -> horus.pb.LogMessage
	4,  // 1: horus.pb.LogMessageEvent.log_message:type_name -> horus.pb.LogMessage
	5,  // 2: horus.pb.ProfilingInfoEvent.profiling_info:type_name -> horus.pb.ProfilingInfo
	6,  // 3: horus.pb.SensorInfoEvent.sensor_info:type_name -> horus.pb.SensorInfo
	0,  // 4: horus.pb.NotificationService.LogMessage:input_type -> horus.pb.LogMessageRequest
	7,  // 5: horus.pb.NotificationService.Subscribe:input_type -> horus.pb.DefaultSubscribeRequest
	8,  // 6: horus.pb.NotificationService.Unsubscribe:input_type -> horus.pb.DefaultUnsubscribeRequest
	1,  // 7: horus.pb.NotificationListenerService.NotifyLogMessage:input_type -> horus.pb.LogMessageEvent
	2,  // 8: horus.pb.NotificationListenerService.NotifyProfilingInfo:input_type -> horus.pb.ProfilingInfoEvent
	3,  // 9: horus.pb.NotificationListenerService.NotifySensorInfo:input_type -> horus.pb.SensorInfoEvent
	9,  // 10: horus.pb.NotificationService.LogMessage:output_type -> horus.pb.NoResponse
	10, // 11: horus.pb.NotificationService.Subscribe:output_type -> horus.pb.DefaultSubscribeResponse
	11, // 12: horus.pb.NotificationService.Unsubscribe:output_type -> horus.pb.DefaultUnsubscribeResponse
	9,  // 13: horus.pb.NotificationListenerService.NotifyLogMessage:output_type -> horus.pb.NoResponse
	9,  // 14: horus.pb.NotificationListenerService.NotifyProfilingInfo:output_type -> horus.pb.NoResponse
	9,  // 15: horus.pb.NotificationListenerService.NotifySensorInfo:output_type -> horus.pb.NoResponse
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_horus_pb_notification_service_service_proto_init() }
func file_horus_pb_notification_service_service_proto_init() {
	if File_horus_pb_notification_service_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_horus_pb_notification_service_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_horus_pb_notification_service_service_proto_goTypes,
		DependencyIndexes: file_horus_pb_notification_service_service_proto_depIdxs,
		MessageInfos:      file_horus_pb_notification_service_service_proto_msgTypes,
	}.Build()
	File_horus_pb_notification_service_service_proto = out.File
	file_horus_pb_notification_service_service_proto_rawDesc = nil
	file_horus_pb_notification_service_service_proto_goTypes = nil
	file_horus_pb_notification_service_service_proto_depIdxs = nil
}
