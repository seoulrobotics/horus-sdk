// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.3
// source: horus/pb/project_manager/service.proto

package service_pb

import (
	messages_pb "github.com/seoulrobotics/horus-sdk/go/proto/license_server/messages_pb"
	logs_pb "github.com/seoulrobotics/horus-sdk/go/proto/logs/logs_pb"
	messages_pb1 "github.com/seoulrobotics/horus-sdk/go/proto/preprocessing/messages_pb"
	_ "github.com/seoulrobotics/horus-sdk/go/proto/rpc_pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Different actions allowed by a license level
// Encoded through a bitwise encoding
type LicensePrivilege int32

const (
	LicensePrivilege_LICENSE_PRIVILEGE_UNSPECIFIED LicensePrivilege = 0
	// ---------- LEVEL 1 ----------
	// Generic privilege granted by each level.
	LicensePrivilege_LOWEST LicensePrivilege = 1
	// Allow calls to RPC endpoint Subscribe().
	LicensePrivilege_SUBSCRIBE LicensePrivilege = 2
	// ---------- LEVEL 2 ----------
	// Allow calls to license management RPC endpoints:
	// GetLicenseStatus, DownloadLicenseKeyFile, UploadLicenseKey
	LicensePrivilege_LICENSE_ACTIONS LicensePrivilege = 4
	// ---------- LEVEL 3 ----------
	// Allow any read action on config.
	LicensePrivilege_READ LicensePrivilege = 8
	// ---------- LEVEL 4 ----------
	// Allow any config changes.
	LicensePrivilege_WRITE LicensePrivilege = 16
)

// Enum value maps for LicensePrivilege.
var (
	LicensePrivilege_name = map[int32]string{
		0:  "LICENSE_PRIVILEGE_UNSPECIFIED",
		1:  "LOWEST",
		2:  "SUBSCRIBE",
		4:  "LICENSE_ACTIONS",
		8:  "READ",
		16: "WRITE",
	}
	LicensePrivilege_value = map[string]int32{
		"LICENSE_PRIVILEGE_UNSPECIFIED": 0,
		"LOWEST":                        1,
		"SUBSCRIBE":                     2,
		"LICENSE_ACTIONS":               4,
		"READ":                          8,
		"WRITE":                         16,
	}
)

func (x LicensePrivilege) Enum() *LicensePrivilege {
	p := new(LicensePrivilege)
	*p = x
	return p
}

func (x LicensePrivilege) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicensePrivilege) Descriptor() protoreflect.EnumDescriptor {
	return file_horus_pb_project_manager_service_proto_enumTypes[0].Descriptor()
}

func (LicensePrivilege) Type() protoreflect.EnumType {
	return &file_horus_pb_project_manager_service_proto_enumTypes[0]
}

func (x LicensePrivilege) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Service represented by the node.
type GetHealthStatusResponse_NodeHealth_Service int32

const (
	GetHealthStatusResponse_NodeHealth_SERVICE_UNSPECIFIED      GetHealthStatusResponse_NodeHealth_Service = 0
	GetHealthStatusResponse_NodeHealth_SERVICE_DETECTION        GetHealthStatusResponse_NodeHealth_Service = 1
	GetHealthStatusResponse_NodeHealth_SERVICE_LIDAR_RUNNER     GetHealthStatusResponse_NodeHealth_Service = 2
	GetHealthStatusResponse_NodeHealth_SERVICE_NOTIFICATION     GetHealthStatusResponse_NodeHealth_Service = 3
	GetHealthStatusResponse_NodeHealth_SERVICE_POINT_AGGREGATOR GetHealthStatusResponse_NodeHealth_Service = 4
	GetHealthStatusResponse_NodeHealth_SERVICE_PREPROCESSING    GetHealthStatusResponse_NodeHealth_Service = 5
	GetHealthStatusResponse_NodeHealth_SERVICE_PROJECT_MANAGER  GetHealthStatusResponse_NodeHealth_Service = 6
)

// Enum value maps for GetHealthStatusResponse_NodeHealth_Service.
var (
	GetHealthStatusResponse_NodeHealth_Service_name = map[int32]string{
		0: "SERVICE_UNSPECIFIED",
		1: "SERVICE_DETECTION",
		2: "SERVICE_LIDAR_RUNNER",
		3: "SERVICE_NOTIFICATION",
		4: "SERVICE_POINT_AGGREGATOR",
		5: "SERVICE_PREPROCESSING",
		6: "SERVICE_PROJECT_MANAGER",
	}
	GetHealthStatusResponse_NodeHealth_Service_value = map[string]int32{
		"SERVICE_UNSPECIFIED":      0,
		"SERVICE_DETECTION":        1,
		"SERVICE_LIDAR_RUNNER":     2,
		"SERVICE_NOTIFICATION":     3,
		"SERVICE_POINT_AGGREGATOR": 4,
		"SERVICE_PREPROCESSING":    5,
		"SERVICE_PROJECT_MANAGER":  6,
	}
)

func (x GetHealthStatusResponse_NodeHealth_Service) Enum() *GetHealthStatusResponse_NodeHealth_Service {
	p := new(GetHealthStatusResponse_NodeHealth_Service)
	*p = x
	return p
}

func (x GetHealthStatusResponse_NodeHealth_Service) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetHealthStatusResponse_NodeHealth_Service) Descriptor() protoreflect.EnumDescriptor {
	return file_horus_pb_project_manager_service_proto_enumTypes[1].Descriptor()
}

func (GetHealthStatusResponse_NodeHealth_Service) Type() protoreflect.EnumType {
	return &file_horus_pb_project_manager_service_proto_enumTypes[1]
}

func (x GetHealthStatusResponse_NodeHealth_Service) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Connectivity status.
type GetHealthStatusResponse_NodeHealth_Status int32

const (
	GetHealthStatusResponse_NodeHealth_STATUS_UNSPECIFIED GetHealthStatusResponse_NodeHealth_Status = 0
	GetHealthStatusResponse_NodeHealth_STATUS_UNREACHABLE GetHealthStatusResponse_NodeHealth_Status = 1
	GetHealthStatusResponse_NodeHealth_STATUS_ALIVE       GetHealthStatusResponse_NodeHealth_Status = 2
)

// Enum value maps for GetHealthStatusResponse_NodeHealth_Status.
var (
	GetHealthStatusResponse_NodeHealth_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_UNREACHABLE",
		2: "STATUS_ALIVE",
	}
	GetHealthStatusResponse_NodeHealth_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_UNREACHABLE": 1,
		"STATUS_ALIVE":       2,
	}
)

func (x GetHealthStatusResponse_NodeHealth_Status) Enum() *GetHealthStatusResponse_NodeHealth_Status {
	p := new(GetHealthStatusResponse_NodeHealth_Status)
	*p = x
	return p
}

func (x GetHealthStatusResponse_NodeHealth_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetHealthStatusResponse_NodeHealth_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_horus_pb_project_manager_service_proto_enumTypes[2].Descriptor()
}

func (GetHealthStatusResponse_NodeHealth_Status) Type() protoreflect.EnumType {
	return &file_horus_pb_project_manager_service_proto_enumTypes[2]
}

func (x GetHealthStatusResponse_NodeHealth_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type LicenseLevel struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Level     isLicenseLevel_Level   `protobuf_oneof:"level"`
	xxx_hidden_Privilege uint32                 `protobuf:"varint,60,opt,name=privilege,proto3" json:"privilege,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LicenseLevel) Reset() {
	*x = LicenseLevel{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseLevel) ProtoMessage() {}

func (x *LicenseLevel) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LicenseLevel) GetLevel_1() *LicenseLevel_Level1 {
	if x != nil {
		if x, ok := x.xxx_hidden_Level.(*licenseLevel_Level_1); ok {
			return x.Level_1
		}
	}
	return nil
}

func (x *LicenseLevel) GetLevel_2() *LicenseLevel_Level2 {
	if x != nil {
		if x, ok := x.xxx_hidden_Level.(*licenseLevel_Level_2); ok {
			return x.Level_2
		}
	}
	return nil
}

func (x *LicenseLevel) GetLevel_3() *LicenseLevel_Level3 {
	if x != nil {
		if x, ok := x.xxx_hidden_Level.(*licenseLevel_Level_3); ok {
			return x.Level_3
		}
	}
	return nil
}

func (x *LicenseLevel) GetLevel_4() *LicenseLevel_Level4 {
	if x != nil {
		if x, ok := x.xxx_hidden_Level.(*licenseLevel_Level_4); ok {
			return x.Level_4
		}
	}
	return nil
}

func (x *LicenseLevel) GetPrivilege() uint32 {
	if x != nil {
		return x.xxx_hidden_Privilege
	}
	return 0
}

func (x *LicenseLevel) SetLevel_1(v *LicenseLevel_Level1) {
	if v == nil {
		x.xxx_hidden_Level = nil
		return
	}
	x.xxx_hidden_Level = &licenseLevel_Level_1{v}
}

func (x *LicenseLevel) SetLevel_2(v *LicenseLevel_Level2) {
	if v == nil {
		x.xxx_hidden_Level = nil
		return
	}
	x.xxx_hidden_Level = &licenseLevel_Level_2{v}
}

func (x *LicenseLevel) SetLevel_3(v *LicenseLevel_Level3) {
	if v == nil {
		x.xxx_hidden_Level = nil
		return
	}
	x.xxx_hidden_Level = &licenseLevel_Level_3{v}
}

func (x *LicenseLevel) SetLevel_4(v *LicenseLevel_Level4) {
	if v == nil {
		x.xxx_hidden_Level = nil
		return
	}
	x.xxx_hidden_Level = &licenseLevel_Level_4{v}
}

func (x *LicenseLevel) SetPrivilege(v uint32) {
	x.xxx_hidden_Privilege = v
}

func (x *LicenseLevel) HasLevel() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Level != nil
}

func (x *LicenseLevel) HasLevel_1() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Level.(*licenseLevel_Level_1)
	return ok
}

func (x *LicenseLevel) HasLevel_2() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Level.(*licenseLevel_Level_2)
	return ok
}

func (x *LicenseLevel) HasLevel_3() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Level.(*licenseLevel_Level_3)
	return ok
}

func (x *LicenseLevel) HasLevel_4() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Level.(*licenseLevel_Level_4)
	return ok
}

func (x *LicenseLevel) ClearLevel() {
	x.xxx_hidden_Level = nil
}

func (x *LicenseLevel) ClearLevel_1() {
	if _, ok := x.xxx_hidden_Level.(*licenseLevel_Level_1); ok {
		x.xxx_hidden_Level = nil
	}
}

func (x *LicenseLevel) ClearLevel_2() {
	if _, ok := x.xxx_hidden_Level.(*licenseLevel_Level_2); ok {
		x.xxx_hidden_Level = nil
	}
}

func (x *LicenseLevel) ClearLevel_3() {
	if _, ok := x.xxx_hidden_Level.(*licenseLevel_Level_3); ok {
		x.xxx_hidden_Level = nil
	}
}

func (x *LicenseLevel) ClearLevel_4() {
	if _, ok := x.xxx_hidden_Level.(*licenseLevel_Level_4); ok {
		x.xxx_hidden_Level = nil
	}
}

const LicenseLevel_Level_not_set_case case_LicenseLevel_Level = 0
const LicenseLevel_Level_1_case case_LicenseLevel_Level = 10
const LicenseLevel_Level_2_case case_LicenseLevel_Level = 20
const LicenseLevel_Level_3_case case_LicenseLevel_Level = 30
const LicenseLevel_Level_4_case case_LicenseLevel_Level = 40

func (x *LicenseLevel) WhichLevel() case_LicenseLevel_Level {
	if x == nil {
		return LicenseLevel_Level_not_set_case
	}
	switch x.xxx_hidden_Level.(type) {
	case *licenseLevel_Level_1:
		return LicenseLevel_Level_1_case
	case *licenseLevel_Level_2:
		return LicenseLevel_Level_2_case
	case *licenseLevel_Level_3:
		return LicenseLevel_Level_3_case
	case *licenseLevel_Level_4:
		return LicenseLevel_Level_4_case
	default:
		return LicenseLevel_Level_not_set_case
	}
}

type LicenseLevel_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// We are using such fields number to easily be able to add other license
	// levels in the future.

	// Fields of oneof xxx_hidden_Level:
	Level_1 *LicenseLevel_Level1
	Level_2 *LicenseLevel_Level2
	Level_3 *LicenseLevel_Level3
	Level_4 *LicenseLevel_Level4
	// -- end of xxx_hidden_Level
	// Bitset of granted privileges; hard-coded for each level.
	// Refers to LicensePrivilege.
	Privilege uint32
}

func (b0 LicenseLevel_builder) Build() *LicenseLevel {
	m0 := &LicenseLevel{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Level_1 != nil {
		x.xxx_hidden_Level = &licenseLevel_Level_1{b.Level_1}
	}
	if b.Level_2 != nil {
		x.xxx_hidden_Level = &licenseLevel_Level_2{b.Level_2}
	}
	if b.Level_3 != nil {
		x.xxx_hidden_Level = &licenseLevel_Level_3{b.Level_3}
	}
	if b.Level_4 != nil {
		x.xxx_hidden_Level = &licenseLevel_Level_4{b.Level_4}
	}
	x.xxx_hidden_Privilege = b.Privilege
	return m0
}

type case_LicenseLevel_Level protoreflect.FieldNumber

func (x case_LicenseLevel_Level) String() string {
	md := file_horus_pb_project_manager_service_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isLicenseLevel_Level interface {
	isLicenseLevel_Level()
}

type licenseLevel_Level_1 struct {
	Level_1 *LicenseLevel_Level1 `protobuf:"bytes,10,opt,name=level_1,json=level1,proto3,oneof"`
}

type licenseLevel_Level_2 struct {
	Level_2 *LicenseLevel_Level2 `protobuf:"bytes,20,opt,name=level_2,json=level2,proto3,oneof"`
}

type licenseLevel_Level_3 struct {
	Level_3 *LicenseLevel_Level3 `protobuf:"bytes,30,opt,name=level_3,json=level3,proto3,oneof"`
}

type licenseLevel_Level_4 struct {
	Level_4 *LicenseLevel_Level4 `protobuf:"bytes,40,opt,name=level_4,json=level4,proto3,oneof"`
}

func (*licenseLevel_Level_1) isLicenseLevel_Level() {}

func (*licenseLevel_Level_2) isLicenseLevel_Level() {}

func (*licenseLevel_Level_3) isLicenseLevel_Level() {}

func (*licenseLevel_Level_4) isLicenseLevel_Level() {}

type LicenseStatus struct {
	state                   protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_LicenseLevel *LicenseLevel            `protobuf:"bytes,1,opt,name=license_level,json=licenseLevel,proto3" json:"license_level,omitempty"`
	xxx_hidden_LicenseInfo  *messages_pb.LicenseInfo `protobuf:"bytes,2,opt,name=license_info,json=licenseInfo,proto3,oneof" json:"license_info,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *LicenseStatus) Reset() {
	*x = LicenseStatus{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseStatus) ProtoMessage() {}

func (x *LicenseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LicenseStatus) GetLicenseLevel() *LicenseLevel {
	if x != nil {
		return x.xxx_hidden_LicenseLevel
	}
	return nil
}

func (x *LicenseStatus) GetLicenseInfo() *messages_pb.LicenseInfo {
	if x != nil {
		return x.xxx_hidden_LicenseInfo
	}
	return nil
}

func (x *LicenseStatus) SetLicenseLevel(v *LicenseLevel) {
	x.xxx_hidden_LicenseLevel = v
}

func (x *LicenseStatus) SetLicenseInfo(v *messages_pb.LicenseInfo) {
	x.xxx_hidden_LicenseInfo = v
}

func (x *LicenseStatus) HasLicenseLevel() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LicenseLevel != nil
}

func (x *LicenseStatus) HasLicenseInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LicenseInfo != nil
}

func (x *LicenseStatus) ClearLicenseLevel() {
	x.xxx_hidden_LicenseLevel = nil
}

func (x *LicenseStatus) ClearLicenseInfo() {
	x.xxx_hidden_LicenseInfo = nil
}

type LicenseStatus_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	LicenseLevel *LicenseLevel
	// If level is inferior to 3, this field is unset
	LicenseInfo *messages_pb.LicenseInfo
}

func (b0 LicenseStatus_builder) Build() *LicenseStatus {
	m0 := &LicenseStatus{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LicenseLevel = b.LicenseLevel
	x.xxx_hidden_LicenseInfo = b.LicenseInfo
	return m0
}

type GetHealthStatusRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHealthStatusRequest) Reset() {
	*x = GetHealthStatusRequest{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHealthStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthStatusRequest) ProtoMessage() {}

func (x *GetHealthStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type GetHealthStatusRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 GetHealthStatusRequest_builder) Build() *GetHealthStatusRequest {
	m0 := &GetHealthStatusRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Report of the health status of horus.
// It gathers information about:
// - License
// - Lidar status
// - Services connectivity
type GetHealthStatusResponse struct {
	state                      protoimpl.MessageState                   `protogen:"opaque.v1"`
	xxx_hidden_LicenseStatus   *LicenseStatus                           `protobuf:"bytes,1,opt,name=license_status,json=licenseStatus,proto3" json:"license_status,omitempty"`
	xxx_hidden_SensorStatuses  *[]*GetHealthStatusResponse_SensorHealth `protobuf:"bytes,2,rep,name=sensor_statuses,json=sensorStatuses,proto3" json:"sensor_statuses,omitempty"`
	xxx_hidden_ServiceStatuses *[]*GetHealthStatusResponse_NodeHealth   `protobuf:"bytes,3,rep,name=service_statuses,json=serviceStatuses,proto3" json:"service_statuses,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *GetHealthStatusResponse) Reset() {
	*x = GetHealthStatusResponse{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHealthStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthStatusResponse) ProtoMessage() {}

func (x *GetHealthStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetHealthStatusResponse) GetLicenseStatus() *LicenseStatus {
	if x != nil {
		return x.xxx_hidden_LicenseStatus
	}
	return nil
}

func (x *GetHealthStatusResponse) GetSensorStatuses() []*GetHealthStatusResponse_SensorHealth {
	if x != nil {
		if x.xxx_hidden_SensorStatuses != nil {
			return *x.xxx_hidden_SensorStatuses
		}
	}
	return nil
}

func (x *GetHealthStatusResponse) GetServiceStatuses() []*GetHealthStatusResponse_NodeHealth {
	if x != nil {
		if x.xxx_hidden_ServiceStatuses != nil {
			return *x.xxx_hidden_ServiceStatuses
		}
	}
	return nil
}

func (x *GetHealthStatusResponse) SetLicenseStatus(v *LicenseStatus) {
	x.xxx_hidden_LicenseStatus = v
}

func (x *GetHealthStatusResponse) SetSensorStatuses(v []*GetHealthStatusResponse_SensorHealth) {
	x.xxx_hidden_SensorStatuses = &v
}

func (x *GetHealthStatusResponse) SetServiceStatuses(v []*GetHealthStatusResponse_NodeHealth) {
	x.xxx_hidden_ServiceStatuses = &v
}

func (x *GetHealthStatusResponse) HasLicenseStatus() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LicenseStatus != nil
}

func (x *GetHealthStatusResponse) ClearLicenseStatus() {
	x.xxx_hidden_LicenseStatus = nil
}

type GetHealthStatusResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	LicenseStatus *LicenseStatus
	// Connectivity status of the sensors.
	// If enum status is set to SENSOR_STATUS_UNSPECIFIED, it means that the
	// preprocessing node managing the sensor could not be reached.
	// This specific value will be interpreted as "Sensor unreachable" by the
	// clients.
	SensorStatuses []*GetHealthStatusResponse_SensorHealth
	// Connectivity status of each node.
	ServiceStatuses []*GetHealthStatusResponse_NodeHealth
}

func (b0 GetHealthStatusResponse_builder) Build() *GetHealthStatusResponse {
	m0 := &GetHealthStatusResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LicenseStatus = b.LicenseStatus
	x.xxx_hidden_SensorStatuses = &b.SensorStatuses
	x.xxx_hidden_ServiceStatuses = &b.ServiceStatuses
	return m0
}

type LicenseLevel_Level1 struct {
	state             protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Reason isLicenseLevel_Level1_Reason `protobuf_oneof:"reason"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LicenseLevel_Level1) Reset() {
	*x = LicenseLevel_Level1{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseLevel_Level1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseLevel_Level1) ProtoMessage() {}

func (x *LicenseLevel_Level1) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LicenseLevel_Level1) GetLicenseServerUnreachable() *logs_pb.LicenseServerConnectionError {
	if x != nil {
		if x, ok := x.xxx_hidden_Reason.(*licenseLevel_Level1_LicenseServerUnreachable); ok {
			return x.LicenseServerUnreachable
		}
	}
	return nil
}

func (x *LicenseLevel_Level1) SetLicenseServerUnreachable(v *logs_pb.LicenseServerConnectionError) {
	if v == nil {
		x.xxx_hidden_Reason = nil
		return
	}
	x.xxx_hidden_Reason = &licenseLevel_Level1_LicenseServerUnreachable{v}
}

func (x *LicenseLevel_Level1) HasReason() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Reason != nil
}

func (x *LicenseLevel_Level1) HasLicenseServerUnreachable() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Reason.(*licenseLevel_Level1_LicenseServerUnreachable)
	return ok
}

func (x *LicenseLevel_Level1) ClearReason() {
	x.xxx_hidden_Reason = nil
}

func (x *LicenseLevel_Level1) ClearLicenseServerUnreachable() {
	if _, ok := x.xxx_hidden_Reason.(*licenseLevel_Level1_LicenseServerUnreachable); ok {
		x.xxx_hidden_Reason = nil
	}
}

const LicenseLevel_Level1_Reason_not_set_case case_LicenseLevel_Level1_Reason = 0
const LicenseLevel_Level1_LicenseServerUnreachable_case case_LicenseLevel_Level1_Reason = 1

func (x *LicenseLevel_Level1) WhichReason() case_LicenseLevel_Level1_Reason {
	if x == nil {
		return LicenseLevel_Level1_Reason_not_set_case
	}
	switch x.xxx_hidden_Reason.(type) {
	case *licenseLevel_Level1_LicenseServerUnreachable:
		return LicenseLevel_Level1_LicenseServerUnreachable_case
	default:
		return LicenseLevel_Level1_Reason_not_set_case
	}
}

type LicenseLevel_Level1_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Reason:
	LicenseServerUnreachable *logs_pb.LicenseServerConnectionError
	// -- end of xxx_hidden_Reason
}

func (b0 LicenseLevel_Level1_builder) Build() *LicenseLevel_Level1 {
	m0 := &LicenseLevel_Level1{}
	b, x := &b0, m0
	_, _ = b, x
	if b.LicenseServerUnreachable != nil {
		x.xxx_hidden_Reason = &licenseLevel_Level1_LicenseServerUnreachable{b.LicenseServerUnreachable}
	}
	return m0
}

type case_LicenseLevel_Level1_Reason protoreflect.FieldNumber

func (x case_LicenseLevel_Level1_Reason) String() string {
	md := file_horus_pb_project_manager_service_proto_msgTypes[4].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isLicenseLevel_Level1_Reason interface {
	isLicenseLevel_Level1_Reason()
}

type licenseLevel_Level1_LicenseServerUnreachable struct {
	LicenseServerUnreachable *logs_pb.LicenseServerConnectionError `protobuf:"bytes,1,opt,name=license_server_unreachable,json=licenseServerUnreachable,proto3,oneof"`
}

func (*licenseLevel_Level1_LicenseServerUnreachable) isLicenseLevel_Level1_Reason() {}

type LicenseLevel_Level2 struct {
	state             protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Reason isLicenseLevel_Level2_Reason `protobuf_oneof:"reason"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LicenseLevel_Level2) Reset() {
	*x = LicenseLevel_Level2{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseLevel_Level2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseLevel_Level2) ProtoMessage() {}

func (x *LicenseLevel_Level2) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LicenseLevel_Level2) GetLicenseNotFound() *logs_pb.LicenseNotFoundError {
	if x != nil {
		if x, ok := x.xxx_hidden_Reason.(*licenseLevel_Level2_LicenseNotFound); ok {
			return x.LicenseNotFound
		}
	}
	return nil
}

func (x *LicenseLevel_Level2) SetLicenseNotFound(v *logs_pb.LicenseNotFoundError) {
	if v == nil {
		x.xxx_hidden_Reason = nil
		return
	}
	x.xxx_hidden_Reason = &licenseLevel_Level2_LicenseNotFound{v}
}

func (x *LicenseLevel_Level2) HasReason() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Reason != nil
}

func (x *LicenseLevel_Level2) HasLicenseNotFound() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Reason.(*licenseLevel_Level2_LicenseNotFound)
	return ok
}

func (x *LicenseLevel_Level2) ClearReason() {
	x.xxx_hidden_Reason = nil
}

func (x *LicenseLevel_Level2) ClearLicenseNotFound() {
	if _, ok := x.xxx_hidden_Reason.(*licenseLevel_Level2_LicenseNotFound); ok {
		x.xxx_hidden_Reason = nil
	}
}

const LicenseLevel_Level2_Reason_not_set_case case_LicenseLevel_Level2_Reason = 0
const LicenseLevel_Level2_LicenseNotFound_case case_LicenseLevel_Level2_Reason = 1

func (x *LicenseLevel_Level2) WhichReason() case_LicenseLevel_Level2_Reason {
	if x == nil {
		return LicenseLevel_Level2_Reason_not_set_case
	}
	switch x.xxx_hidden_Reason.(type) {
	case *licenseLevel_Level2_LicenseNotFound:
		return LicenseLevel_Level2_LicenseNotFound_case
	default:
		return LicenseLevel_Level2_Reason_not_set_case
	}
}

type LicenseLevel_Level2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Reason:
	LicenseNotFound *logs_pb.LicenseNotFoundError
	// -- end of xxx_hidden_Reason
}

func (b0 LicenseLevel_Level2_builder) Build() *LicenseLevel_Level2 {
	m0 := &LicenseLevel_Level2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.LicenseNotFound != nil {
		x.xxx_hidden_Reason = &licenseLevel_Level2_LicenseNotFound{b.LicenseNotFound}
	}
	return m0
}

type case_LicenseLevel_Level2_Reason protoreflect.FieldNumber

func (x case_LicenseLevel_Level2_Reason) String() string {
	md := file_horus_pb_project_manager_service_proto_msgTypes[5].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isLicenseLevel_Level2_Reason interface {
	isLicenseLevel_Level2_Reason()
}

type licenseLevel_Level2_LicenseNotFound struct {
	LicenseNotFound *logs_pb.LicenseNotFoundError `protobuf:"bytes,1,opt,name=license_not_found,json=licenseNotFound,proto3,oneof"`
}

func (*licenseLevel_Level2_LicenseNotFound) isLicenseLevel_Level2_Reason() {}

type LicenseLevel_Level3 struct {
	state             protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Reason isLicenseLevel_Level3_Reason `protobuf_oneof:"reason"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LicenseLevel_Level3) Reset() {
	*x = LicenseLevel_Level3{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseLevel_Level3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseLevel_Level3) ProtoMessage() {}

func (x *LicenseLevel_Level3) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LicenseLevel_Level3) GetLicenseExpired() *logs_pb.LicenseExpiredError {
	if x != nil {
		if x, ok := x.xxx_hidden_Reason.(*licenseLevel_Level3_LicenseExpired); ok {
			return x.LicenseExpired
		}
	}
	return nil
}

func (x *LicenseLevel_Level3) GetLicenseServerDisconnected() *logs_pb.LicenseServerConnectionError {
	if x != nil {
		if x, ok := x.xxx_hidden_Reason.(*licenseLevel_Level3_LicenseServerDisconnected); ok {
			return x.LicenseServerDisconnected
		}
	}
	return nil
}

func (x *LicenseLevel_Level3) SetLicenseExpired(v *logs_pb.LicenseExpiredError) {
	if v == nil {
		x.xxx_hidden_Reason = nil
		return
	}
	x.xxx_hidden_Reason = &licenseLevel_Level3_LicenseExpired{v}
}

func (x *LicenseLevel_Level3) SetLicenseServerDisconnected(v *logs_pb.LicenseServerConnectionError) {
	if v == nil {
		x.xxx_hidden_Reason = nil
		return
	}
	x.xxx_hidden_Reason = &licenseLevel_Level3_LicenseServerDisconnected{v}
}

func (x *LicenseLevel_Level3) HasReason() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Reason != nil
}

func (x *LicenseLevel_Level3) HasLicenseExpired() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Reason.(*licenseLevel_Level3_LicenseExpired)
	return ok
}

func (x *LicenseLevel_Level3) HasLicenseServerDisconnected() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Reason.(*licenseLevel_Level3_LicenseServerDisconnected)
	return ok
}

func (x *LicenseLevel_Level3) ClearReason() {
	x.xxx_hidden_Reason = nil
}

func (x *LicenseLevel_Level3) ClearLicenseExpired() {
	if _, ok := x.xxx_hidden_Reason.(*licenseLevel_Level3_LicenseExpired); ok {
		x.xxx_hidden_Reason = nil
	}
}

func (x *LicenseLevel_Level3) ClearLicenseServerDisconnected() {
	if _, ok := x.xxx_hidden_Reason.(*licenseLevel_Level3_LicenseServerDisconnected); ok {
		x.xxx_hidden_Reason = nil
	}
}

const LicenseLevel_Level3_Reason_not_set_case case_LicenseLevel_Level3_Reason = 0
const LicenseLevel_Level3_LicenseExpired_case case_LicenseLevel_Level3_Reason = 1
const LicenseLevel_Level3_LicenseServerDisconnected_case case_LicenseLevel_Level3_Reason = 2

func (x *LicenseLevel_Level3) WhichReason() case_LicenseLevel_Level3_Reason {
	if x == nil {
		return LicenseLevel_Level3_Reason_not_set_case
	}
	switch x.xxx_hidden_Reason.(type) {
	case *licenseLevel_Level3_LicenseExpired:
		return LicenseLevel_Level3_LicenseExpired_case
	case *licenseLevel_Level3_LicenseServerDisconnected:
		return LicenseLevel_Level3_LicenseServerDisconnected_case
	default:
		return LicenseLevel_Level3_Reason_not_set_case
	}
}

type LicenseLevel_Level3_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Reason:
	LicenseExpired            *logs_pb.LicenseExpiredError
	LicenseServerDisconnected *logs_pb.LicenseServerConnectionError
	// -- end of xxx_hidden_Reason
}

func (b0 LicenseLevel_Level3_builder) Build() *LicenseLevel_Level3 {
	m0 := &LicenseLevel_Level3{}
	b, x := &b0, m0
	_, _ = b, x
	if b.LicenseExpired != nil {
		x.xxx_hidden_Reason = &licenseLevel_Level3_LicenseExpired{b.LicenseExpired}
	}
	if b.LicenseServerDisconnected != nil {
		x.xxx_hidden_Reason = &licenseLevel_Level3_LicenseServerDisconnected{b.LicenseServerDisconnected}
	}
	return m0
}

type case_LicenseLevel_Level3_Reason protoreflect.FieldNumber

func (x case_LicenseLevel_Level3_Reason) String() string {
	md := file_horus_pb_project_manager_service_proto_msgTypes[6].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isLicenseLevel_Level3_Reason interface {
	isLicenseLevel_Level3_Reason()
}

type licenseLevel_Level3_LicenseExpired struct {
	LicenseExpired *logs_pb.LicenseExpiredError `protobuf:"bytes,1,opt,name=license_expired,json=licenseExpired,proto3,oneof"`
}

type licenseLevel_Level3_LicenseServerDisconnected struct {
	LicenseServerDisconnected *logs_pb.LicenseServerConnectionError `protobuf:"bytes,2,opt,name=license_server_disconnected,json=licenseServerDisconnected,proto3,oneof"`
}

func (*licenseLevel_Level3_LicenseExpired) isLicenseLevel_Level3_Reason() {}

func (*licenseLevel_Level3_LicenseServerDisconnected) isLicenseLevel_Level3_Reason() {}

type LicenseLevel_Level4 struct {
	state             protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Reason isLicenseLevel_Level4_Reason `protobuf_oneof:"reason"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LicenseLevel_Level4) Reset() {
	*x = LicenseLevel_Level4{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseLevel_Level4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseLevel_Level4) ProtoMessage() {}

func (x *LicenseLevel_Level4) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LicenseLevel_Level4) GetLicenseActive() *logs_pb.LicenseActiveInfo {
	if x != nil {
		if x, ok := x.xxx_hidden_Reason.(*licenseLevel_Level4_LicenseActive); ok {
			return x.LicenseActive
		}
	}
	return nil
}

func (x *LicenseLevel_Level4) SetLicenseActive(v *logs_pb.LicenseActiveInfo) {
	if v == nil {
		x.xxx_hidden_Reason = nil
		return
	}
	x.xxx_hidden_Reason = &licenseLevel_Level4_LicenseActive{v}
}

func (x *LicenseLevel_Level4) HasReason() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Reason != nil
}

func (x *LicenseLevel_Level4) HasLicenseActive() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Reason.(*licenseLevel_Level4_LicenseActive)
	return ok
}

func (x *LicenseLevel_Level4) ClearReason() {
	x.xxx_hidden_Reason = nil
}

func (x *LicenseLevel_Level4) ClearLicenseActive() {
	if _, ok := x.xxx_hidden_Reason.(*licenseLevel_Level4_LicenseActive); ok {
		x.xxx_hidden_Reason = nil
	}
}

const LicenseLevel_Level4_Reason_not_set_case case_LicenseLevel_Level4_Reason = 0
const LicenseLevel_Level4_LicenseActive_case case_LicenseLevel_Level4_Reason = 1

func (x *LicenseLevel_Level4) WhichReason() case_LicenseLevel_Level4_Reason {
	if x == nil {
		return LicenseLevel_Level4_Reason_not_set_case
	}
	switch x.xxx_hidden_Reason.(type) {
	case *licenseLevel_Level4_LicenseActive:
		return LicenseLevel_Level4_LicenseActive_case
	default:
		return LicenseLevel_Level4_Reason_not_set_case
	}
}

type LicenseLevel_Level4_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Reason:
	LicenseActive *logs_pb.LicenseActiveInfo
	// -- end of xxx_hidden_Reason
}

func (b0 LicenseLevel_Level4_builder) Build() *LicenseLevel_Level4 {
	m0 := &LicenseLevel_Level4{}
	b, x := &b0, m0
	_, _ = b, x
	if b.LicenseActive != nil {
		x.xxx_hidden_Reason = &licenseLevel_Level4_LicenseActive{b.LicenseActive}
	}
	return m0
}

type case_LicenseLevel_Level4_Reason protoreflect.FieldNumber

func (x case_LicenseLevel_Level4_Reason) String() string {
	md := file_horus_pb_project_manager_service_proto_msgTypes[7].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isLicenseLevel_Level4_Reason interface {
	isLicenseLevel_Level4_Reason()
}

type licenseLevel_Level4_LicenseActive struct {
	LicenseActive *logs_pb.LicenseActiveInfo `protobuf:"bytes,1,opt,name=license_active,json=licenseActive,proto3,oneof"`
}

func (*licenseLevel_Level4_LicenseActive) isLicenseLevel_Level4_Reason() {}

// Connectivity status of a single node.
type GetHealthStatusResponse_NodeHealth struct {
	state                 protoimpl.MessageState                     `protogen:"opaque.v1"`
	xxx_hidden_Service    GetHealthStatusResponse_NodeHealth_Service `protobuf:"varint,1,opt,name=service,proto3,enum=horus.pb.GetHealthStatusResponse_NodeHealth_Service" json:"service,omitempty"`
	xxx_hidden_NodeId     string                                     `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	xxx_hidden_NodeStatus GetHealthStatusResponse_NodeHealth_Status  `protobuf:"varint,3,opt,name=node_status,json=nodeStatus,proto3,enum=horus.pb.GetHealthStatusResponse_NodeHealth_Status" json:"node_status,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetHealthStatusResponse_NodeHealth) Reset() {
	*x = GetHealthStatusResponse_NodeHealth{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHealthStatusResponse_NodeHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthStatusResponse_NodeHealth) ProtoMessage() {}

func (x *GetHealthStatusResponse_NodeHealth) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetHealthStatusResponse_NodeHealth) GetService() GetHealthStatusResponse_NodeHealth_Service {
	if x != nil {
		return x.xxx_hidden_Service
	}
	return GetHealthStatusResponse_NodeHealth_SERVICE_UNSPECIFIED
}

func (x *GetHealthStatusResponse_NodeHealth) GetNodeId() string {
	if x != nil {
		return x.xxx_hidden_NodeId
	}
	return ""
}

func (x *GetHealthStatusResponse_NodeHealth) GetNodeStatus() GetHealthStatusResponse_NodeHealth_Status {
	if x != nil {
		return x.xxx_hidden_NodeStatus
	}
	return GetHealthStatusResponse_NodeHealth_STATUS_UNSPECIFIED
}

func (x *GetHealthStatusResponse_NodeHealth) SetService(v GetHealthStatusResponse_NodeHealth_Service) {
	x.xxx_hidden_Service = v
}

func (x *GetHealthStatusResponse_NodeHealth) SetNodeId(v string) {
	x.xxx_hidden_NodeId = v
}

func (x *GetHealthStatusResponse_NodeHealth) SetNodeStatus(v GetHealthStatusResponse_NodeHealth_Status) {
	x.xxx_hidden_NodeStatus = v
}

type GetHealthStatusResponse_NodeHealth_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Service    GetHealthStatusResponse_NodeHealth_Service
	NodeId     string
	NodeStatus GetHealthStatusResponse_NodeHealth_Status
}

func (b0 GetHealthStatusResponse_NodeHealth_builder) Build() *GetHealthStatusResponse_NodeHealth {
	m0 := &GetHealthStatusResponse_NodeHealth{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Service = b.Service
	x.xxx_hidden_NodeId = b.NodeId
	x.xxx_hidden_NodeStatus = b.NodeStatus
	return m0
}

// Wraps SensorInfo with node unreachable error
type GetHealthStatusResponse_SensorHealth struct {
	state                           protoimpl.MessageState                                      `protogen:"opaque.v1"`
	xxx_hidden_PreprocessingNodeId  string                                                      `protobuf:"bytes,1,opt,name=preprocessing_node_id,json=preprocessingNodeId,proto3" json:"preprocessing_node_id,omitempty"`
	xxx_hidden_Info                 *messages_pb1.SensorInfo                                    `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	xxx_hidden_NodeUnreachableError isGetHealthStatusResponse_SensorHealth_NodeUnreachableError `protobuf_oneof:"node_unreachable_error"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GetHealthStatusResponse_SensorHealth) Reset() {
	*x = GetHealthStatusResponse_SensorHealth{}
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHealthStatusResponse_SensorHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthStatusResponse_SensorHealth) ProtoMessage() {}

func (x *GetHealthStatusResponse_SensorHealth) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_project_manager_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetHealthStatusResponse_SensorHealth) GetPreprocessingNodeId() string {
	if x != nil {
		return x.xxx_hidden_PreprocessingNodeId
	}
	return ""
}

func (x *GetHealthStatusResponse_SensorHealth) GetInfo() *messages_pb1.SensorInfo {
	if x != nil {
		return x.xxx_hidden_Info
	}
	return nil
}

func (x *GetHealthStatusResponse_SensorHealth) GetTimeout() *logs_pb.ServiceConnectionTimedOut {
	if x != nil {
		if x, ok := x.xxx_hidden_NodeUnreachableError.(*getHealthStatusResponse_SensorHealth_Timeout); ok {
			return x.Timeout
		}
	}
	return nil
}

func (x *GetHealthStatusResponse_SensorHealth) SetPreprocessingNodeId(v string) {
	x.xxx_hidden_PreprocessingNodeId = v
}

func (x *GetHealthStatusResponse_SensorHealth) SetInfo(v *messages_pb1.SensorInfo) {
	x.xxx_hidden_Info = v
}

func (x *GetHealthStatusResponse_SensorHealth) SetTimeout(v *logs_pb.ServiceConnectionTimedOut) {
	if v == nil {
		x.xxx_hidden_NodeUnreachableError = nil
		return
	}
	x.xxx_hidden_NodeUnreachableError = &getHealthStatusResponse_SensorHealth_Timeout{v}
}

func (x *GetHealthStatusResponse_SensorHealth) HasInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Info != nil
}

func (x *GetHealthStatusResponse_SensorHealth) HasNodeUnreachableError() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_NodeUnreachableError != nil
}

func (x *GetHealthStatusResponse_SensorHealth) HasTimeout() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_NodeUnreachableError.(*getHealthStatusResponse_SensorHealth_Timeout)
	return ok
}

func (x *GetHealthStatusResponse_SensorHealth) ClearInfo() {
	x.xxx_hidden_Info = nil
}

func (x *GetHealthStatusResponse_SensorHealth) ClearNodeUnreachableError() {
	x.xxx_hidden_NodeUnreachableError = nil
}

func (x *GetHealthStatusResponse_SensorHealth) ClearTimeout() {
	if _, ok := x.xxx_hidden_NodeUnreachableError.(*getHealthStatusResponse_SensorHealth_Timeout); ok {
		x.xxx_hidden_NodeUnreachableError = nil
	}
}

const GetHealthStatusResponse_SensorHealth_NodeUnreachableError_not_set_case case_GetHealthStatusResponse_SensorHealth_NodeUnreachableError = 0
const GetHealthStatusResponse_SensorHealth_Timeout_case case_GetHealthStatusResponse_SensorHealth_NodeUnreachableError = 3

func (x *GetHealthStatusResponse_SensorHealth) WhichNodeUnreachableError() case_GetHealthStatusResponse_SensorHealth_NodeUnreachableError {
	if x == nil {
		return GetHealthStatusResponse_SensorHealth_NodeUnreachableError_not_set_case
	}
	switch x.xxx_hidden_NodeUnreachableError.(type) {
	case *getHealthStatusResponse_SensorHealth_Timeout:
		return GetHealthStatusResponse_SensorHealth_Timeout_case
	default:
		return GetHealthStatusResponse_SensorHealth_NodeUnreachableError_not_set_case
	}
}

type GetHealthStatusResponse_SensorHealth_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// ID of the preprocessing node managing the sensor
	PreprocessingNodeId string
	// Info of the sensor
	Info *messages_pb1.SensorInfo
	// Set if we could not connect to the node

	// Fields of oneof xxx_hidden_NodeUnreachableError:
	Timeout *logs_pb.ServiceConnectionTimedOut
	// -- end of xxx_hidden_NodeUnreachableError
}

func (b0 GetHealthStatusResponse_SensorHealth_builder) Build() *GetHealthStatusResponse_SensorHealth {
	m0 := &GetHealthStatusResponse_SensorHealth{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_PreprocessingNodeId = b.PreprocessingNodeId
	x.xxx_hidden_Info = b.Info
	if b.Timeout != nil {
		x.xxx_hidden_NodeUnreachableError = &getHealthStatusResponse_SensorHealth_Timeout{b.Timeout}
	}
	return m0
}

type case_GetHealthStatusResponse_SensorHealth_NodeUnreachableError protoreflect.FieldNumber

func (x case_GetHealthStatusResponse_SensorHealth_NodeUnreachableError) String() string {
	md := file_horus_pb_project_manager_service_proto_msgTypes[9].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isGetHealthStatusResponse_SensorHealth_NodeUnreachableError interface {
	isGetHealthStatusResponse_SensorHealth_NodeUnreachableError()
}

type getHealthStatusResponse_SensorHealth_Timeout struct {
	Timeout *logs_pb.ServiceConnectionTimedOut `protobuf:"bytes,3,opt,name=timeout,proto3,oneof"`
}

func (*getHealthStatusResponse_SensorHealth_Timeout) isGetHealthStatusResponse_SensorHealth_NodeUnreachableError() {
}

var File_horus_pb_project_manager_service_proto protoreflect.FileDescriptor

var file_horus_pb_project_manager_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x1a, 0x18, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6c, 0x6f, 0x67,
	0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb7, 0x06, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x38, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x33, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x33, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x12, 0x38,
	0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x34, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x48, 0x00,
	0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x1a, 0x7f, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31,
	0x12, 0x6b, 0x0a, 0x1a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x18, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x65, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x12, 0x51, 0x0a, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xd0,
	0x01, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x12, 0x4d, 0x0a, 0x0f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x1b, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x1a, 0x5d, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x12, 0x49, 0x0a, 0x0e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xba, 0x07, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57,
	0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x1a, 0xdd, 0x03, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x4e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc3,
	0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x44, 0x41, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x10, 0x06, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x1a, 0xcc, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x44, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a,
	0x7a, 0x0a, 0x10, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x50,
	0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x08,
	0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x10, 0x32, 0x8f, 0x02, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a,
	0xc2, 0xab, 0xb1, 0x2e, 0x25, 0x08, 0x26, 0x12, 0x21, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x73, 0x20, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x1a, 0x71, 0xc2, 0xab, 0xb1, 0x2e,
	0x6c, 0x08, 0x03, 0x12, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_horus_pb_project_manager_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_horus_pb_project_manager_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_horus_pb_project_manager_service_proto_goTypes = []any{
	(LicensePrivilege)(0),                           // 0: horus.pb.LicensePrivilege
	(GetHealthStatusResponse_NodeHealth_Service)(0), // 1: horus.pb.GetHealthStatusResponse.NodeHealth.Service
	(GetHealthStatusResponse_NodeHealth_Status)(0),  // 2: horus.pb.GetHealthStatusResponse.NodeHealth.Status
	(*LicenseLevel)(nil),                            // 3: horus.pb.LicenseLevel
	(*LicenseStatus)(nil),                           // 4: horus.pb.LicenseStatus
	(*GetHealthStatusRequest)(nil),                  // 5: horus.pb.GetHealthStatusRequest
	(*GetHealthStatusResponse)(nil),                 // 6: horus.pb.GetHealthStatusResponse
	(*LicenseLevel_Level1)(nil),                     // 7: horus.pb.LicenseLevel.Level1
	(*LicenseLevel_Level2)(nil),                     // 8: horus.pb.LicenseLevel.Level2
	(*LicenseLevel_Level3)(nil),                     // 9: horus.pb.LicenseLevel.Level3
	(*LicenseLevel_Level4)(nil),                     // 10: horus.pb.LicenseLevel.Level4
	(*GetHealthStatusResponse_NodeHealth)(nil),      // 11: horus.pb.GetHealthStatusResponse.NodeHealth
	(*GetHealthStatusResponse_SensorHealth)(nil),    // 12: horus.pb.GetHealthStatusResponse.SensorHealth
	(*messages_pb.LicenseInfo)(nil),                 // 13: horus.pb.LicenseInfo
	(*logs_pb.LicenseServerConnectionError)(nil),    // 14: horus.pb.logs.LicenseServerConnectionError
	(*logs_pb.LicenseNotFoundError)(nil),            // 15: horus.pb.logs.LicenseNotFoundError
	(*logs_pb.LicenseExpiredError)(nil),             // 16: horus.pb.logs.LicenseExpiredError
	(*logs_pb.LicenseActiveInfo)(nil),               // 17: horus.pb.logs.LicenseActiveInfo
	(*messages_pb1.SensorInfo)(nil),                 // 18: horus.pb.SensorInfo
	(*logs_pb.ServiceConnectionTimedOut)(nil),       // 19: horus.pb.logs.ServiceConnectionTimedOut
}
var file_horus_pb_project_manager_service_proto_depIdxs = []int32{
	7,  // 0: horus.pb.LicenseLevel.level_1:type_name -> horus.pb.LicenseLevel.Level1
	8,  // 1: horus.pb.LicenseLevel.level_2:type_name -> horus.pb.LicenseLevel.Level2
	9,  // 2: horus.pb.LicenseLevel.level_3:type_name -> horus.pb.LicenseLevel.Level3
	10, // 3: horus.pb.LicenseLevel.level_4:type_name -> horus.pb.LicenseLevel.Level4
	3,  // 4: horus.pb.LicenseStatus.license_level:type_name -> horus.pb.LicenseLevel
	13, // 5: horus.pb.LicenseStatus.license_info:type_name -> horus.pb.LicenseInfo
	4,  // 6: horus.pb.GetHealthStatusResponse.license_status:type_name -> horus.pb.LicenseStatus
	12, // 7: horus.pb.GetHealthStatusResponse.sensor_statuses:type_name -> horus.pb.GetHealthStatusResponse.SensorHealth
	11, // 8: horus.pb.GetHealthStatusResponse.service_statuses:type_name -> horus.pb.GetHealthStatusResponse.NodeHealth
	14, // 9: horus.pb.LicenseLevel.Level1.license_server_unreachable:type_name -> horus.pb.logs.LicenseServerConnectionError
	15, // 10: horus.pb.LicenseLevel.Level2.license_not_found:type_name -> horus.pb.logs.LicenseNotFoundError
	16, // 11: horus.pb.LicenseLevel.Level3.license_expired:type_name -> horus.pb.logs.LicenseExpiredError
	14, // 12: horus.pb.LicenseLevel.Level3.license_server_disconnected:type_name -> horus.pb.logs.LicenseServerConnectionError
	17, // 13: horus.pb.LicenseLevel.Level4.license_active:type_name -> horus.pb.logs.LicenseActiveInfo
	1,  // 14: horus.pb.GetHealthStatusResponse.NodeHealth.service:type_name -> horus.pb.GetHealthStatusResponse.NodeHealth.Service
	2,  // 15: horus.pb.GetHealthStatusResponse.NodeHealth.node_status:type_name -> horus.pb.GetHealthStatusResponse.NodeHealth.Status
	18, // 16: horus.pb.GetHealthStatusResponse.SensorHealth.info:type_name -> horus.pb.SensorInfo
	19, // 17: horus.pb.GetHealthStatusResponse.SensorHealth.timeout:type_name -> horus.pb.logs.ServiceConnectionTimedOut
	5,  // 18: horus.pb.ProjectManagerService.GetHealthStatus:input_type -> horus.pb.GetHealthStatusRequest
	6,  // 19: horus.pb.ProjectManagerService.GetHealthStatus:output_type -> horus.pb.GetHealthStatusResponse
	19, // [19:20] is the sub-list for method output_type
	18, // [18:19] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_horus_pb_project_manager_service_proto_init() }
func file_horus_pb_project_manager_service_proto_init() {
	if File_horus_pb_project_manager_service_proto != nil {
		return
	}
	file_horus_pb_project_manager_service_proto_msgTypes[0].OneofWrappers = []any{
		(*licenseLevel_Level_1)(nil),
		(*licenseLevel_Level_2)(nil),
		(*licenseLevel_Level_3)(nil),
		(*licenseLevel_Level_4)(nil),
	}
	file_horus_pb_project_manager_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_horus_pb_project_manager_service_proto_msgTypes[4].OneofWrappers = []any{
		(*licenseLevel_Level1_LicenseServerUnreachable)(nil),
	}
	file_horus_pb_project_manager_service_proto_msgTypes[5].OneofWrappers = []any{
		(*licenseLevel_Level2_LicenseNotFound)(nil),
	}
	file_horus_pb_project_manager_service_proto_msgTypes[6].OneofWrappers = []any{
		(*licenseLevel_Level3_LicenseExpired)(nil),
		(*licenseLevel_Level3_LicenseServerDisconnected)(nil),
	}
	file_horus_pb_project_manager_service_proto_msgTypes[7].OneofWrappers = []any{
		(*licenseLevel_Level4_LicenseActive)(nil),
	}
	file_horus_pb_project_manager_service_proto_msgTypes[9].OneofWrappers = []any{
		(*getHealthStatusResponse_SensorHealth_Timeout)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_horus_pb_project_manager_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_horus_pb_project_manager_service_proto_goTypes,
		DependencyIndexes: file_horus_pb_project_manager_service_proto_depIdxs,
		EnumInfos:         file_horus_pb_project_manager_service_proto_enumTypes,
		MessageInfos:      file_horus_pb_project_manager_service_proto_msgTypes,
	}.Build()
	File_horus_pb_project_manager_service_proto = out.File
	file_horus_pb_project_manager_service_proto_rawDesc = nil
	file_horus_pb_project_manager_service_proto_goTypes = nil
	file_horus_pb_project_manager_service_proto_depIdxs = nil
}
