// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.3
// source: horus/pb/testing/messages.proto

package messages_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Test enum.
type TestEnum int32

const (
	// Unspecified.
	TestEnum_TEST_ENUM_UNSPECIFIED TestEnum = 0
	// Value `1`.
	TestEnum_TEST_ENUM_ONE TestEnum = 1
	// Value `2`.
	TestEnum_TEST_ENUM_TWO TestEnum = 2
)

// Enum value maps for TestEnum.
var (
	TestEnum_name = map[int32]string{
		0: "TEST_ENUM_UNSPECIFIED",
		1: "TEST_ENUM_ONE",
		2: "TEST_ENUM_TWO",
	}
	TestEnum_value = map[string]int32{
		"TEST_ENUM_UNSPECIFIED": 0,
		"TEST_ENUM_ONE":         1,
		"TEST_ENUM_TWO":         2,
	}
)

func (x TestEnum) Enum() *TestEnum {
	p := new(TestEnum)
	*p = x
	return p
}

func (x TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_horus_pb_testing_messages_proto_enumTypes[0].Descriptor()
}

func (TestEnum) Type() protoreflect.EnumType {
	return &file_horus_pb_testing_messages_proto_enumTypes[0]
}

func (x TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Test message.
type TestMessage struct {
	state                    protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_Float         float32                    `protobuf:"fixed32,1,opt,name=float,proto3" json:"float,omitempty"`
	xxx_hidden_Double        float64                    `protobuf:"fixed64,2,opt,name=double,proto3" json:"double,omitempty"`
	xxx_hidden_I32           int32                      `protobuf:"varint,3,opt,name=i32,proto3" json:"i32,omitempty"`
	xxx_hidden_I64           int64                      `protobuf:"varint,4,opt,name=i64,proto3" json:"i64,omitempty"`
	xxx_hidden_U32           uint32                     `protobuf:"varint,5,opt,name=u32,proto3" json:"u32,omitempty"`
	xxx_hidden_U64           uint64                     `protobuf:"varint,6,opt,name=u64,proto3" json:"u64,omitempty"`
	xxx_hidden_Bytes         []byte                     `protobuf:"bytes,7,opt,name=bytes,proto3" json:"bytes,omitempty"`
	xxx_hidden_String_       string                     `protobuf:"bytes,8,opt,name=string,proto3" json:"string,omitempty"`
	xxx_hidden_Submessage    *TestMessage_SubMessage    `protobuf:"bytes,9,opt,name=submessage,proto3" json:"submessage,omitempty"`
	xxx_hidden_Bool          bool                       `protobuf:"varint,10,opt,name=bool,proto3" json:"bool,omitempty"`
	xxx_hidden_TestOneof     isTestMessage_TestOneof    `protobuf_oneof:"test_oneof"`
	xxx_hidden_RepFloat      []float32                  `protobuf:"fixed32,21,rep,packed,name=rep_float,json=repFloat,proto3" json:"rep_float,omitempty"`
	xxx_hidden_RepDouble     []float64                  `protobuf:"fixed64,22,rep,packed,name=rep_double,json=repDouble,proto3" json:"rep_double,omitempty"`
	xxx_hidden_RepI32        []int32                    `protobuf:"varint,23,rep,packed,name=rep_i32,json=repI32,proto3" json:"rep_i32,omitempty"`
	xxx_hidden_RepI64        []int64                    `protobuf:"varint,24,rep,packed,name=rep_i64,json=repI64,proto3" json:"rep_i64,omitempty"`
	xxx_hidden_RepU32        []uint32                   `protobuf:"varint,25,rep,packed,name=rep_u32,json=repU32,proto3" json:"rep_u32,omitempty"`
	xxx_hidden_RepU64        []uint64                   `protobuf:"varint,26,rep,packed,name=rep_u64,json=repU64,proto3" json:"rep_u64,omitempty"`
	xxx_hidden_RepBytes      [][]byte                   `protobuf:"bytes,27,rep,name=rep_bytes,json=repBytes,proto3" json:"rep_bytes,omitempty"`
	xxx_hidden_RepString     []string                   `protobuf:"bytes,28,rep,name=rep_string,json=repString,proto3" json:"rep_string,omitempty"`
	xxx_hidden_RepSubmessage *[]*TestMessage_SubMessage `protobuf:"bytes,29,rep,name=rep_submessage,json=repSubmessage,proto3" json:"rep_submessage,omitempty"`
	xxx_hidden_RepBool       []bool                     `protobuf:"varint,30,rep,packed,name=rep_bool,json=repBool,proto3" json:"rep_bool,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	mi := &file_horus_pb_testing_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_testing_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestMessage) GetFloat() float32 {
	if x != nil {
		return x.xxx_hidden_Float
	}
	return 0
}

func (x *TestMessage) GetDouble() float64 {
	if x != nil {
		return x.xxx_hidden_Double
	}
	return 0
}

func (x *TestMessage) GetI32() int32 {
	if x != nil {
		return x.xxx_hidden_I32
	}
	return 0
}

func (x *TestMessage) GetI64() int64 {
	if x != nil {
		return x.xxx_hidden_I64
	}
	return 0
}

func (x *TestMessage) GetU32() uint32 {
	if x != nil {
		return x.xxx_hidden_U32
	}
	return 0
}

func (x *TestMessage) GetU64() uint64 {
	if x != nil {
		return x.xxx_hidden_U64
	}
	return 0
}

func (x *TestMessage) GetBytes() []byte {
	if x != nil {
		return x.xxx_hidden_Bytes
	}
	return nil
}

func (x *TestMessage) GetString() string {
	if x != nil {
		return x.xxx_hidden_String_
	}
	return ""
}

func (x *TestMessage) GetSubmessage() *TestMessage_SubMessage {
	if x != nil {
		return x.xxx_hidden_Submessage
	}
	return nil
}

func (x *TestMessage) GetBool() bool {
	if x != nil {
		return x.xxx_hidden_Bool
	}
	return false
}

func (x *TestMessage) GetOneofFloat() float32 {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofFloat); ok {
			return x.OneofFloat
		}
	}
	return 0
}

func (x *TestMessage) GetOneofDouble() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofDouble); ok {
			return x.OneofDouble
		}
	}
	return 0
}

func (x *TestMessage) GetOneofI32() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofI32); ok {
			return x.OneofI32
		}
	}
	return 0
}

func (x *TestMessage) GetOneofI64() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofI64); ok {
			return x.OneofI64
		}
	}
	return 0
}

func (x *TestMessage) GetOneofU32() uint32 {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofU32); ok {
			return x.OneofU32
		}
	}
	return 0
}

func (x *TestMessage) GetOneofU64() uint64 {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofU64); ok {
			return x.OneofU64
		}
	}
	return 0
}

func (x *TestMessage) GetOneofBytes() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofBytes); ok {
			return x.OneofBytes
		}
	}
	return nil
}

func (x *TestMessage) GetOneofString() string {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofString); ok {
			return x.OneofString
		}
	}
	return ""
}

func (x *TestMessage) GetOneofSubmessage() *TestMessage_SubMessage {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofSubmessage); ok {
			return x.OneofSubmessage
		}
	}
	return nil
}

func (x *TestMessage) GetOneofBool() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofBool); ok {
			return x.OneofBool
		}
	}
	return false
}

func (x *TestMessage) GetRepFloat() []float32 {
	if x != nil {
		return x.xxx_hidden_RepFloat
	}
	return nil
}

func (x *TestMessage) GetRepDouble() []float64 {
	if x != nil {
		return x.xxx_hidden_RepDouble
	}
	return nil
}

func (x *TestMessage) GetRepI32() []int32 {
	if x != nil {
		return x.xxx_hidden_RepI32
	}
	return nil
}

func (x *TestMessage) GetRepI64() []int64 {
	if x != nil {
		return x.xxx_hidden_RepI64
	}
	return nil
}

func (x *TestMessage) GetRepU32() []uint32 {
	if x != nil {
		return x.xxx_hidden_RepU32
	}
	return nil
}

func (x *TestMessage) GetRepU64() []uint64 {
	if x != nil {
		return x.xxx_hidden_RepU64
	}
	return nil
}

func (x *TestMessage) GetRepBytes() [][]byte {
	if x != nil {
		return x.xxx_hidden_RepBytes
	}
	return nil
}

func (x *TestMessage) GetRepString() []string {
	if x != nil {
		return x.xxx_hidden_RepString
	}
	return nil
}

func (x *TestMessage) GetRepSubmessage() []*TestMessage_SubMessage {
	if x != nil {
		if x.xxx_hidden_RepSubmessage != nil {
			return *x.xxx_hidden_RepSubmessage
		}
	}
	return nil
}

func (x *TestMessage) GetRepBool() []bool {
	if x != nil {
		return x.xxx_hidden_RepBool
	}
	return nil
}

func (x *TestMessage) SetFloat(v float32) {
	x.xxx_hidden_Float = v
}

func (x *TestMessage) SetDouble(v float64) {
	x.xxx_hidden_Double = v
}

func (x *TestMessage) SetI32(v int32) {
	x.xxx_hidden_I32 = v
}

func (x *TestMessage) SetI64(v int64) {
	x.xxx_hidden_I64 = v
}

func (x *TestMessage) SetU32(v uint32) {
	x.xxx_hidden_U32 = v
}

func (x *TestMessage) SetU64(v uint64) {
	x.xxx_hidden_U64 = v
}

func (x *TestMessage) SetBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Bytes = v
}

func (x *TestMessage) SetString(v string) {
	x.xxx_hidden_String_ = v
}

func (x *TestMessage) SetSubmessage(v *TestMessage_SubMessage) {
	x.xxx_hidden_Submessage = v
}

func (x *TestMessage) SetBool(v bool) {
	x.xxx_hidden_Bool = v
}

func (x *TestMessage) SetOneofFloat(v float32) {
	x.xxx_hidden_TestOneof = &testMessage_OneofFloat{v}
}

func (x *TestMessage) SetOneofDouble(v float64) {
	x.xxx_hidden_TestOneof = &testMessage_OneofDouble{v}
}

func (x *TestMessage) SetOneofI32(v int32) {
	x.xxx_hidden_TestOneof = &testMessage_OneofI32{v}
}

func (x *TestMessage) SetOneofI64(v int64) {
	x.xxx_hidden_TestOneof = &testMessage_OneofI64{v}
}

func (x *TestMessage) SetOneofU32(v uint32) {
	x.xxx_hidden_TestOneof = &testMessage_OneofU32{v}
}

func (x *TestMessage) SetOneofU64(v uint64) {
	x.xxx_hidden_TestOneof = &testMessage_OneofU64{v}
}

func (x *TestMessage) SetOneofBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_TestOneof = &testMessage_OneofBytes{v}
}

func (x *TestMessage) SetOneofString(v string) {
	x.xxx_hidden_TestOneof = &testMessage_OneofString{v}
}

func (x *TestMessage) SetOneofSubmessage(v *TestMessage_SubMessage) {
	if v == nil {
		x.xxx_hidden_TestOneof = nil
		return
	}
	x.xxx_hidden_TestOneof = &testMessage_OneofSubmessage{v}
}

func (x *TestMessage) SetOneofBool(v bool) {
	x.xxx_hidden_TestOneof = &testMessage_OneofBool{v}
}

func (x *TestMessage) SetRepFloat(v []float32) {
	x.xxx_hidden_RepFloat = v
}

func (x *TestMessage) SetRepDouble(v []float64) {
	x.xxx_hidden_RepDouble = v
}

func (x *TestMessage) SetRepI32(v []int32) {
	x.xxx_hidden_RepI32 = v
}

func (x *TestMessage) SetRepI64(v []int64) {
	x.xxx_hidden_RepI64 = v
}

func (x *TestMessage) SetRepU32(v []uint32) {
	x.xxx_hidden_RepU32 = v
}

func (x *TestMessage) SetRepU64(v []uint64) {
	x.xxx_hidden_RepU64 = v
}

func (x *TestMessage) SetRepBytes(v [][]byte) {
	x.xxx_hidden_RepBytes = v
}

func (x *TestMessage) SetRepString(v []string) {
	x.xxx_hidden_RepString = v
}

func (x *TestMessage) SetRepSubmessage(v []*TestMessage_SubMessage) {
	x.xxx_hidden_RepSubmessage = &v
}

func (x *TestMessage) SetRepBool(v []bool) {
	x.xxx_hidden_RepBool = v
}

func (x *TestMessage) HasSubmessage() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Submessage != nil
}

func (x *TestMessage) HasTestOneof() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TestOneof != nil
}

func (x *TestMessage) HasOneofFloat() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofFloat)
	return ok
}

func (x *TestMessage) HasOneofDouble() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofDouble)
	return ok
}

func (x *TestMessage) HasOneofI32() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofI32)
	return ok
}

func (x *TestMessage) HasOneofI64() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofI64)
	return ok
}

func (x *TestMessage) HasOneofU32() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofU32)
	return ok
}

func (x *TestMessage) HasOneofU64() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofU64)
	return ok
}

func (x *TestMessage) HasOneofBytes() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofBytes)
	return ok
}

func (x *TestMessage) HasOneofString() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofString)
	return ok
}

func (x *TestMessage) HasOneofSubmessage() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofSubmessage)
	return ok
}

func (x *TestMessage) HasOneofBool() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofBool)
	return ok
}

func (x *TestMessage) ClearSubmessage() {
	x.xxx_hidden_Submessage = nil
}

func (x *TestMessage) ClearTestOneof() {
	x.xxx_hidden_TestOneof = nil
}

func (x *TestMessage) ClearOneofFloat() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofFloat); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

func (x *TestMessage) ClearOneofDouble() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofDouble); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

func (x *TestMessage) ClearOneofI32() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofI32); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

func (x *TestMessage) ClearOneofI64() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofI64); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

func (x *TestMessage) ClearOneofU32() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofU32); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

func (x *TestMessage) ClearOneofU64() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofU64); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

func (x *TestMessage) ClearOneofBytes() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofBytes); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

func (x *TestMessage) ClearOneofString() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofString); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

func (x *TestMessage) ClearOneofSubmessage() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofSubmessage); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

func (x *TestMessage) ClearOneofBool() {
	if _, ok := x.xxx_hidden_TestOneof.(*testMessage_OneofBool); ok {
		x.xxx_hidden_TestOneof = nil
	}
}

const TestMessage_TestOneof_not_set_case case_TestMessage_TestOneof = 0
const TestMessage_OneofFloat_case case_TestMessage_TestOneof = 11
const TestMessage_OneofDouble_case case_TestMessage_TestOneof = 12
const TestMessage_OneofI32_case case_TestMessage_TestOneof = 13
const TestMessage_OneofI64_case case_TestMessage_TestOneof = 14
const TestMessage_OneofU32_case case_TestMessage_TestOneof = 15
const TestMessage_OneofU64_case case_TestMessage_TestOneof = 16
const TestMessage_OneofBytes_case case_TestMessage_TestOneof = 17
const TestMessage_OneofString_case case_TestMessage_TestOneof = 18
const TestMessage_OneofSubmessage_case case_TestMessage_TestOneof = 19
const TestMessage_OneofBool_case case_TestMessage_TestOneof = 20

func (x *TestMessage) WhichTestOneof() case_TestMessage_TestOneof {
	if x == nil {
		return TestMessage_TestOneof_not_set_case
	}
	switch x.xxx_hidden_TestOneof.(type) {
	case *testMessage_OneofFloat:
		return TestMessage_OneofFloat_case
	case *testMessage_OneofDouble:
		return TestMessage_OneofDouble_case
	case *testMessage_OneofI32:
		return TestMessage_OneofI32_case
	case *testMessage_OneofI64:
		return TestMessage_OneofI64_case
	case *testMessage_OneofU32:
		return TestMessage_OneofU32_case
	case *testMessage_OneofU64:
		return TestMessage_OneofU64_case
	case *testMessage_OneofBytes:
		return TestMessage_OneofBytes_case
	case *testMessage_OneofString:
		return TestMessage_OneofString_case
	case *testMessage_OneofSubmessage:
		return TestMessage_OneofSubmessage_case
	case *testMessage_OneofBool:
		return TestMessage_OneofBool_case
	default:
		return TestMessage_TestOneof_not_set_case
	}
}

type TestMessage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Float      float32
	Double     float64
	I32        int32
	I64        int64
	U32        uint32
	U64        uint64
	Bytes      []byte
	String     string
	Submessage *TestMessage_SubMessage
	Bool       bool
	// Fields of oneof xxx_hidden_TestOneof:
	OneofFloat      *float32
	OneofDouble     *float64
	OneofI32        *int32
	OneofI64        *int64
	OneofU32        *uint32
	OneofU64        *uint64
	OneofBytes      []byte
	OneofString     *string
	OneofSubmessage *TestMessage_SubMessage
	OneofBool       *bool
	// -- end of xxx_hidden_TestOneof
	RepFloat      []float32
	RepDouble     []float64
	RepI32        []int32
	RepI64        []int64
	RepU32        []uint32
	RepU64        []uint64
	RepBytes      [][]byte
	RepString     []string
	RepSubmessage []*TestMessage_SubMessage
	RepBool       []bool
}

func (b0 TestMessage_builder) Build() *TestMessage {
	m0 := &TestMessage{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Float = b.Float
	x.xxx_hidden_Double = b.Double
	x.xxx_hidden_I32 = b.I32
	x.xxx_hidden_I64 = b.I64
	x.xxx_hidden_U32 = b.U32
	x.xxx_hidden_U64 = b.U64
	x.xxx_hidden_Bytes = b.Bytes
	x.xxx_hidden_String_ = b.String
	x.xxx_hidden_Submessage = b.Submessage
	x.xxx_hidden_Bool = b.Bool
	if b.OneofFloat != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofFloat{*b.OneofFloat}
	}
	if b.OneofDouble != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofDouble{*b.OneofDouble}
	}
	if b.OneofI32 != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofI32{*b.OneofI32}
	}
	if b.OneofI64 != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofI64{*b.OneofI64}
	}
	if b.OneofU32 != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofU32{*b.OneofU32}
	}
	if b.OneofU64 != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofU64{*b.OneofU64}
	}
	if b.OneofBytes != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofBytes{b.OneofBytes}
	}
	if b.OneofString != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofString{*b.OneofString}
	}
	if b.OneofSubmessage != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofSubmessage{b.OneofSubmessage}
	}
	if b.OneofBool != nil {
		x.xxx_hidden_TestOneof = &testMessage_OneofBool{*b.OneofBool}
	}
	x.xxx_hidden_RepFloat = b.RepFloat
	x.xxx_hidden_RepDouble = b.RepDouble
	x.xxx_hidden_RepI32 = b.RepI32
	x.xxx_hidden_RepI64 = b.RepI64
	x.xxx_hidden_RepU32 = b.RepU32
	x.xxx_hidden_RepU64 = b.RepU64
	x.xxx_hidden_RepBytes = b.RepBytes
	x.xxx_hidden_RepString = b.RepString
	x.xxx_hidden_RepSubmessage = &b.RepSubmessage
	x.xxx_hidden_RepBool = b.RepBool
	return m0
}

type case_TestMessage_TestOneof protoreflect.FieldNumber

func (x case_TestMessage_TestOneof) String() string {
	md := file_horus_pb_testing_messages_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTestMessage_TestOneof interface {
	isTestMessage_TestOneof()
}

type testMessage_OneofFloat struct {
	OneofFloat float32 `protobuf:"fixed32,11,opt,name=oneof_float,json=oneofFloat,proto3,oneof"`
}

type testMessage_OneofDouble struct {
	OneofDouble float64 `protobuf:"fixed64,12,opt,name=oneof_double,json=oneofDouble,proto3,oneof"`
}

type testMessage_OneofI32 struct {
	OneofI32 int32 `protobuf:"varint,13,opt,name=oneof_i32,json=oneofI32,proto3,oneof"`
}

type testMessage_OneofI64 struct {
	OneofI64 int64 `protobuf:"varint,14,opt,name=oneof_i64,json=oneofI64,proto3,oneof"`
}

type testMessage_OneofU32 struct {
	OneofU32 uint32 `protobuf:"varint,15,opt,name=oneof_u32,json=oneofU32,proto3,oneof"`
}

type testMessage_OneofU64 struct {
	OneofU64 uint64 `protobuf:"varint,16,opt,name=oneof_u64,json=oneofU64,proto3,oneof"`
}

type testMessage_OneofBytes struct {
	OneofBytes []byte `protobuf:"bytes,17,opt,name=oneof_bytes,json=oneofBytes,proto3,oneof"`
}

type testMessage_OneofString struct {
	OneofString string `protobuf:"bytes,18,opt,name=oneof_string,json=oneofString,proto3,oneof"`
}

type testMessage_OneofSubmessage struct {
	OneofSubmessage *TestMessage_SubMessage `protobuf:"bytes,19,opt,name=oneof_submessage,json=oneofSubmessage,proto3,oneof"`
}

type testMessage_OneofBool struct {
	OneofBool bool `protobuf:"varint,20,opt,name=oneof_bool,json=oneofBool,proto3,oneof"`
}

func (*testMessage_OneofFloat) isTestMessage_TestOneof() {}

func (*testMessage_OneofDouble) isTestMessage_TestOneof() {}

func (*testMessage_OneofI32) isTestMessage_TestOneof() {}

func (*testMessage_OneofI64) isTestMessage_TestOneof() {}

func (*testMessage_OneofU32) isTestMessage_TestOneof() {}

func (*testMessage_OneofU64) isTestMessage_TestOneof() {}

func (*testMessage_OneofBytes) isTestMessage_TestOneof() {}

func (*testMessage_OneofString) isTestMessage_TestOneof() {}

func (*testMessage_OneofSubmessage) isTestMessage_TestOneof() {}

func (*testMessage_OneofBool) isTestMessage_TestOneof() {}

type TestMessage_SubMessage struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_U32     uint32                 `protobuf:"varint,1,opt,name=u32,proto3" json:"u32,omitempty"`
	xxx_hidden_I32     int32                  `protobuf:"varint,2,opt,name=i32,proto3" json:"i32,omitempty"`
	xxx_hidden_String_ string                 `protobuf:"bytes,3,opt,name=string,proto3" json:"string,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TestMessage_SubMessage) Reset() {
	*x = TestMessage_SubMessage{}
	mi := &file_horus_pb_testing_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMessage_SubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage_SubMessage) ProtoMessage() {}

func (x *TestMessage_SubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_testing_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestMessage_SubMessage) GetU32() uint32 {
	if x != nil {
		return x.xxx_hidden_U32
	}
	return 0
}

func (x *TestMessage_SubMessage) GetI32() int32 {
	if x != nil {
		return x.xxx_hidden_I32
	}
	return 0
}

func (x *TestMessage_SubMessage) GetString() string {
	if x != nil {
		return x.xxx_hidden_String_
	}
	return ""
}

func (x *TestMessage_SubMessage) SetU32(v uint32) {
	x.xxx_hidden_U32 = v
}

func (x *TestMessage_SubMessage) SetI32(v int32) {
	x.xxx_hidden_I32 = v
}

func (x *TestMessage_SubMessage) SetString(v string) {
	x.xxx_hidden_String_ = v
}

type TestMessage_SubMessage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	U32    uint32
	I32    int32
	String string
}

func (b0 TestMessage_SubMessage_builder) Build() *TestMessage_SubMessage {
	m0 := &TestMessage_SubMessage{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_U32 = b.U32
	x.xxx_hidden_I32 = b.I32
	x.xxx_hidden_String_ = b.String
	return m0
}

var File_horus_pb_testing_messages_proto protoreflect.FileDescriptor

var file_horus_pb_testing_messages_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x22, 0x9b, 0x08, 0x0a, 0x0b,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x36,
	0x34, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x40, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x09,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x09, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x75, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x5f, 0x75, 0x36, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0c,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x4d, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x72, 0x65, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x70, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x49, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x36,
	0x34, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x70, 0x49, 0x36, 0x34, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x5f, 0x75, 0x33, 0x32, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x70, 0x55, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x5f,
	0x75, 0x36, 0x34, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x70, 0x55, 0x36,
	0x34, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x53, 0x75, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x42, 0x6f, 0x6f,
	0x6c, 0x1a, 0x48, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33,
	0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x69, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x2a, 0x4b, 0x0a, 0x08, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_horus_pb_testing_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_horus_pb_testing_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_horus_pb_testing_messages_proto_goTypes = []any{
	(TestEnum)(0),                  // 0: horus.pb.TestEnum
	(*TestMessage)(nil),            // 1: horus.pb.TestMessage
	(*TestMessage_SubMessage)(nil), // 2: horus.pb.TestMessage.SubMessage
}
var file_horus_pb_testing_messages_proto_depIdxs = []int32{
	2, // 0: horus.pb.TestMessage.submessage:type_name -> horus.pb.TestMessage.SubMessage
	2, // 1: horus.pb.TestMessage.oneof_submessage:type_name -> horus.pb.TestMessage.SubMessage
	2, // 2: horus.pb.TestMessage.rep_submessage:type_name -> horus.pb.TestMessage.SubMessage
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_horus_pb_testing_messages_proto_init() }
func file_horus_pb_testing_messages_proto_init() {
	if File_horus_pb_testing_messages_proto != nil {
		return
	}
	file_horus_pb_testing_messages_proto_msgTypes[0].OneofWrappers = []any{
		(*testMessage_OneofFloat)(nil),
		(*testMessage_OneofDouble)(nil),
		(*testMessage_OneofI32)(nil),
		(*testMessage_OneofI64)(nil),
		(*testMessage_OneofU32)(nil),
		(*testMessage_OneofU64)(nil),
		(*testMessage_OneofBytes)(nil),
		(*testMessage_OneofString)(nil),
		(*testMessage_OneofSubmessage)(nil),
		(*testMessage_OneofBool)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_horus_pb_testing_messages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_horus_pb_testing_messages_proto_goTypes,
		DependencyIndexes: file_horus_pb_testing_messages_proto_depIdxs,
		EnumInfos:         file_horus_pb_testing_messages_proto_enumTypes,
		MessageInfos:      file_horus_pb_testing_messages_proto_msgTypes,
	}.Build()
	File_horus_pb_testing_messages_proto = out.File
	file_horus_pb_testing_messages_proto_rawDesc = nil
	file_horus_pb_testing_messages_proto_goTypes = nil
	file_horus_pb_testing_messages_proto_depIdxs = nil
}
