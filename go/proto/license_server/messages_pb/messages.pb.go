// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.3
// source: horus/pb/license_server/messages.proto

package messages_pb

import (
	metadata_pb "github.com/seoulrobotics/horus-sdk/go/proto/config/metadata_pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// license_converter.cpp is charged of concerting a JWT payload features array
// to LicenseFeature.
type LicenseFeature int32

const (
	LicenseFeature_LICENSE_FEATURE_CAN               LicenseFeature = 0
	LicenseFeature_LICENSE_FEATURE_VIN_ASSOCIATOR    LicenseFeature = 1
	LicenseFeature_LICENSE_FEATURE_MULTI_ROSBAG      LicenseFeature = 2
	LicenseFeature_LICENSE_FEATURE_DEBUGGING_SUPPORT LicenseFeature = 3
	LicenseFeature_LICENSE_FEATURE_ATLAS             LicenseFeature = 4
	LicenseFeature_LICENSE_FEATURE_MACGYVER          LicenseFeature = 5
)

// Enum value maps for LicenseFeature.
var (
	LicenseFeature_name = map[int32]string{
		0: "LICENSE_FEATURE_CAN",
		1: "LICENSE_FEATURE_VIN_ASSOCIATOR",
		2: "LICENSE_FEATURE_MULTI_ROSBAG",
		3: "LICENSE_FEATURE_DEBUGGING_SUPPORT",
		4: "LICENSE_FEATURE_ATLAS",
		5: "LICENSE_FEATURE_MACGYVER",
	}
	LicenseFeature_value = map[string]int32{
		"LICENSE_FEATURE_CAN":               0,
		"LICENSE_FEATURE_VIN_ASSOCIATOR":    1,
		"LICENSE_FEATURE_MULTI_ROSBAG":      2,
		"LICENSE_FEATURE_DEBUGGING_SUPPORT": 3,
		"LICENSE_FEATURE_ATLAS":             4,
		"LICENSE_FEATURE_MACGYVER":          5,
	}
)

func (x LicenseFeature) Enum() *LicenseFeature {
	p := new(LicenseFeature)
	*p = x
	return p
}

func (x LicenseFeature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseFeature) Descriptor() protoreflect.EnumDescriptor {
	return file_horus_pb_license_server_messages_proto_enumTypes[0].Descriptor()
}

func (LicenseFeature) Type() protoreflect.EnumType {
	return &file_horus_pb_license_server_messages_proto_enumTypes[0]
}

func (x LicenseFeature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type LicenseInfo struct {
	state                      protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_ExpirationDate  *metadata_pb.Timestamp         `protobuf:"bytes,1,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	xxx_hidden_LidarCount      uint32                         `protobuf:"varint,2,opt,name=lidar_count,json=lidarCount,proto3" json:"lidar_count,omitempty"`
	xxx_hidden_AllowedFeatures *[]*LicenseInfo_AllowedFeature `protobuf:"bytes,3,rep,name=allowed_features,json=allowedFeatures,proto3" json:"allowed_features,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *LicenseInfo) Reset() {
	*x = LicenseInfo{}
	mi := &file_horus_pb_license_server_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseInfo) ProtoMessage() {}

func (x *LicenseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_license_server_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LicenseInfo) GetExpirationDate() *metadata_pb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ExpirationDate
	}
	return nil
}

func (x *LicenseInfo) GetLidarCount() uint32 {
	if x != nil {
		return x.xxx_hidden_LidarCount
	}
	return 0
}

func (x *LicenseInfo) GetAllowedFeatures() []*LicenseInfo_AllowedFeature {
	if x != nil {
		if x.xxx_hidden_AllowedFeatures != nil {
			return *x.xxx_hidden_AllowedFeatures
		}
	}
	return nil
}

func (x *LicenseInfo) SetExpirationDate(v *metadata_pb.Timestamp) {
	x.xxx_hidden_ExpirationDate = v
}

func (x *LicenseInfo) SetLidarCount(v uint32) {
	x.xxx_hidden_LidarCount = v
}

func (x *LicenseInfo) SetAllowedFeatures(v []*LicenseInfo_AllowedFeature) {
	x.xxx_hidden_AllowedFeatures = &v
}

func (x *LicenseInfo) HasExpirationDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ExpirationDate != nil
}

func (x *LicenseInfo) ClearExpirationDate() {
	x.xxx_hidden_ExpirationDate = nil
}

type LicenseInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Timestamp defining the license's end date of validity
	ExpirationDate *metadata_pb.Timestamp
	// Number of LiDAR devices running at the same time allowed by the license
	LidarCount uint32
	// Features allowed by the license
	AllowedFeatures []*LicenseInfo_AllowedFeature
}

func (b0 LicenseInfo_builder) Build() *LicenseInfo {
	m0 := &LicenseInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ExpirationDate = b.ExpirationDate
	x.xxx_hidden_LidarCount = b.LidarCount
	x.xxx_hidden_AllowedFeatures = &b.AllowedFeatures
	return m0
}

// We use this wrapper message because protobuf does not support well repeated
// enums in C++
type LicenseInfo_AllowedFeature struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Feature LicenseFeature         `protobuf:"varint,1,opt,name=feature,proto3,enum=horus.pb.LicenseFeature" json:"feature,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LicenseInfo_AllowedFeature) Reset() {
	*x = LicenseInfo_AllowedFeature{}
	mi := &file_horus_pb_license_server_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseInfo_AllowedFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseInfo_AllowedFeature) ProtoMessage() {}

func (x *LicenseInfo_AllowedFeature) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_license_server_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LicenseInfo_AllowedFeature) GetFeature() LicenseFeature {
	if x != nil {
		return x.xxx_hidden_Feature
	}
	return LicenseFeature_LICENSE_FEATURE_CAN
}

func (x *LicenseInfo_AllowedFeature) SetFeature(v LicenseFeature) {
	x.xxx_hidden_Feature = v
}

type LicenseInfo_AllowedFeature_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Feature LicenseFeature
}

func (b0 LicenseInfo_AllowedFeature_builder) Build() *LicenseInfo_AllowedFeature {
	m0 := &LicenseInfo_AllowedFeature{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Feature = b.Feature
	return m0
}

var File_horus_pb_license_server_messages_proto protoreflect.FileDescriptor

var file_horus_pb_license_server_messages_proto_rawDesc = []byte{
	0x0a, 0x26, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x1a, 0x1e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4f, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x1a, 0x44, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0xcf, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43,
	0x41, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x49, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x43, 0x45,
	0x4e, 0x53, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x52, 0x4f, 0x53, 0x42, 0x41, 0x47, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45,
	0x42, 0x55, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x54, 0x4c, 0x41, 0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x4d, 0x41, 0x43, 0x47, 0x59, 0x56, 0x45, 0x52, 0x10, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_horus_pb_license_server_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_horus_pb_license_server_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_horus_pb_license_server_messages_proto_goTypes = []any{
	(LicenseFeature)(0),                // 0: horus.pb.LicenseFeature
	(*LicenseInfo)(nil),                // 1: horus.pb.LicenseInfo
	(*LicenseInfo_AllowedFeature)(nil), // 2: horus.pb.LicenseInfo.AllowedFeature
	(*metadata_pb.Timestamp)(nil),      // 3: horus.pb.Timestamp
}
var file_horus_pb_license_server_messages_proto_depIdxs = []int32{
	3, // 0: horus.pb.LicenseInfo.expiration_date:type_name -> horus.pb.Timestamp
	2, // 1: horus.pb.LicenseInfo.allowed_features:type_name -> horus.pb.LicenseInfo.AllowedFeature
	0, // 2: horus.pb.LicenseInfo.AllowedFeature.feature:type_name -> horus.pb.LicenseFeature
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_horus_pb_license_server_messages_proto_init() }
func file_horus_pb_license_server_messages_proto_init() {
	if File_horus_pb_license_server_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_horus_pb_license_server_messages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_horus_pb_license_server_messages_proto_goTypes,
		DependencyIndexes: file_horus_pb_license_server_messages_proto_depIdxs,
		EnumInfos:         file_horus_pb_license_server_messages_proto_enumTypes,
		MessageInfos:      file_horus_pb_license_server_messages_proto_msgTypes,
	}.Build()
	File_horus_pb_license_server_messages_proto = out.File
	file_horus_pb_license_server_messages_proto_rawDesc = nil
	file_horus_pb_license_server_messages_proto_goTypes = nil
	file_horus_pb_license_server_messages_proto_depIdxs = nil
}
