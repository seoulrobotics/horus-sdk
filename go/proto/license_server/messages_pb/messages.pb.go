// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.3
// source: horus/pb/license_server/messages.proto

package messages_pb

import (
	metadata_pb "github.com/seoulrobotics/horus-sdk/go/proto/config/metadata_pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LicenseInfo struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ExpirationDate *metadata_pb.Timestamp `protobuf:"bytes,1,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	xxx_hidden_LidarCount     uint32                 `protobuf:"varint,2,opt,name=lidar_count,json=lidarCount,proto3" json:"lidar_count,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LicenseInfo) Reset() {
	*x = LicenseInfo{}
	mi := &file_horus_pb_license_server_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseInfo) ProtoMessage() {}

func (x *LicenseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_horus_pb_license_server_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LicenseInfo) GetExpirationDate() *metadata_pb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ExpirationDate
	}
	return nil
}

func (x *LicenseInfo) GetLidarCount() uint32 {
	if x != nil {
		return x.xxx_hidden_LidarCount
	}
	return 0
}

func (x *LicenseInfo) SetExpirationDate(v *metadata_pb.Timestamp) {
	x.xxx_hidden_ExpirationDate = v
}

func (x *LicenseInfo) SetLidarCount(v uint32) {
	x.xxx_hidden_LidarCount = v
}

func (x *LicenseInfo) HasExpirationDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ExpirationDate != nil
}

func (x *LicenseInfo) ClearExpirationDate() {
	x.xxx_hidden_ExpirationDate = nil
}

type LicenseInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Timestamp defining the license's end date of validity
	ExpirationDate *metadata_pb.Timestamp
	// Number of LiDAR devices running at the same time allowed by the license
	LidarCount uint32
}

func (b0 LicenseInfo_builder) Build() *LicenseInfo {
	m0 := &LicenseInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ExpirationDate = b.ExpirationDate
	x.xxx_hidden_LidarCount = b.LidarCount
	return m0
}

var File_horus_pb_license_server_messages_proto protoreflect.FileDescriptor

var file_horus_pb_license_server_messages_proto_rawDesc = []byte{
	0x0a, 0x26, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x62, 0x1a, 0x1e, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_horus_pb_license_server_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_horus_pb_license_server_messages_proto_goTypes = []any{
	(*LicenseInfo)(nil),           // 0: horus.pb.LicenseInfo
	(*metadata_pb.Timestamp)(nil), // 1: horus.pb.Timestamp
}
var file_horus_pb_license_server_messages_proto_depIdxs = []int32{
	1, // 0: horus.pb.LicenseInfo.expiration_date:type_name -> horus.pb.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_horus_pb_license_server_messages_proto_init() }
func file_horus_pb_license_server_messages_proto_init() {
	if File_horus_pb_license_server_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_horus_pb_license_server_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_horus_pb_license_server_messages_proto_goTypes,
		DependencyIndexes: file_horus_pb_license_server_messages_proto_depIdxs,
		MessageInfos:      file_horus_pb_license_server_messages_proto_msgTypes,
	}.Build()
	File_horus_pb_license_server_messages_proto = out.File
	file_horus_pb_license_server_messages_proto_rawDesc = nil
	file_horus_pb_license_server_messages_proto_goTypes = nil
	file_horus_pb_license_server_messages_proto_depIdxs = nil
}
